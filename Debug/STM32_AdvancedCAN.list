
STM32_AdvancedCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08006db4  08006db4  00016db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f00  08006f00  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006f00  08006f00  00016f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f08  08006f08  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f08  08006f08  00016f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f0c  08006f0c  00016f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000230  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002c0  200002c0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011e08  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002576  00000000  00000000  00031ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00034440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f00  00000000  00000000  00035428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ca4  00000000  00000000  00036328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012074  00000000  00000000  00057fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0e46  00000000  00000000  0006a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013ae86  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004cf4  00000000  00000000  0013aed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d9c 	.word	0x08006d9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08006d9c 	.word	0x08006d9c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b974 	b.w	8000d4c <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	468e      	mov	lr, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d14d      	bne.n	8000b26 <__udivmoddi4+0xaa>
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	4694      	mov	ip, r2
 8000a8e:	d969      	bls.n	8000b64 <__udivmoddi4+0xe8>
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	b152      	cbz	r2, 8000aac <__udivmoddi4+0x30>
 8000a96:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9a:	f1c2 0120 	rsb	r1, r2, #32
 8000a9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000aa2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aaa:	4094      	lsls	r4, r2
 8000aac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab0:	0c21      	lsrs	r1, r4, #16
 8000ab2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ab6:	fa1f f78c 	uxth.w	r7, ip
 8000aba:	fb08 e316 	mls	r3, r8, r6, lr
 8000abe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ac2:	fb06 f107 	mul.w	r1, r6, r7
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x64>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ad2:	f080 811f 	bcs.w	8000d14 <__udivmoddi4+0x298>
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	f240 811c 	bls.w	8000d14 <__udivmoddi4+0x298>
 8000adc:	3e02      	subs	r6, #2
 8000ade:	4463      	add	r3, ip
 8000ae0:	1a5b      	subs	r3, r3, r1
 8000ae2:	b2a4      	uxth	r4, r4
 8000ae4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af0:	fb00 f707 	mul.w	r7, r0, r7
 8000af4:	42a7      	cmp	r7, r4
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x92>
 8000af8:	eb1c 0404 	adds.w	r4, ip, r4
 8000afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b00:	f080 810a 	bcs.w	8000d18 <__udivmoddi4+0x29c>
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	f240 8107 	bls.w	8000d18 <__udivmoddi4+0x29c>
 8000b0a:	4464      	add	r4, ip
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b12:	1be4      	subs	r4, r4, r7
 8000b14:	2600      	movs	r6, #0
 8000b16:	b11d      	cbz	r5, 8000b20 <__udivmoddi4+0xa4>
 8000b18:	40d4      	lsrs	r4, r2
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b20:	4631      	mov	r1, r6
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d909      	bls.n	8000b3e <__udivmoddi4+0xc2>
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	f000 80ef 	beq.w	8000d0e <__udivmoddi4+0x292>
 8000b30:	2600      	movs	r6, #0
 8000b32:	e9c5 0100 	strd	r0, r1, [r5]
 8000b36:	4630      	mov	r0, r6
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	fab3 f683 	clz	r6, r3
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d14a      	bne.n	8000bdc <__udivmoddi4+0x160>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xd4>
 8000b4a:	4282      	cmp	r2, r0
 8000b4c:	f200 80f9 	bhi.w	8000d42 <__udivmoddi4+0x2c6>
 8000b50:	1a84      	subs	r4, r0, r2
 8000b52:	eb61 0303 	sbc.w	r3, r1, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	469e      	mov	lr, r3
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d0e0      	beq.n	8000b20 <__udivmoddi4+0xa4>
 8000b5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b62:	e7dd      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000b64:	b902      	cbnz	r2, 8000b68 <__udivmoddi4+0xec>
 8000b66:	deff      	udf	#255	; 0xff
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	2a00      	cmp	r2, #0
 8000b6e:	f040 8092 	bne.w	8000c96 <__udivmoddi4+0x21a>
 8000b72:	eba1 010c 	sub.w	r1, r1, ip
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f fe8c 	uxth.w	lr, ip
 8000b7e:	2601      	movs	r6, #1
 8000b80:	0c20      	lsrs	r0, r4, #16
 8000b82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b86:	fb07 1113 	mls	r1, r7, r3, r1
 8000b8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b8e:	fb0e f003 	mul.w	r0, lr, r3
 8000b92:	4288      	cmp	r0, r1
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x12c>
 8000b96:	eb1c 0101 	adds.w	r1, ip, r1
 8000b9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x12a>
 8000ba0:	4288      	cmp	r0, r1
 8000ba2:	f200 80cb 	bhi.w	8000d3c <__udivmoddi4+0x2c0>
 8000ba6:	4643      	mov	r3, r8
 8000ba8:	1a09      	subs	r1, r1, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bb4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x156>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0x154>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f200 80bb 	bhi.w	8000d46 <__udivmoddi4+0x2ca>
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	eba4 040e 	sub.w	r4, r4, lr
 8000bd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bda:	e79c      	b.n	8000b16 <__udivmoddi4+0x9a>
 8000bdc:	f1c6 0720 	rsb	r7, r6, #32
 8000be0:	40b3      	lsls	r3, r6
 8000be2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bea:	fa20 f407 	lsr.w	r4, r0, r7
 8000bee:	fa01 f306 	lsl.w	r3, r1, r6
 8000bf2:	431c      	orrs	r4, r3
 8000bf4:	40f9      	lsrs	r1, r7
 8000bf6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bfa:	fa00 f306 	lsl.w	r3, r0, r6
 8000bfe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c02:	0c20      	lsrs	r0, r4, #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fb09 1118 	mls	r1, r9, r8, r1
 8000c0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c10:	fb08 f00e 	mul.w	r0, r8, lr
 8000c14:	4288      	cmp	r0, r1
 8000c16:	fa02 f206 	lsl.w	r2, r2, r6
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b8>
 8000c1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c24:	f080 8088 	bcs.w	8000d38 <__udivmoddi4+0x2bc>
 8000c28:	4288      	cmp	r0, r1
 8000c2a:	f240 8085 	bls.w	8000d38 <__udivmoddi4+0x2bc>
 8000c2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c32:	4461      	add	r1, ip
 8000c34:	1a09      	subs	r1, r1, r0
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c48:	458e      	cmp	lr, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1e2>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c54:	d26c      	bcs.n	8000d30 <__udivmoddi4+0x2b4>
 8000c56:	458e      	cmp	lr, r1
 8000c58:	d96a      	bls.n	8000d30 <__udivmoddi4+0x2b4>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c62:	fba0 9402 	umull	r9, r4, r0, r2
 8000c66:	eba1 010e 	sub.w	r1, r1, lr
 8000c6a:	42a1      	cmp	r1, r4
 8000c6c:	46c8      	mov	r8, r9
 8000c6e:	46a6      	mov	lr, r4
 8000c70:	d356      	bcc.n	8000d20 <__udivmoddi4+0x2a4>
 8000c72:	d053      	beq.n	8000d1c <__udivmoddi4+0x2a0>
 8000c74:	b15d      	cbz	r5, 8000c8e <__udivmoddi4+0x212>
 8000c76:	ebb3 0208 	subs.w	r2, r3, r8
 8000c7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c82:	fa22 f306 	lsr.w	r3, r2, r6
 8000c86:	40f1      	lsrs	r1, r6
 8000c88:	431f      	orrs	r7, r3
 8000c8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c8e:	2600      	movs	r6, #0
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	f1c2 0320 	rsb	r3, r2, #32
 8000c9a:	40d8      	lsrs	r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	4301      	orrs	r1, r0
 8000ca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cac:	fa1f fe8c 	uxth.w	lr, ip
 8000cb0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cb4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb8:	0c0b      	lsrs	r3, r1, #16
 8000cba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cbe:	fb00 f60e 	mul.w	r6, r0, lr
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x260>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd2:	d22f      	bcs.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd4:	429e      	cmp	r6, r3
 8000cd6:	d92d      	bls.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	b289      	uxth	r1, r1
 8000ce0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ce4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cec:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x28a>
 8000cf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cfc:	d216      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d914      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000d02:	3e02      	subs	r6, #2
 8000d04:	4461      	add	r1, ip
 8000d06:	1ac9      	subs	r1, r1, r3
 8000d08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d0c:	e738      	b.n	8000b80 <__udivmoddi4+0x104>
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e705      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e3      	b.n	8000ae0 <__udivmoddi4+0x64>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6f8      	b.n	8000b0e <__udivmoddi4+0x92>
 8000d1c:	454b      	cmp	r3, r9
 8000d1e:	d2a9      	bcs.n	8000c74 <__udivmoddi4+0x1f8>
 8000d20:	ebb9 0802 	subs.w	r8, r9, r2
 8000d24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7a3      	b.n	8000c74 <__udivmoddi4+0x1f8>
 8000d2c:	4646      	mov	r6, r8
 8000d2e:	e7ea      	b.n	8000d06 <__udivmoddi4+0x28a>
 8000d30:	4620      	mov	r0, r4
 8000d32:	e794      	b.n	8000c5e <__udivmoddi4+0x1e2>
 8000d34:	4640      	mov	r0, r8
 8000d36:	e7d1      	b.n	8000cdc <__udivmoddi4+0x260>
 8000d38:	46d0      	mov	r8, sl
 8000d3a:	e77b      	b.n	8000c34 <__udivmoddi4+0x1b8>
 8000d3c:	3b02      	subs	r3, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	e732      	b.n	8000ba8 <__udivmoddi4+0x12c>
 8000d42:	4630      	mov	r0, r6
 8000d44:	e709      	b.n	8000b5a <__udivmoddi4+0xde>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e742      	b.n	8000bd2 <__udivmoddi4+0x156>

08000d4c <__aeabi_idiv0>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t ADC_VAL;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	// Tester get data
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Tester_RxHeader, Tester_RxData);
 8000d58:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000d5a:	4a1d      	ldr	r2, [pc, #116]	; (8000dd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f001 ffdf 	bl	8002d22 <HAL_CAN_GetRxMessage>
	// WHEN ECU SEND RESPONSE 0x62 --> POSITIVE RESPONSE
	if (Tester_RxData[1] == 0x62)
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000d66:	785b      	ldrb	r3, [r3, #1]
 8000d68:	2b62      	cmp	r3, #98	; 0x62
 8000d6a:	d11b      	bne.n	8000da4 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
	{
		printf(" --> [RESPONSE] Tester get ADC value = 0x");
 8000d6c:	4819      	ldr	r0, [pc, #100]	; (8000dd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000d6e:	f005 f80d 	bl	8005d8c <iprintf>
		for (uint8_t i = (Tester_RxData[0]<<4)>>4; i>1; i--)
 8000d72:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	011b      	lsls	r3, r3, #4
 8000d78:	111b      	asrs	r3, r3, #4
 8000d7a:	73fb      	strb	r3, [r7, #15]
 8000d7c:	e00e      	b.n	8000d9c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
		{
			if (Tester_RxData[i] != 0x55)
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000d82:	5cd3      	ldrb	r3, [r2, r3]
 8000d84:	2b55      	cmp	r3, #85	; 0x55
 8000d86:	d006      	beq.n	8000d96 <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
			{
				printf("%02x", Tester_RxData[i]);
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000d8c:	5cd3      	ldrb	r3, [r2, r3]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4811      	ldr	r0, [pc, #68]	; (8000dd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000d92:	f004 fffb 	bl	8005d8c <iprintf>
		for (uint8_t i = (Tester_RxData[0]<<4)>>4; i>1; i--)
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d8ed      	bhi.n	8000d7e <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
 8000da2:	e006      	b.n	8000db2 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
			}
		}
	}
	else if (Tester_RxData[1] == 0x7F) // NEGATIVE RESPONSE
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000da6:	785b      	ldrb	r3, [r3, #1]
 8000da8:	2b7f      	cmp	r3, #127	; 0x7f
 8000daa:	d102      	bne.n	8000db2 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
	{
		printf(" --> [ERROR] The ADC value is invalid !");
 8000dac:	480b      	ldr	r0, [pc, #44]	; (8000ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8000dae:	f004 ffed 	bl	8005d8c <iprintf>
	}
	printf("\r\n");
 8000db2:	480b      	ldr	r0, [pc, #44]	; (8000de0 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8000db4:	f005 f870 	bl	8005e98 <puts>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2104      	movs	r1, #4
 8000dbc:	4809      	ldr	r0, [pc, #36]	; (8000de4 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000dbe:	f003 f8a5 	bl	8003f0c <HAL_GPIO_WritePin>
}
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000248 	.word	0x20000248
 8000dd4:	08006db4 	.word	0x08006db4
 8000dd8:	08006de0 	.word	0x08006de0
 8000ddc:	08006de8 	.word	0x08006de8
 8000de0:	08006e10 	.word	0x08006e10
 8000de4:	40020400 	.word	0x40020400

08000de8 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	// ECU get data
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &ECU_RxHeader, ECU_RxData);
 8000df0:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <HAL_CAN_RxFifo1MsgPendingCallback+0xac>)
 8000df2:	4a29      	ldr	r2, [pc, #164]	; (8000e98 <HAL_CAN_RxFifo1MsgPendingCallback+0xb0>)
 8000df4:	2101      	movs	r1, #1
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f001 ff93 	bl	8002d22 <HAL_CAN_GetRxMessage>
	// WHEN TESTER SEND REQUEST 0x22H
	if (ECU_RxData[1]==0x22)
 8000dfc:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <HAL_CAN_RxFifo1MsgPendingCallback+0xac>)
 8000dfe:	785b      	ldrb	r3, [r3, #1]
 8000e00:	2b22      	cmp	r3, #34	; 0x22
 8000e02:	d142      	bne.n	8000e8a <HAL_CAN_RxFifo1MsgPendingCallback+0xa2>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	2102      	movs	r1, #2
 8000e08:	4824      	ldr	r0, [pc, #144]	; (8000e9c <HAL_CAN_RxFifo1MsgPendingCallback+0xb4>)
 8000e0a:	f003 f87f 	bl	8003f0c <HAL_GPIO_WritePin>
		HAL_ADC_Start(&hadc1);
 8000e0e:	4824      	ldr	r0, [pc, #144]	; (8000ea0 <HAL_CAN_RxFifo1MsgPendingCallback+0xb8>)
 8000e10:	f000 ff98 	bl	8001d44 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8000e14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e18:	4821      	ldr	r0, [pc, #132]	; (8000ea0 <HAL_CAN_RxFifo1MsgPendingCallback+0xb8>)
 8000e1a:	f001 f898 	bl	8001f4e <HAL_ADC_PollForConversion>
		ADC_VAL = HAL_ADC_GetValue(&hadc1);
 8000e1e:	4820      	ldr	r0, [pc, #128]	; (8000ea0 <HAL_CAN_RxFifo1MsgPendingCallback+0xb8>)
 8000e20:	f001 fa30 	bl	8002284 <HAL_ADC_GetValue>
 8000e24:	4603      	mov	r3, r0
 8000e26:	4a1f      	ldr	r2, [pc, #124]	; (8000ea4 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>)
 8000e28:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 8000e2a:	481d      	ldr	r0, [pc, #116]	; (8000ea0 <HAL_CAN_RxFifo1MsgPendingCallback+0xb8>)
 8000e2c:	f001 f85c 	bl	8001ee8 <HAL_ADC_Stop>

		if (ADC_VAL >= 0)	// read ADC value successful
		{
			ECU_TxData[0] = 0x05;	// 0x0: Single Frame (SF) + 0x5: Data Length (SF_DL)
 8000e30:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <HAL_CAN_RxFifo1MsgPendingCallback+0xc0>)
 8000e32:	2205      	movs	r2, #5
 8000e34:	701a      	strb	r2, [r3, #0]
			ECU_TxData[1] = 0x62;	// 0x22 + 0x40
 8000e36:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <HAL_CAN_RxFifo1MsgPendingCallback+0xc0>)
 8000e38:	2262      	movs	r2, #98	; 0x62
 8000e3a:	705a      	strb	r2, [r3, #1]
			ECU_TxData[2] = ADC_VAL;
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <HAL_CAN_RxFifo1MsgPendingCallback+0xc0>)
 8000e44:	709a      	strb	r2, [r3, #2]
			ECU_TxData[3] = ADC_VAL >> 8;
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	0a1b      	lsrs	r3, r3, #8
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <HAL_CAN_RxFifo1MsgPendingCallback+0xc0>)
 8000e50:	70da      	strb	r2, [r3, #3]
			ECU_TxData[4] = ADC_VAL >> 16;
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	0c1b      	lsrs	r3, r3, #16
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <HAL_CAN_RxFifo1MsgPendingCallback+0xc0>)
 8000e5c:	711a      	strb	r2, [r3, #4]
			ECU_TxData[5] = ADC_VAL >> 24;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	0e1b      	lsrs	r3, r3, #24
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <HAL_CAN_RxFifo1MsgPendingCallback+0xc0>)
 8000e68:	715a      	strb	r2, [r3, #5]
			ECU_TxData[0] = 0x7F;	// Negative Response
			ECU_TxData[1] = 0x22;	// SID Read Data by Identified
			ECU_TxData[2] = 0x13;	// Invalid value

		}
		HAL_CAN_AddTxMessage(hcan, &ECU_TxHeader, ECU_TxData, &ECU_TxMailbox);
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <HAL_CAN_RxFifo1MsgPendingCallback+0xc4>)
 8000e6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <HAL_CAN_RxFifo1MsgPendingCallback+0xc0>)
 8000e6e:	4910      	ldr	r1, [pc, #64]	; (8000eb0 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>)
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f001 fe7b 	bl	8002b6c <HAL_CAN_AddTxMessage>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2102      	movs	r1, #2
 8000e7a:	4808      	ldr	r0, [pc, #32]	; (8000e9c <HAL_CAN_RxFifo1MsgPendingCallback+0xb4>)
 8000e7c:	f003 f846 	bl	8003f0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2104      	movs	r1, #4
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <HAL_CAN_RxFifo1MsgPendingCallback+0xb4>)
 8000e86:	f003 f841 	bl	8003f0c <HAL_GPIO_WritePin>
	}
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000018 	.word	0x20000018
 8000e98:	20000280 	.word	0x20000280
 8000e9c:	40020400 	.word	0x40020400
 8000ea0:	200000ac 	.word	0x200000ac
 8000ea4:	200002a0 	.word	0x200002a0
 8000ea8:	20000010 	.word	0x20000010
 8000eac:	2000029c 	.word	0x2000029c
 8000eb0:	20000268 	.word	0x20000268

08000eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eba:	f000 fe69 	bl	8001b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ebe:	f000 f895 	bl	8000fec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec2:	f000 fabb 	bl	800143c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec6:	f000 fa99 	bl	80013fc <MX_DMA_Init>
  MX_ADC1_Init();
 8000eca:	f000 f8f9 	bl	80010c0 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000ece:	f000 f949 	bl	8001164 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000ed2:	f000 f99d 	bl	8001210 <MX_CAN2_Init>
  MX_TIM2_Init();
 8000ed6:	f000 f9f1 	bl	80012bc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000eda:	f000 fa65 	bl	80013a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000ede:	4837      	ldr	r0, [pc, #220]	; (8000fbc <main+0x108>)
 8000ee0:	f001 fe00 	bl	8002ae4 <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 8000ee4:	4836      	ldr	r0, [pc, #216]	; (8000fc0 <main+0x10c>)
 8000ee6:	f001 fdfd 	bl	8002ae4 <HAL_CAN_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000eea:	2100      	movs	r1, #0
 8000eec:	4835      	ldr	r0, [pc, #212]	; (8000fc4 <main+0x110>)
 8000eee:	f003 fd67 	bl	80049c0 <HAL_TIM_PWM_Start>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000ef2:	2102      	movs	r1, #2
 8000ef4:	4831      	ldr	r0, [pc, #196]	; (8000fbc <main+0x108>)
 8000ef6:	f002 f826 	bl	8002f46 <HAL_CAN_ActivateNotification>

  Tester_TxHeader.DLC = 8;
 8000efa:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <main+0x114>)
 8000efc:	2208      	movs	r2, #8
 8000efe:	611a      	str	r2, [r3, #16]
  Tester_TxHeader.IDE = CAN_ID_STD;
 8000f00:	4b31      	ldr	r3, [pc, #196]	; (8000fc8 <main+0x114>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  Tester_TxHeader.RTR = CAN_RTR_DATA;
 8000f06:	4b30      	ldr	r3, [pc, #192]	; (8000fc8 <main+0x114>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
  Tester_TxHeader.StdId = 0x712;
 8000f0c:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <main+0x114>)
 8000f0e:	f240 7212 	movw	r2, #1810	; 0x712
 8000f12:	601a      	str	r2, [r3, #0]

  Tester_TxData[0] = 0x01;
 8000f14:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <main+0x118>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
  Tester_TxData[1] = 0x22;
 8000f1a:	4b2c      	ldr	r3, [pc, #176]	; (8000fcc <main+0x118>)
 8000f1c:	2222      	movs	r2, #34	; 0x22
 8000f1e:	705a      	strb	r2, [r3, #1]

  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000f20:	2110      	movs	r1, #16
 8000f22:	4827      	ldr	r0, [pc, #156]	; (8000fc0 <main+0x10c>)
 8000f24:	f002 f80f 	bl	8002f46 <HAL_CAN_ActivateNotification>
  ECU_TxHeader.DLC = 8;
 8000f28:	4b29      	ldr	r3, [pc, #164]	; (8000fd0 <main+0x11c>)
 8000f2a:	2208      	movs	r2, #8
 8000f2c:	611a      	str	r2, [r3, #16]
  ECU_TxHeader.IDE = CAN_ID_STD;
 8000f2e:	4b28      	ldr	r3, [pc, #160]	; (8000fd0 <main+0x11c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  ECU_TxHeader.RTR = CAN_RTR_DATA;
 8000f34:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <main+0x11c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  ECU_TxHeader.StdId = 0x7A2;
 8000f3a:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <main+0x11c>)
 8000f3c:	f240 72a2 	movw	r2, #1954	; 0x7a2
 8000f40:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	time_request = clock();
 8000f42:	f004 fedd 	bl	8005d00 <clock>
 8000f46:	6078      	str	r0, [r7, #4]
	  	printf(" [REQUEST] Tester has just sent a request to ECU !");
 8000f48:	4822      	ldr	r0, [pc, #136]	; (8000fd4 <main+0x120>)
 8000f4a:	f004 ff1f 	bl	8005d8c <iprintf>
		printf("\r\n");
 8000f4e:	4822      	ldr	r0, [pc, #136]	; (8000fd8 <main+0x124>)
 8000f50:	f004 ffa2 	bl	8005e98 <puts>
		HAL_CAN_AddTxMessage(&hcan1, &Tester_TxHeader, Tester_TxData, &Tester_TxMailbox);
 8000f54:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <main+0x128>)
 8000f56:	4a1d      	ldr	r2, [pc, #116]	; (8000fcc <main+0x118>)
 8000f58:	491b      	ldr	r1, [pc, #108]	; (8000fc8 <main+0x114>)
 8000f5a:	4818      	ldr	r0, [pc, #96]	; (8000fbc <main+0x108>)
 8000f5c:	f001 fe06 	bl	8002b6c <HAL_CAN_AddTxMessage>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2101      	movs	r1, #1
 8000f64:	481e      	ldr	r0, [pc, #120]	; (8000fe0 <main+0x12c>)
 8000f66:	f002 ffd1 	bl	8003f0c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000f6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f6e:	f000 fe81 	bl	8001c74 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2101      	movs	r1, #1
 8000f76:	481a      	ldr	r0, [pc, #104]	; (8000fe0 <main+0x12c>)
 8000f78:	f002 ffc8 	bl	8003f0c <HAL_GPIO_WritePin>
		HAL_Delay(500 - (double)(clock() - time_request)/1000);
 8000f7c:	f004 fec0 	bl	8005d00 <clock>
 8000f80:	4602      	mov	r2, r0
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fab4 	bl	80004f4 <__aeabi_ui2d>
 8000f8c:	f04f 0200 	mov.w	r2, #0
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <main+0x130>)
 8000f92:	f7ff fc53 	bl	800083c <__aeabi_ddiv>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	f04f 0000 	mov.w	r0, #0
 8000f9e:	4912      	ldr	r1, [pc, #72]	; (8000fe8 <main+0x134>)
 8000fa0:	f7ff f96a 	bl	8000278 <__aeabi_dsub>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4619      	mov	r1, r3
 8000fac:	f7ff fd2e 	bl	8000a0c <__aeabi_d2uiz>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fe5e 	bl	8001c74 <HAL_Delay>
	  	time_request = clock();
 8000fb8:	e7c3      	b.n	8000f42 <main+0x8e>
 8000fba:	bf00      	nop
 8000fbc:	20000154 	.word	0x20000154
 8000fc0:	2000017c 	.word	0x2000017c
 8000fc4:	200001a4 	.word	0x200001a4
 8000fc8:	20000230 	.word	0x20000230
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	20000268 	.word	0x20000268
 8000fd4:	08006e14 	.word	0x08006e14
 8000fd8:	08006e10 	.word	0x08006e10
 8000fdc:	20000264 	.word	0x20000264
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	408f4000 	.word	0x408f4000
 8000fe8:	407f4000 	.word	0x407f4000

08000fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b094      	sub	sp, #80	; 0x50
 8000ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	f107 0320 	add.w	r3, r7, #32
 8000ff6:	2230      	movs	r2, #48	; 0x30
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f004 febe 	bl	8005d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	4b28      	ldr	r3, [pc, #160]	; (80010b8 <SystemClock_Config+0xcc>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	4a27      	ldr	r2, [pc, #156]	; (80010b8 <SystemClock_Config+0xcc>)
 800101a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101e:	6413      	str	r3, [r2, #64]	; 0x40
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <SystemClock_Config+0xcc>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800102c:	2300      	movs	r3, #0
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <SystemClock_Config+0xd0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a21      	ldr	r2, [pc, #132]	; (80010bc <SystemClock_Config+0xd0>)
 8001036:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <SystemClock_Config+0xd0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001048:	2301      	movs	r3, #1
 800104a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800104c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001052:	2302      	movs	r3, #2
 8001054:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001056:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800105a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800105c:	2304      	movs	r3, #4
 800105e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001060:	23a8      	movs	r3, #168	; 0xa8
 8001062:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001064:	2302      	movs	r3, #2
 8001066:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001068:	2304      	movs	r3, #4
 800106a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106c:	f107 0320 	add.w	r3, r7, #32
 8001070:	4618      	mov	r0, r3
 8001072:	f002 ff65 	bl	8003f40 <HAL_RCC_OscConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800107c:	f000 fa40 	bl	8001500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001080:	230f      	movs	r3, #15
 8001082:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001084:	2302      	movs	r3, #2
 8001086:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800108c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001090:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001096:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2105      	movs	r1, #5
 800109e:	4618      	mov	r0, r3
 80010a0:	f003 f9c6 	bl	8004430 <HAL_RCC_ClockConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010aa:	f000 fa29 	bl	8001500 <Error_Handler>
  }
}
 80010ae:	bf00      	nop
 80010b0:	3750      	adds	r7, #80	; 0x50
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40007000 	.word	0x40007000

080010c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010d2:	4b21      	ldr	r3, [pc, #132]	; (8001158 <MX_ADC1_Init+0x98>)
 80010d4:	4a21      	ldr	r2, [pc, #132]	; (800115c <MX_ADC1_Init+0x9c>)
 80010d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <MX_ADC1_Init+0x98>)
 80010da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <MX_ADC1_Init+0x98>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010e6:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <MX_ADC1_Init+0x98>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <MX_ADC1_Init+0x98>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f2:	4b19      	ldr	r3, [pc, #100]	; (8001158 <MX_ADC1_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010fa:	4b17      	ldr	r3, [pc, #92]	; (8001158 <MX_ADC1_Init+0x98>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <MX_ADC1_Init+0x98>)
 8001102:	4a17      	ldr	r2, [pc, #92]	; (8001160 <MX_ADC1_Init+0xa0>)
 8001104:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <MX_ADC1_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <MX_ADC1_Init+0x98>)
 800110e:	2201      	movs	r2, #1
 8001110:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_ADC1_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <MX_ADC1_Init+0x98>)
 800111c:	2201      	movs	r2, #1
 800111e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001120:	480d      	ldr	r0, [pc, #52]	; (8001158 <MX_ADC1_Init+0x98>)
 8001122:	f000 fdcb 	bl	8001cbc <HAL_ADC_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800112c:	f000 f9e8 	bl	8001500 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001130:	2300      	movs	r3, #0
 8001132:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001134:	2301      	movs	r3, #1
 8001136:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001138:	2306      	movs	r3, #6
 800113a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113c:	463b      	mov	r3, r7
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_ADC1_Init+0x98>)
 8001142:	f001 f8cb 	bl	80022dc <HAL_ADC_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800114c:	f000 f9d8 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200000ac 	.word	0x200000ac
 800115c:	40012000 	.word	0x40012000
 8001160:	0f000001 	.word	0x0f000001

08001164 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800116a:	4b27      	ldr	r3, [pc, #156]	; (8001208 <MX_CAN1_Init+0xa4>)
 800116c:	4a27      	ldr	r2, [pc, #156]	; (800120c <MX_CAN1_Init+0xa8>)
 800116e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8001170:	4b25      	ldr	r3, [pc, #148]	; (8001208 <MX_CAN1_Init+0xa4>)
 8001172:	2204      	movs	r2, #4
 8001174:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001176:	4b24      	ldr	r3, [pc, #144]	; (8001208 <MX_CAN1_Init+0xa4>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <MX_CAN1_Init+0xa4>)
 800117e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001182:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 8001184:	4b20      	ldr	r3, [pc, #128]	; (8001208 <MX_CAN1_Init+0xa4>)
 8001186:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 800118a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800118c:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <MX_CAN1_Init+0xa4>)
 800118e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001192:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001194:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <MX_CAN1_Init+0xa4>)
 8001196:	2200      	movs	r2, #0
 8001198:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800119a:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <MX_CAN1_Init+0xa4>)
 800119c:	2201      	movs	r2, #1
 800119e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80011a0:	4b19      	ldr	r3, [pc, #100]	; (8001208 <MX_CAN1_Init+0xa4>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_CAN1_Init+0xa4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <MX_CAN1_Init+0xa4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <MX_CAN1_Init+0xa4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011b8:	4813      	ldr	r0, [pc, #76]	; (8001208 <MX_CAN1_Init+0xa4>)
 80011ba:	f001 fab7 	bl	800272c <HAL_CAN_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 80011c4:	f000 f99c 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80011c8:	2301      	movs	r3, #1
 80011ca:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18; // which filter bank to use from the assigned ones
 80011cc:	2312      	movs	r3, #18
 80011ce:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x7A2 << 5;
 80011d4:	f24f 4340 	movw	r3, #62528	; 0xf440
 80011d8:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x7A2 << 5;
 80011de:	f24f 4340 	movw	r3, #62528	; 0xf440
 80011e2:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20; // how many filters to assign to the CAN1 (master can)
 80011f0:	2314      	movs	r3, #20
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80011f4:	463b      	mov	r3, r7
 80011f6:	4619      	mov	r1, r3
 80011f8:	4803      	ldr	r0, [pc, #12]	; (8001208 <MX_CAN1_Init+0xa4>)
 80011fa:	f001 fb93 	bl	8002924 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	; 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000154 	.word	0x20000154
 800120c:	40006400 	.word	0x40006400

08001210 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001216:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <MX_CAN2_Init+0xa4>)
 8001218:	4a27      	ldr	r2, [pc, #156]	; (80012b8 <MX_CAN2_Init+0xa8>)
 800121a:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 800121c:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <MX_CAN2_Init+0xa4>)
 800121e:	2204      	movs	r2, #4
 8001220:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001222:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <MX_CAN2_Init+0xa4>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8001228:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <MX_CAN2_Init+0xa4>)
 800122a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800122e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_16TQ;
 8001230:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <MX_CAN2_Init+0xa4>)
 8001232:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8001236:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001238:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <MX_CAN2_Init+0xa4>)
 800123a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800123e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <MX_CAN2_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <MX_CAN2_Init+0xa4>)
 8001248:	2201      	movs	r2, #1
 800124a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <MX_CAN2_Init+0xa4>)
 800124e:	2201      	movs	r2, #1
 8001250:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_CAN2_Init+0xa4>)
 8001254:	2200      	movs	r2, #0
 8001256:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <MX_CAN2_Init+0xa4>)
 800125a:	2200      	movs	r2, #0
 800125c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_CAN2_Init+0xa4>)
 8001260:	2200      	movs	r2, #0
 8001262:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001264:	4813      	ldr	r0, [pc, #76]	; (80012b4 <MX_CAN2_Init+0xa4>)
 8001266:	f001 fa61 	bl	800272c <HAL_CAN_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_CAN2_Init+0x64>
  {
    Error_Handler();
 8001270:	f000 f946 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001274:	2301      	movs	r3, #1
 8001276:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10; // which filter bank to use from the assigned ones
 8001278:	230a      	movs	r3, #10
 800127a:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800127c:	2301      	movs	r3, #1
 800127e:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x712 << 5;
 8001280:	f24e 2340 	movw	r3, #57920	; 0xe240
 8001284:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x712 << 5;
 800128a:	f24e 2340 	movw	r3, #57920	; 0xe240
 800128e:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001298:	2301      	movs	r3, #1
 800129a:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0; // doesn't matter in single can controllers
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 80012a0:	463b      	mov	r3, r7
 80012a2:	4619      	mov	r1, r3
 80012a4:	4803      	ldr	r0, [pc, #12]	; (80012b4 <MX_CAN2_Init+0xa4>)
 80012a6:	f001 fb3d 	bl	8002924 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN2_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	; 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000017c 	.word	0x2000017c
 80012b8:	40006800 	.word	0x40006800

080012bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08e      	sub	sp, #56	; 0x38
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d0:	f107 0320 	add.w	r3, r7, #32
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
 80012e8:	615a      	str	r2, [r3, #20]
 80012ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ec:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <MX_TIM2_Init+0xe8>)
 80012ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012f4:	4b2b      	ldr	r3, [pc, #172]	; (80013a4 <MX_TIM2_Init+0xe8>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fa:	4b2a      	ldr	r3, [pc, #168]	; (80013a4 <MX_TIM2_Init+0xe8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001300:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <MX_TIM2_Init+0xe8>)
 8001302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001306:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001308:	4b26      	ldr	r3, [pc, #152]	; (80013a4 <MX_TIM2_Init+0xe8>)
 800130a:	2200      	movs	r2, #0
 800130c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800130e:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <MX_TIM2_Init+0xe8>)
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001314:	4823      	ldr	r0, [pc, #140]	; (80013a4 <MX_TIM2_Init+0xe8>)
 8001316:	f003 faab 	bl	8004870 <HAL_TIM_Base_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001320:	f000 f8ee 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001328:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800132a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800132e:	4619      	mov	r1, r3
 8001330:	481c      	ldr	r0, [pc, #112]	; (80013a4 <MX_TIM2_Init+0xe8>)
 8001332:	f003 fccf 	bl	8004cd4 <HAL_TIM_ConfigClockSource>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800133c:	f000 f8e0 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001340:	4818      	ldr	r0, [pc, #96]	; (80013a4 <MX_TIM2_Init+0xe8>)
 8001342:	f003 fae4 	bl	800490e <HAL_TIM_PWM_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800134c:	f000 f8d8 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001358:	f107 0320 	add.w	r3, r7, #32
 800135c:	4619      	mov	r1, r3
 800135e:	4811      	ldr	r0, [pc, #68]	; (80013a4 <MX_TIM2_Init+0xe8>)
 8001360:	f004 f890 	bl	8005484 <HAL_TIMEx_MasterConfigSynchronization>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800136a:	f000 f8c9 	bl	8001500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136e:	2360      	movs	r3, #96	; 0x60
 8001370:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2200      	movs	r2, #0
 8001382:	4619      	mov	r1, r3
 8001384:	4807      	ldr	r0, [pc, #28]	; (80013a4 <MX_TIM2_Init+0xe8>)
 8001386:	f003 fbe3 	bl	8004b50 <HAL_TIM_PWM_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001390:	f000 f8b6 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001394:	4803      	ldr	r0, [pc, #12]	; (80013a4 <MX_TIM2_Init+0xe8>)
 8001396:	f000 fa35 	bl	8001804 <HAL_TIM_MspPostInit>

}
 800139a:	bf00      	nop
 800139c:	3738      	adds	r7, #56	; 0x38
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200001a4 	.word	0x200001a4

080013a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <MX_USART1_UART_Init+0x50>)
 80013b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013e0:	f004 f8cc 	bl	800557c <HAL_UART_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013ea:	f000 f889 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200001ec 	.word	0x200001ec
 80013f8:	40011000 	.word	0x40011000

080013fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_DMA_Init+0x3c>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <MX_DMA_Init+0x3c>)
 800140c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_DMA_Init+0x3c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	2038      	movs	r0, #56	; 0x38
 8001424:	f002 f8b5 	bl	8003592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001428:	2038      	movs	r0, #56	; 0x38
 800142a:	f002 f8ce 	bl	80035ca <HAL_NVIC_EnableIRQ>

}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800

0800143c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <MX_GPIO_Init+0x98>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <MX_GPIO_Init+0x98>)
 800145c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_GPIO_Init+0x98>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <MX_GPIO_Init+0x98>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <MX_GPIO_Init+0x98>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <MX_GPIO_Init+0x98>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_GPIO_Init+0x98>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a10      	ldr	r2, [pc, #64]	; (80014d4 <MX_GPIO_Init+0x98>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_GPIO_Init+0x98>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2107      	movs	r1, #7
 80014aa:	480b      	ldr	r0, [pc, #44]	; (80014d8 <MX_GPIO_Init+0x9c>)
 80014ac:	f002 fd2e 	bl	8003f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80014b0:	2307      	movs	r3, #7
 80014b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	4619      	mov	r1, r3
 80014c6:	4804      	ldr	r0, [pc, #16]	; (80014d8 <MX_GPIO_Init+0x9c>)
 80014c8:	f002 fb84 	bl	8003bd4 <HAL_GPIO_Init>

}
 80014cc:	bf00      	nop
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020400 	.word	0x40020400

080014dc <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART */
  HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 80014e4:	1d39      	adds	r1, r7, #4
 80014e6:	2364      	movs	r3, #100	; 0x64
 80014e8:	2201      	movs	r2, #1
 80014ea:	4804      	ldr	r0, [pc, #16]	; (80014fc <__io_putchar+0x20>)
 80014ec:	f004 f893 	bl	8005616 <HAL_UART_Transmit>
  return ch;
 80014f0:	687b      	ldr	r3, [r7, #4]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200001ec 	.word	0x200001ec

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001508:	e7fe      	b.n	8001508 <Error_Handler+0x8>
	...

0800150c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <HAL_MspInit+0x58>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <HAL_MspInit+0x58>)
 800151c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001520:	6453      	str	r3, [r2, #68]	; 0x44
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <HAL_MspInit+0x58>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_MspInit+0x58>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <HAL_MspInit+0x58>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_MspInit+0x58>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	2005      	movs	r0, #5
 8001550:	f002 f81f 	bl	8003592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001554:	2005      	movs	r0, #5
 8001556:	f002 f838 	bl	80035ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800

08001568 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a32      	ldr	r2, [pc, #200]	; (8001650 <HAL_ADC_MspInit+0xe8>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d15e      	bne.n	8001648 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	4b31      	ldr	r3, [pc, #196]	; (8001654 <HAL_ADC_MspInit+0xec>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4a30      	ldr	r2, [pc, #192]	; (8001654 <HAL_ADC_MspInit+0xec>)
 8001594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001598:	6453      	str	r3, [r2, #68]	; 0x44
 800159a:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <HAL_ADC_MspInit+0xec>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <HAL_ADC_MspInit+0xec>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a29      	ldr	r2, [pc, #164]	; (8001654 <HAL_ADC_MspInit+0xec>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b27      	ldr	r3, [pc, #156]	; (8001654 <HAL_ADC_MspInit+0xec>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015c2:	2301      	movs	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c6:	2303      	movs	r3, #3
 80015c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	4820      	ldr	r0, [pc, #128]	; (8001658 <HAL_ADC_MspInit+0xf0>)
 80015d6:	f002 fafd 	bl	8003bd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <HAL_ADC_MspInit+0xf4>)
 80015dc:	4a20      	ldr	r2, [pc, #128]	; (8001660 <HAL_ADC_MspInit+0xf8>)
 80015de:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015e0:	4b1e      	ldr	r3, [pc, #120]	; (800165c <HAL_ADC_MspInit+0xf4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015e6:	4b1d      	ldr	r3, [pc, #116]	; (800165c <HAL_ADC_MspInit+0xf4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <HAL_ADC_MspInit+0xf4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <HAL_ADC_MspInit+0xf4>)
 80015f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015f8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_ADC_MspInit+0xf4>)
 80015fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001600:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <HAL_ADC_MspInit+0xf4>)
 8001604:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001608:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <HAL_ADC_MspInit+0xf4>)
 800160c:	2200      	movs	r2, #0
 800160e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_ADC_MspInit+0xf4>)
 8001612:	2200      	movs	r2, #0
 8001614:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_ADC_MspInit+0xf4>)
 8001618:	2200      	movs	r2, #0
 800161a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800161c:	480f      	ldr	r0, [pc, #60]	; (800165c <HAL_ADC_MspInit+0xf4>)
 800161e:	f001 ffef 	bl	8003600 <HAL_DMA_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001628:	f7ff ff6a 	bl	8001500 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <HAL_ADC_MspInit+0xf4>)
 8001630:	639a      	str	r2, [r3, #56]	; 0x38
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <HAL_ADC_MspInit+0xf4>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001638:	2200      	movs	r2, #0
 800163a:	2100      	movs	r1, #0
 800163c:	2012      	movs	r0, #18
 800163e:	f001 ffa8 	bl	8003592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001642:	2012      	movs	r0, #18
 8001644:	f001 ffc1 	bl	80035ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001648:	bf00      	nop
 800164a:	3728      	adds	r7, #40	; 0x28
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40012000 	.word	0x40012000
 8001654:	40023800 	.word	0x40023800
 8001658:	40020000 	.word	0x40020000
 800165c:	200000f4 	.word	0x200000f4
 8001660:	40026410 	.word	0x40026410

08001664 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08c      	sub	sp, #48	; 0x30
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a4a      	ldr	r2, [pc, #296]	; (80017ac <HAL_CAN_MspInit+0x148>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d13e      	bne.n	8001704 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001686:	4b4a      	ldr	r3, [pc, #296]	; (80017b0 <HAL_CAN_MspInit+0x14c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	3301      	adds	r3, #1
 800168c:	4a48      	ldr	r2, [pc, #288]	; (80017b0 <HAL_CAN_MspInit+0x14c>)
 800168e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001690:	4b47      	ldr	r3, [pc, #284]	; (80017b0 <HAL_CAN_MspInit+0x14c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d10d      	bne.n	80016b4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	61bb      	str	r3, [r7, #24]
 800169c:	4b45      	ldr	r3, [pc, #276]	; (80017b4 <HAL_CAN_MspInit+0x150>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	4a44      	ldr	r2, [pc, #272]	; (80017b4 <HAL_CAN_MspInit+0x150>)
 80016a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016a6:	6413      	str	r3, [r2, #64]	; 0x40
 80016a8:	4b42      	ldr	r3, [pc, #264]	; (80017b4 <HAL_CAN_MspInit+0x150>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b0:	61bb      	str	r3, [r7, #24]
 80016b2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	4b3e      	ldr	r3, [pc, #248]	; (80017b4 <HAL_CAN_MspInit+0x150>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	4a3d      	ldr	r2, [pc, #244]	; (80017b4 <HAL_CAN_MspInit+0x150>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6313      	str	r3, [r2, #48]	; 0x30
 80016c4:	4b3b      	ldr	r3, [pc, #236]	; (80017b4 <HAL_CAN_MspInit+0x150>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016da:	2301      	movs	r3, #1
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016de:	2303      	movs	r3, #3
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016e2:	2309      	movs	r3, #9
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e6:	f107 031c 	add.w	r3, r7, #28
 80016ea:	4619      	mov	r1, r3
 80016ec:	4832      	ldr	r0, [pc, #200]	; (80017b8 <HAL_CAN_MspInit+0x154>)
 80016ee:	f002 fa71 	bl	8003bd4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2100      	movs	r1, #0
 80016f6:	2014      	movs	r0, #20
 80016f8:	f001 ff4b 	bl	8003592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80016fc:	2014      	movs	r0, #20
 80016fe:	f001 ff64 	bl	80035ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001702:	e04f      	b.n	80017a4 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a2c      	ldr	r2, [pc, #176]	; (80017bc <HAL_CAN_MspInit+0x158>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d14a      	bne.n	80017a4 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <HAL_CAN_MspInit+0x150>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	4a27      	ldr	r2, [pc, #156]	; (80017b4 <HAL_CAN_MspInit+0x150>)
 8001718:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800171c:	6413      	str	r3, [r2, #64]	; 0x40
 800171e:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <HAL_CAN_MspInit+0x150>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800172a:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <HAL_CAN_MspInit+0x14c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	4a1f      	ldr	r2, [pc, #124]	; (80017b0 <HAL_CAN_MspInit+0x14c>)
 8001732:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001734:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <HAL_CAN_MspInit+0x14c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d10d      	bne.n	8001758 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <HAL_CAN_MspInit+0x150>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	4a1b      	ldr	r2, [pc, #108]	; (80017b4 <HAL_CAN_MspInit+0x150>)
 8001746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800174a:	6413      	str	r3, [r2, #64]	; 0x40
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <HAL_CAN_MspInit+0x150>)
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_CAN_MspInit+0x150>)
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <HAL_CAN_MspInit+0x150>)
 8001762:	f043 0302 	orr.w	r3, r3, #2
 8001766:	6313      	str	r3, [r2, #48]	; 0x30
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_CAN_MspInit+0x150>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001774:	2360      	movs	r3, #96	; 0x60
 8001776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800177c:	2301      	movs	r3, #1
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001784:	2309      	movs	r3, #9
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	4619      	mov	r1, r3
 800178e:	480c      	ldr	r0, [pc, #48]	; (80017c0 <HAL_CAN_MspInit+0x15c>)
 8001790:	f002 fa20 	bl	8003bd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001794:	2200      	movs	r2, #0
 8001796:	2100      	movs	r1, #0
 8001798:	2041      	movs	r0, #65	; 0x41
 800179a:	f001 fefa 	bl	8003592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800179e:	2041      	movs	r0, #65	; 0x41
 80017a0:	f001 ff13 	bl	80035ca <HAL_NVIC_EnableIRQ>
}
 80017a4:	bf00      	nop
 80017a6:	3730      	adds	r7, #48	; 0x30
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40006400 	.word	0x40006400
 80017b0:	200002a4 	.word	0x200002a4
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40006800 	.word	0x40006800
 80017c0:	40020400 	.word	0x40020400

080017c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d4:	d10d      	bne.n	80017f2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_TIM_Base_MspInit+0x3c>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	4a08      	ldr	r2, [pc, #32]	; (8001800 <HAL_TIM_Base_MspInit+0x3c>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6413      	str	r3, [r2, #64]	; 0x40
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_TIM_Base_MspInit+0x3c>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800

08001804 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001824:	d11d      	bne.n	8001862 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_TIM_MspPostInit+0x68>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a0f      	ldr	r2, [pc, #60]	; (800186c <HAL_TIM_MspPostInit+0x68>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_TIM_MspPostInit+0x68>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001842:	2320      	movs	r3, #32
 8001844:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001852:	2301      	movs	r3, #1
 8001854:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	4619      	mov	r1, r3
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <HAL_TIM_MspPostInit+0x6c>)
 800185e:	f002 f9b9 	bl	8003bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001862:	bf00      	nop
 8001864:	3720      	adds	r7, #32
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	40020000 	.word	0x40020000

08001874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	; 0x28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a19      	ldr	r2, [pc, #100]	; (80018f8 <HAL_UART_MspInit+0x84>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d12c      	bne.n	80018f0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <HAL_UART_MspInit+0x88>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	4a17      	ldr	r2, [pc, #92]	; (80018fc <HAL_UART_MspInit+0x88>)
 80018a0:	f043 0310 	orr.w	r3, r3, #16
 80018a4:	6453      	str	r3, [r2, #68]	; 0x44
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <HAL_UART_MspInit+0x88>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	f003 0310 	and.w	r3, r3, #16
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <HAL_UART_MspInit+0x88>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a10      	ldr	r2, [pc, #64]	; (80018fc <HAL_UART_MspInit+0x88>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <HAL_UART_MspInit+0x88>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018d8:	2301      	movs	r3, #1
 80018da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018dc:	2303      	movs	r3, #3
 80018de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018e0:	2307      	movs	r3, #7
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4619      	mov	r1, r3
 80018ea:	4805      	ldr	r0, [pc, #20]	; (8001900 <HAL_UART_MspInit+0x8c>)
 80018ec:	f002 f972 	bl	8003bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018f0:	bf00      	nop
 80018f2:	3728      	adds	r7, #40	; 0x28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40011000 	.word	0x40011000
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020000 	.word	0x40020000

08001904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <NMI_Handler+0x4>

0800190a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190e:	e7fe      	b.n	800190e <HardFault_Handler+0x4>

08001910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <MemManage_Handler+0x4>

08001916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <BusFault_Handler+0x4>

0800191c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <UsageFault_Handler+0x4>

08001922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001950:	f000 f970 	bl	8001c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}

08001958 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <ADC_IRQHandler+0x10>)
 800196e:	f000 fb79 	bl	8002064 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200000ac 	.word	0x200000ac

0800197c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <CAN1_RX0_IRQHandler+0x10>)
 8001982:	f001 fb06 	bl	8002f92 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000154 	.word	0x20000154

08001990 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <DMA2_Stream0_IRQHandler+0x10>)
 8001996:	f001 fee1 	bl	800375c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200000f4 	.word	0x200000f4

080019a4 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <CAN2_RX1_IRQHandler+0x10>)
 80019aa:	f001 faf2 	bl	8002f92 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2000017c 	.word	0x2000017c

080019b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	e00a      	b.n	80019e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019ca:	f3af 8000 	nop.w
 80019ce:	4601      	mov	r1, r0
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	60ba      	str	r2, [r7, #8]
 80019d6:	b2ca      	uxtb	r2, r1
 80019d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	3301      	adds	r3, #1
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	dbf0      	blt.n	80019ca <_read+0x12>
	}

return len;
 80019e8:	687b      	ldr	r3, [r7, #4]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	e009      	b.n	8001a18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	60ba      	str	r2, [r7, #8]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fd65 	bl	80014dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3301      	adds	r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	dbf1      	blt.n	8001a04 <_write+0x12>
	}
	return len;
 8001a20:	687b      	ldr	r3, [r7, #4]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <_close>:

int _close(int file)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
	return -1;
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a52:	605a      	str	r2, [r3, #4]
	return 0;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <_isatty>:

int _isatty(int file)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
	return 1;
 8001a6a:	2301      	movs	r3, #1
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
	return 0;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <_times>:
	errno = ENOENT;
	return -1;
}

int _times(struct tms *buf)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
	return -1;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab4:	4a14      	ldr	r2, [pc, #80]	; (8001b08 <_sbrk+0x5c>)
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <_sbrk+0x60>)
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac0:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <_sbrk+0x64>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <_sbrk+0x64>)
 8001aca:	4a12      	ldr	r2, [pc, #72]	; (8001b14 <_sbrk+0x68>)
 8001acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d207      	bcs.n	8001aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001adc:	f004 f924 	bl	8005d28 <__errno>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aea:	e009      	b.n	8001b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <_sbrk+0x64>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	4a05      	ldr	r2, [pc, #20]	; (8001b10 <_sbrk+0x64>)
 8001afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001afe:	68fb      	ldr	r3, [r7, #12]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20020000 	.word	0x20020000
 8001b0c:	00000400 	.word	0x00000400
 8001b10:	200002a8 	.word	0x200002a8
 8001b14:	200002c0 	.word	0x200002c0

08001b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <SystemInit+0x20>)
 8001b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b22:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <SystemInit+0x20>)
 8001b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b40:	480d      	ldr	r0, [pc, #52]	; (8001b78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b42:	490e      	ldr	r1, [pc, #56]	; (8001b7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b44:	4a0e      	ldr	r2, [pc, #56]	; (8001b80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b48:	e002      	b.n	8001b50 <LoopCopyDataInit>

08001b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4e:	3304      	adds	r3, #4

08001b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b54:	d3f9      	bcc.n	8001b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b56:	4a0b      	ldr	r2, [pc, #44]	; (8001b84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b58:	4c0b      	ldr	r4, [pc, #44]	; (8001b88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b5c:	e001      	b.n	8001b62 <LoopFillZerobss>

08001b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b60:	3204      	adds	r2, #4

08001b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b64:	d3fb      	bcc.n	8001b5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b66:	f7ff ffd7 	bl	8001b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b6a:	f004 f8e3 	bl	8005d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b6e:	f7ff f9a1 	bl	8000eb4 <main>
  bx  lr    
 8001b72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b7c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001b80:	08006f10 	.word	0x08006f10
  ldr r2, =_sbss
 8001b84:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001b88:	200002c0 	.word	0x200002c0

08001b8c <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b8c:	e7fe      	b.n	8001b8c <CAN1_RX1_IRQHandler>
	...

08001b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0d      	ldr	r2, [pc, #52]	; (8001bd0 <HAL_Init+0x40>)
 8001b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_Init+0x40>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <HAL_Init+0x40>)
 8001ba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001baa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <HAL_Init+0x40>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a07      	ldr	r2, [pc, #28]	; (8001bd0 <HAL_Init+0x40>)
 8001bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb8:	2003      	movs	r0, #3
 8001bba:	f001 fcdf 	bl	800357c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bbe:	200f      	movs	r0, #15
 8001bc0:	f000 f808 	bl	8001bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc4:	f7ff fca2 	bl	800150c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023c00 	.word	0x40023c00

08001bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_InitTick+0x54>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_InitTick+0x58>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f001 fcf7 	bl	80035e6 <HAL_SYSTICK_Config>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e00e      	b.n	8001c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b0f      	cmp	r3, #15
 8001c06:	d80a      	bhi.n	8001c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c10:	f001 fcbf 	bl	8003592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c14:	4a06      	ldr	r2, [pc, #24]	; (8001c30 <HAL_InitTick+0x5c>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e000      	b.n	8001c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000020 	.word	0x20000020
 8001c2c:	20000028 	.word	0x20000028
 8001c30:	20000024 	.word	0x20000024

08001c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_IncTick+0x20>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_IncTick+0x24>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <HAL_IncTick+0x24>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000028 	.word	0x20000028
 8001c58:	200002ac 	.word	0x200002ac

08001c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <HAL_GetTick+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	200002ac 	.word	0x200002ac

08001c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	f7ff ffee 	bl	8001c5c <HAL_GetTick>
 8001c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8c:	d005      	beq.n	8001c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_Delay+0x44>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c9a:	bf00      	nop
 8001c9c:	f7ff ffde 	bl	8001c5c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d8f7      	bhi.n	8001c9c <HAL_Delay+0x28>
  {
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000028 	.word	0x20000028

08001cbc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e033      	b.n	8001d3a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d109      	bne.n	8001cee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff fc44 	bl	8001568 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d118      	bne.n	8001d2c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d02:	f023 0302 	bic.w	r3, r3, #2
 8001d06:	f043 0202 	orr.w	r2, r3, #2
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fc06 	bl	8002520 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f023 0303 	bic.w	r3, r3, #3
 8001d22:	f043 0201 	orr.w	r2, r3, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40
 8001d2a:	e001      	b.n	8001d30 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d101      	bne.n	8001d5e <HAL_ADC_Start+0x1a>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e0b2      	b.n	8001ec4 <HAL_ADC_Start+0x180>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d018      	beq.n	8001da6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d84:	4b52      	ldr	r3, [pc, #328]	; (8001ed0 <HAL_ADC_Start+0x18c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a52      	ldr	r2, [pc, #328]	; (8001ed4 <HAL_ADC_Start+0x190>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	0c9a      	lsrs	r2, r3, #18
 8001d90:	4613      	mov	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d98:	e002      	b.n	8001da0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f9      	bne.n	8001d9a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d17a      	bne.n	8001eaa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001dbc:	f023 0301 	bic.w	r3, r3, #1
 8001dc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d007      	beq.n	8001de6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dde:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001df2:	d106      	bne.n	8001e02 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df8:	f023 0206 	bic.w	r2, r3, #6
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	645a      	str	r2, [r3, #68]	; 0x44
 8001e00:	e002      	b.n	8001e08 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e10:	4b31      	ldr	r3, [pc, #196]	; (8001ed8 <HAL_ADC_Start+0x194>)
 8001e12:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e1c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d12a      	bne.n	8001e80 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a2b      	ldr	r2, [pc, #172]	; (8001edc <HAL_ADC_Start+0x198>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d015      	beq.n	8001e60 <HAL_ADC_Start+0x11c>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a29      	ldr	r2, [pc, #164]	; (8001ee0 <HAL_ADC_Start+0x19c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d105      	bne.n	8001e4a <HAL_ADC_Start+0x106>
 8001e3e:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <HAL_ADC_Start+0x194>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00a      	beq.n	8001e60 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a25      	ldr	r2, [pc, #148]	; (8001ee4 <HAL_ADC_Start+0x1a0>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d136      	bne.n	8001ec2 <HAL_ADC_Start+0x17e>
 8001e54:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <HAL_ADC_Start+0x194>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0310 	and.w	r3, r3, #16
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d130      	bne.n	8001ec2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d129      	bne.n	8001ec2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	e020      	b.n	8001ec2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a15      	ldr	r2, [pc, #84]	; (8001edc <HAL_ADC_Start+0x198>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d11b      	bne.n	8001ec2 <HAL_ADC_Start+0x17e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d114      	bne.n	8001ec2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	e00b      	b.n	8001ec2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f043 0210 	orr.w	r2, r3, #16
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f043 0201 	orr.w	r2, r3, #1
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	20000020 	.word	0x20000020
 8001ed4:	431bde83 	.word	0x431bde83
 8001ed8:	40012300 	.word	0x40012300
 8001edc:	40012000 	.word	0x40012000
 8001ee0:	40012100 	.word	0x40012100
 8001ee4:	40012200 	.word	0x40012200

08001ee8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_Stop+0x16>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e021      	b.n	8001f42 <HAL_ADC_Stop+0x5a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0201 	bic.w	r2, r2, #1
 8001f14:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d109      	bne.n	8001f38 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f2c:	f023 0301 	bic.w	r3, r3, #1
 8001f30:	f043 0201 	orr.w	r2, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b084      	sub	sp, #16
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f6a:	d113      	bne.n	8001f94 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f7a:	d10b      	bne.n	8001f94 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	f043 0220 	orr.w	r2, r3, #32
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e063      	b.n	800205c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001f94:	f7ff fe62 	bl	8001c5c <HAL_GetTick>
 8001f98:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f9a:	e021      	b.n	8001fe0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa2:	d01d      	beq.n	8001fe0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d007      	beq.n	8001fba <HAL_ADC_PollForConversion+0x6c>
 8001faa:	f7ff fe57 	bl	8001c5c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d212      	bcs.n	8001fe0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d00b      	beq.n	8001fe0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	f043 0204 	orr.w	r2, r3, #4
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e03d      	b.n	800205c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d1d6      	bne.n	8001f9c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f06f 0212 	mvn.w	r2, #18
 8001ff6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d123      	bne.n	800205a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002016:	2b00      	cmp	r3, #0
 8002018:	d11f      	bne.n	800205a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002020:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002024:	2b00      	cmp	r3, #0
 8002026:	d006      	beq.n	8002036 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002032:	2b00      	cmp	r3, #0
 8002034:	d111      	bne.n	800205a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d105      	bne.n	800205a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f043 0201 	orr.w	r2, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	2300      	movs	r3, #0
 8002072:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f003 0320 	and.w	r3, r3, #32
 8002092:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d049      	beq.n	800212e <HAL_ADC_IRQHandler+0xca>
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d046      	beq.n	800212e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d105      	bne.n	80020b8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d12b      	bne.n	800211e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d127      	bne.n	800211e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d006      	beq.n	80020ea <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d119      	bne.n	800211e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0220 	bic.w	r2, r2, #32
 80020f8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d105      	bne.n	800211e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f043 0201 	orr.w	r2, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f8bd 	bl	800229e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0212 	mvn.w	r2, #18
 800212c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d057      	beq.n	80021f4 <HAL_ADC_IRQHandler+0x190>
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d054      	beq.n	80021f4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d139      	bne.n	80021e4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002176:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800217a:	2b00      	cmp	r3, #0
 800217c:	d006      	beq.n	800218c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002188:	2b00      	cmp	r3, #0
 800218a:	d12b      	bne.n	80021e4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002196:	2b00      	cmp	r3, #0
 8002198:	d124      	bne.n	80021e4 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d11d      	bne.n	80021e4 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d119      	bne.n	80021e4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d105      	bne.n	80021e4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	f043 0201 	orr.w	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 fa97 	bl	8002718 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f06f 020c 	mvn.w	r2, #12
 80021f2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002202:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d017      	beq.n	800223a <HAL_ADC_IRQHandler+0x1d6>
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d014      	beq.n	800223a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b01      	cmp	r3, #1
 800221c:	d10d      	bne.n	800223a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f841 	bl	80022b2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0201 	mvn.w	r2, #1
 8002238:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002248:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d015      	beq.n	800227c <HAL_ADC_IRQHandler+0x218>
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d012      	beq.n	800227c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	f043 0202 	orr.w	r2, r3, #2
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f06f 0220 	mvn.w	r2, #32
 800226a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f82a 	bl	80022c6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f06f 0220 	mvn.w	r2, #32
 800227a:	601a      	str	r2, [r3, #0]
  }
}
 800227c:	bf00      	nop
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x1c>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e105      	b.n	8002504 <HAL_ADC_ConfigChannel+0x228>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b09      	cmp	r3, #9
 8002306:	d925      	bls.n	8002354 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68d9      	ldr	r1, [r3, #12]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	b29b      	uxth	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	4613      	mov	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4413      	add	r3, r2
 800231c:	3b1e      	subs	r3, #30
 800231e:	2207      	movs	r2, #7
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43da      	mvns	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	400a      	ands	r2, r1
 800232c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68d9      	ldr	r1, [r3, #12]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	b29b      	uxth	r3, r3
 800233e:	4618      	mov	r0, r3
 8002340:	4603      	mov	r3, r0
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4403      	add	r3, r0
 8002346:	3b1e      	subs	r3, #30
 8002348:	409a      	lsls	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	e022      	b.n	800239a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6919      	ldr	r1, [r3, #16]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	4613      	mov	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4413      	add	r3, r2
 8002368:	2207      	movs	r2, #7
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	400a      	ands	r2, r1
 8002376:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6919      	ldr	r1, [r3, #16]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	b29b      	uxth	r3, r3
 8002388:	4618      	mov	r0, r3
 800238a:	4603      	mov	r3, r0
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4403      	add	r3, r0
 8002390:	409a      	lsls	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d824      	bhi.n	80023ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	3b05      	subs	r3, #5
 80023b4:	221f      	movs	r2, #31
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43da      	mvns	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	400a      	ands	r2, r1
 80023c2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	4618      	mov	r0, r3
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	3b05      	subs	r3, #5
 80023de:	fa00 f203 	lsl.w	r2, r0, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	635a      	str	r2, [r3, #52]	; 0x34
 80023ea:	e04c      	b.n	8002486 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b0c      	cmp	r3, #12
 80023f2:	d824      	bhi.n	800243e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	3b23      	subs	r3, #35	; 0x23
 8002406:	221f      	movs	r2, #31
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43da      	mvns	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	400a      	ands	r2, r1
 8002414:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	b29b      	uxth	r3, r3
 8002422:	4618      	mov	r0, r3
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	3b23      	subs	r3, #35	; 0x23
 8002430:	fa00 f203 	lsl.w	r2, r0, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
 800243c:	e023      	b.n	8002486 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	3b41      	subs	r3, #65	; 0x41
 8002450:	221f      	movs	r2, #31
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43da      	mvns	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	400a      	ands	r2, r1
 800245e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	b29b      	uxth	r3, r3
 800246c:	4618      	mov	r0, r3
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	3b41      	subs	r3, #65	; 0x41
 800247a:	fa00 f203 	lsl.w	r2, r0, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002486:	4b22      	ldr	r3, [pc, #136]	; (8002510 <HAL_ADC_ConfigChannel+0x234>)
 8002488:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a21      	ldr	r2, [pc, #132]	; (8002514 <HAL_ADC_ConfigChannel+0x238>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d109      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x1cc>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b12      	cmp	r3, #18
 800249a:	d105      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a19      	ldr	r2, [pc, #100]	; (8002514 <HAL_ADC_ConfigChannel+0x238>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d123      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x21e>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b10      	cmp	r3, #16
 80024b8:	d003      	beq.n	80024c2 <HAL_ADC_ConfigChannel+0x1e6>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2b11      	cmp	r3, #17
 80024c0:	d11b      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b10      	cmp	r3, #16
 80024d4:	d111      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <HAL_ADC_ConfigChannel+0x23c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a10      	ldr	r2, [pc, #64]	; (800251c <HAL_ADC_ConfigChannel+0x240>)
 80024dc:	fba2 2303 	umull	r2, r3, r2, r3
 80024e0:	0c9a      	lsrs	r2, r3, #18
 80024e2:	4613      	mov	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024ec:	e002      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	3b01      	subs	r3, #1
 80024f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f9      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	40012300 	.word	0x40012300
 8002514:	40012000 	.word	0x40012000
 8002518:	20000020 	.word	0x20000020
 800251c:	431bde83 	.word	0x431bde83

08002520 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002528:	4b79      	ldr	r3, [pc, #484]	; (8002710 <ADC_Init+0x1f0>)
 800252a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	431a      	orrs	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002554:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6859      	ldr	r1, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	021a      	lsls	r2, r3, #8
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002578:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6859      	ldr	r1, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800259a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6899      	ldr	r1, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b2:	4a58      	ldr	r2, [pc, #352]	; (8002714 <ADC_Init+0x1f4>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d022      	beq.n	80025fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6899      	ldr	r1, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6899      	ldr	r1, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	e00f      	b.n	800261e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800260c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800261c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0202 	bic.w	r2, r2, #2
 800262c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6899      	ldr	r1, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	7e1b      	ldrb	r3, [r3, #24]
 8002638:	005a      	lsls	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d01b      	beq.n	8002684 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800265a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800266a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6859      	ldr	r1, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	3b01      	subs	r3, #1
 8002678:	035a      	lsls	r2, r3, #13
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	e007      	b.n	8002694 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002692:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	051a      	lsls	r2, r3, #20
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6899      	ldr	r1, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026d6:	025a      	lsls	r2, r3, #9
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6899      	ldr	r1, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	029a      	lsls	r2, r3, #10
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	609a      	str	r2, [r3, #8]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	40012300 	.word	0x40012300
 8002714:	0f000001 	.word	0x0f000001

08002718 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e0ed      	b.n	800291a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d102      	bne.n	8002750 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe ff8a 	bl	8001664 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0201 	orr.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002760:	f7ff fa7c 	bl	8001c5c <HAL_GetTick>
 8002764:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002766:	e012      	b.n	800278e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002768:	f7ff fa78 	bl	8001c5c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b0a      	cmp	r3, #10
 8002774:	d90b      	bls.n	800278e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2205      	movs	r2, #5
 8002786:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e0c5      	b.n	800291a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0e5      	beq.n	8002768 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0202 	bic.w	r2, r2, #2
 80027aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027ac:	f7ff fa56 	bl	8001c5c <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027b2:	e012      	b.n	80027da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027b4:	f7ff fa52 	bl	8001c5c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b0a      	cmp	r3, #10
 80027c0:	d90b      	bls.n	80027da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2205      	movs	r2, #5
 80027d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e09f      	b.n	800291a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1e5      	bne.n	80027b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	7e1b      	ldrb	r3, [r3, #24]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d108      	bne.n	8002802 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	e007      	b.n	8002812 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002810:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	7e5b      	ldrb	r3, [r3, #25]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d108      	bne.n	800282c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	e007      	b.n	800283c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800283a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7e9b      	ldrb	r3, [r3, #26]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d108      	bne.n	8002856 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0220 	orr.w	r2, r2, #32
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	e007      	b.n	8002866 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0220 	bic.w	r2, r2, #32
 8002864:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	7edb      	ldrb	r3, [r3, #27]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d108      	bne.n	8002880 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0210 	bic.w	r2, r2, #16
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	e007      	b.n	8002890 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0210 	orr.w	r2, r2, #16
 800288e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	7f1b      	ldrb	r3, [r3, #28]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d108      	bne.n	80028aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0208 	orr.w	r2, r2, #8
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	e007      	b.n	80028ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0208 	bic.w	r2, r2, #8
 80028b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	7f5b      	ldrb	r3, [r3, #29]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d108      	bne.n	80028d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0204 	orr.w	r2, r2, #4
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	e007      	b.n	80028e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0204 	bic.w	r2, r2, #4
 80028e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	ea42 0103 	orr.w	r1, r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	1e5a      	subs	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3020 	ldrb.w	r3, [r3, #32]
 800293a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800293c:	7cfb      	ldrb	r3, [r7, #19]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d003      	beq.n	800294a <HAL_CAN_ConfigFilter+0x26>
 8002942:	7cfb      	ldrb	r3, [r7, #19]
 8002944:	2b02      	cmp	r3, #2
 8002946:	f040 80be 	bne.w	8002ac6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800294a:	4b65      	ldr	r3, [pc, #404]	; (8002ae0 <HAL_CAN_ConfigFilter+0x1bc>)
 800294c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002954:	f043 0201 	orr.w	r2, r3, #1
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002964:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	021b      	lsls	r3, r3, #8
 800297a:	431a      	orrs	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	2201      	movs	r2, #1
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	43db      	mvns	r3, r3
 800299c:	401a      	ands	r2, r3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d123      	bne.n	80029f4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	401a      	ands	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80029ce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	3248      	adds	r2, #72	; 0x48
 80029d4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029e8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029ea:	6979      	ldr	r1, [r7, #20]
 80029ec:	3348      	adds	r3, #72	; 0x48
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	440b      	add	r3, r1
 80029f2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d122      	bne.n	8002a42 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a1c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	3248      	adds	r2, #72	; 0x48
 8002a22:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a36:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a38:	6979      	ldr	r1, [r7, #20]
 8002a3a:	3348      	adds	r3, #72	; 0x48
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	440b      	add	r3, r1
 8002a40:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d109      	bne.n	8002a5e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	401a      	ands	r2, r3
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002a5c:	e007      	b.n	8002a6e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	401a      	ands	r2, r3
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002a88:	e007      	b.n	8002a9a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d107      	bne.n	8002ab2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ab8:	f023 0201 	bic.w	r2, r3, #1
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e006      	b.n	8002ad4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
  }
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	371c      	adds	r7, #28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	40006400 	.word	0x40006400

08002ae4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d12e      	bne.n	8002b56 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0201 	bic.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b10:	f7ff f8a4 	bl	8001c5c <HAL_GetTick>
 8002b14:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b16:	e012      	b.n	8002b3e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b18:	f7ff f8a0 	bl	8001c5c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b0a      	cmp	r3, #10
 8002b24:	d90b      	bls.n	8002b3e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2205      	movs	r2, #5
 8002b36:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e012      	b.n	8002b64 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1e5      	bne.n	8002b18 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	e006      	b.n	8002b64 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
  }
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b089      	sub	sp, #36	; 0x24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
 8002b78:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b80:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b8a:	7ffb      	ldrb	r3, [r7, #31]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d003      	beq.n	8002b98 <HAL_CAN_AddTxMessage+0x2c>
 8002b90:	7ffb      	ldrb	r3, [r7, #31]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	f040 80b8 	bne.w	8002d08 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10a      	bne.n	8002bb8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d105      	bne.n	8002bb8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 80a0 	beq.w	8002cf8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	0e1b      	lsrs	r3, r3, #24
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d907      	bls.n	8002bd8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e09e      	b.n	8002d16 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002bd8:	2201      	movs	r2, #1
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	409a      	lsls	r2, r3
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10d      	bne.n	8002c06 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002bf4:	68f9      	ldr	r1, [r7, #12]
 8002bf6:	6809      	ldr	r1, [r1, #0]
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	3318      	adds	r3, #24
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	440b      	add	r3, r1
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	e00f      	b.n	8002c26 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c10:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c16:	68f9      	ldr	r1, [r7, #12]
 8002c18:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002c1a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	3318      	adds	r3, #24
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	440b      	add	r3, r1
 8002c24:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6819      	ldr	r1, [r3, #0]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	3318      	adds	r3, #24
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	440b      	add	r3, r1
 8002c36:	3304      	adds	r3, #4
 8002c38:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	7d1b      	ldrb	r3, [r3, #20]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d111      	bne.n	8002c66 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	3318      	adds	r3, #24
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3304      	adds	r3, #4
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	6811      	ldr	r1, [r2, #0]
 8002c56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	3318      	adds	r3, #24
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	440b      	add	r3, r1
 8002c62:	3304      	adds	r3, #4
 8002c64:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3307      	adds	r3, #7
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	061a      	lsls	r2, r3, #24
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3306      	adds	r3, #6
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	041b      	lsls	r3, r3, #16
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3305      	adds	r3, #5
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	4313      	orrs	r3, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	3204      	adds	r2, #4
 8002c86:	7812      	ldrb	r2, [r2, #0]
 8002c88:	4610      	mov	r0, r2
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	6811      	ldr	r1, [r2, #0]
 8002c8e:	ea43 0200 	orr.w	r2, r3, r0
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	440b      	add	r3, r1
 8002c98:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002c9c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3303      	adds	r3, #3
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	061a      	lsls	r2, r3, #24
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3302      	adds	r3, #2
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	041b      	lsls	r3, r3, #16
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	021b      	lsls	r3, r3, #8
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	7812      	ldrb	r2, [r2, #0]
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	6811      	ldr	r1, [r2, #0]
 8002cc4:	ea43 0200 	orr.w	r2, r3, r0
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	440b      	add	r3, r1
 8002cce:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002cd2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	3318      	adds	r3, #24
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	4413      	add	r3, r2
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	6811      	ldr	r1, [r2, #0]
 8002ce6:	f043 0201 	orr.w	r2, r3, #1
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	3318      	adds	r3, #24
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	440b      	add	r3, r1
 8002cf2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e00e      	b.n	8002d16 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e006      	b.n	8002d16 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
  }
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3724      	adds	r7, #36	; 0x24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002d22:	b480      	push	{r7}
 8002d24:	b087      	sub	sp, #28
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d36:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d003      	beq.n	8002d46 <HAL_CAN_GetRxMessage+0x24>
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	f040 80f3 	bne.w	8002f2c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10e      	bne.n	8002d6a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d116      	bne.n	8002d88 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e0e7      	b.n	8002f3a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d107      	bne.n	8002d88 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0d8      	b.n	8002f3a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	331b      	adds	r3, #27
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	4413      	add	r3, r2
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0204 	and.w	r2, r3, #4
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10c      	bne.n	8002dc0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	331b      	adds	r3, #27
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	4413      	add	r3, r2
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	0d5b      	lsrs	r3, r3, #21
 8002db6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	e00b      	b.n	8002dd8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	331b      	adds	r3, #27
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	4413      	add	r3, r2
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	08db      	lsrs	r3, r3, #3
 8002dd0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	331b      	adds	r3, #27
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	4413      	add	r3, r2
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0202 	and.w	r2, r3, #2
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	331b      	adds	r3, #27
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	4413      	add	r3, r2
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 020f 	and.w	r2, r3, #15
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	331b      	adds	r3, #27
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	4413      	add	r3, r2
 8002e12:	3304      	adds	r3, #4
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	0a1b      	lsrs	r3, r3, #8
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	331b      	adds	r3, #27
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	4413      	add	r3, r2
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	0c1b      	lsrs	r3, r3, #16
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	0a1a      	lsrs	r2, r3, #8
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	3301      	adds	r3, #1
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	0c1a      	lsrs	r2, r3, #16
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	0e1a      	lsrs	r2, r3, #24
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	3303      	adds	r3, #3
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	3304      	adds	r3, #4
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	0a1a      	lsrs	r2, r3, #8
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	3305      	adds	r3, #5
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	0c1a      	lsrs	r2, r3, #16
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	3306      	adds	r3, #6
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	0e1a      	lsrs	r2, r3, #24
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	3307      	adds	r3, #7
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d108      	bne.n	8002f18 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0220 	orr.w	r2, r2, #32
 8002f14:	60da      	str	r2, [r3, #12]
 8002f16:	e007      	b.n	8002f28 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0220 	orr.w	r2, r2, #32
 8002f26:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e006      	b.n	8002f3a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
  }
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b085      	sub	sp, #20
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f56:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d002      	beq.n	8002f64 <HAL_CAN_ActivateNotification+0x1e>
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d109      	bne.n	8002f78 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6959      	ldr	r1, [r3, #20]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	e006      	b.n	8002f86 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
  }
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b08a      	sub	sp, #40	; 0x28
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d07c      	beq.n	80030d2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d023      	beq.n	800302a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f983 	bl	8003300 <HAL_CAN_TxMailbox0CompleteCallback>
 8002ffa:	e016      	b.n	800302a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	d004      	beq.n	8003010 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
 800300e:	e00c      	b.n	800302a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d004      	beq.n	8003024 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
 8003022:	e002      	b.n	800302a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f989 	bl	800333c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d024      	beq.n	800307e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f44f 7280 	mov.w	r2, #256	; 0x100
 800303c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f963 	bl	8003314 <HAL_CAN_TxMailbox1CompleteCallback>
 800304e:	e016      	b.n	800307e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003056:	2b00      	cmp	r3, #0
 8003058:	d004      	beq.n	8003064 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
 8003062:	e00c      	b.n	800307e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800306a:	2b00      	cmp	r3, #0
 800306c:	d004      	beq.n	8003078 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
 8003076:	e002      	b.n	800307e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f969 	bl	8003350 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d024      	beq.n	80030d2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003090:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f943 	bl	8003328 <HAL_CAN_TxMailbox2CompleteCallback>
 80030a2:	e016      	b.n	80030d2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d004      	beq.n	80030b8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
 80030b6:	e00c      	b.n	80030d2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d004      	beq.n	80030cc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ca:	e002      	b.n	80030d2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f949 	bl	8003364 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00c      	beq.n	80030f6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f003 0310 	and.w	r3, r3, #16
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2210      	movs	r2, #16
 80030f4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00b      	beq.n	8003118 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d006      	beq.n	8003118 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2208      	movs	r2, #8
 8003110:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f930 	bl	8003378 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f003 0303 	and.w	r3, r3, #3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7fd fe0d 	bl	8000d50 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00c      	beq.n	800315a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f003 0310 	and.w	r3, r3, #16
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003150:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2210      	movs	r2, #16
 8003158:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00b      	beq.n	800317c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d006      	beq.n	800317c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2208      	movs	r2, #8
 8003174:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f908 	bl	800338c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7fd fe27 	bl	8000de8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00b      	beq.n	80031bc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d006      	beq.n	80031bc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2210      	movs	r2, #16
 80031b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f8f2 	bl	80033a0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d006      	beq.n	80031de <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2208      	movs	r2, #8
 80031d6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f8eb 	bl	80033b4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d07b      	beq.n	80032e0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d072      	beq.n	80032d8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	f043 0302 	orr.w	r3, r3, #2
 8003228:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	f043 0304 	orr.w	r3, r3, #4
 8003244:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800324c:	2b00      	cmp	r3, #0
 800324e:	d043      	beq.n	80032d8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003256:	2b00      	cmp	r3, #0
 8003258:	d03e      	beq.n	80032d8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003260:	2b60      	cmp	r3, #96	; 0x60
 8003262:	d02b      	beq.n	80032bc <HAL_CAN_IRQHandler+0x32a>
 8003264:	2b60      	cmp	r3, #96	; 0x60
 8003266:	d82e      	bhi.n	80032c6 <HAL_CAN_IRQHandler+0x334>
 8003268:	2b50      	cmp	r3, #80	; 0x50
 800326a:	d022      	beq.n	80032b2 <HAL_CAN_IRQHandler+0x320>
 800326c:	2b50      	cmp	r3, #80	; 0x50
 800326e:	d82a      	bhi.n	80032c6 <HAL_CAN_IRQHandler+0x334>
 8003270:	2b40      	cmp	r3, #64	; 0x40
 8003272:	d019      	beq.n	80032a8 <HAL_CAN_IRQHandler+0x316>
 8003274:	2b40      	cmp	r3, #64	; 0x40
 8003276:	d826      	bhi.n	80032c6 <HAL_CAN_IRQHandler+0x334>
 8003278:	2b30      	cmp	r3, #48	; 0x30
 800327a:	d010      	beq.n	800329e <HAL_CAN_IRQHandler+0x30c>
 800327c:	2b30      	cmp	r3, #48	; 0x30
 800327e:	d822      	bhi.n	80032c6 <HAL_CAN_IRQHandler+0x334>
 8003280:	2b10      	cmp	r3, #16
 8003282:	d002      	beq.n	800328a <HAL_CAN_IRQHandler+0x2f8>
 8003284:	2b20      	cmp	r3, #32
 8003286:	d005      	beq.n	8003294 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003288:	e01d      	b.n	80032c6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	f043 0308 	orr.w	r3, r3, #8
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003292:	e019      	b.n	80032c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	f043 0310 	orr.w	r3, r3, #16
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800329c:	e014      	b.n	80032c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	f043 0320 	orr.w	r3, r3, #32
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032a6:	e00f      	b.n	80032c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032b0:	e00a      	b.n	80032c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032ba:	e005      	b.n	80032c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032c4:	e000      	b.n	80032c8 <HAL_CAN_IRQHandler+0x336>
            break;
 80032c6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80032d6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2204      	movs	r2, #4
 80032de:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d008      	beq.n	80032f8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f868 	bl	80033c8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80032f8:	bf00      	nop
 80032fa:	3728      	adds	r7, #40	; 0x28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <__NVIC_SetPriorityGrouping+0x44>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033f8:	4013      	ands	r3, r2
 80033fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800340c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800340e:	4a04      	ldr	r2, [pc, #16]	; (8003420 <__NVIC_SetPriorityGrouping+0x44>)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	60d3      	str	r3, [r2, #12]
}
 8003414:	bf00      	nop
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003428:	4b04      	ldr	r3, [pc, #16]	; (800343c <__NVIC_GetPriorityGrouping+0x18>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	0a1b      	lsrs	r3, r3, #8
 800342e:	f003 0307 	and.w	r3, r3, #7
}
 8003432:	4618      	mov	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344e:	2b00      	cmp	r3, #0
 8003450:	db0b      	blt.n	800346a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	f003 021f 	and.w	r2, r3, #31
 8003458:	4907      	ldr	r1, [pc, #28]	; (8003478 <__NVIC_EnableIRQ+0x38>)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	2001      	movs	r0, #1
 8003462:	fa00 f202 	lsl.w	r2, r0, r2
 8003466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	e000e100 	.word	0xe000e100

0800347c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	6039      	str	r1, [r7, #0]
 8003486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348c:	2b00      	cmp	r3, #0
 800348e:	db0a      	blt.n	80034a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	b2da      	uxtb	r2, r3
 8003494:	490c      	ldr	r1, [pc, #48]	; (80034c8 <__NVIC_SetPriority+0x4c>)
 8003496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349a:	0112      	lsls	r2, r2, #4
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	440b      	add	r3, r1
 80034a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034a4:	e00a      	b.n	80034bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	4908      	ldr	r1, [pc, #32]	; (80034cc <__NVIC_SetPriority+0x50>)
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	3b04      	subs	r3, #4
 80034b4:	0112      	lsls	r2, r2, #4
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	440b      	add	r3, r1
 80034ba:	761a      	strb	r2, [r3, #24]
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000e100 	.word	0xe000e100
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b089      	sub	sp, #36	; 0x24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f1c3 0307 	rsb	r3, r3, #7
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	bf28      	it	cs
 80034ee:	2304      	movcs	r3, #4
 80034f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	3304      	adds	r3, #4
 80034f6:	2b06      	cmp	r3, #6
 80034f8:	d902      	bls.n	8003500 <NVIC_EncodePriority+0x30>
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	3b03      	subs	r3, #3
 80034fe:	e000      	b.n	8003502 <NVIC_EncodePriority+0x32>
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003504:	f04f 32ff 	mov.w	r2, #4294967295
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43da      	mvns	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	401a      	ands	r2, r3
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003518:	f04f 31ff 	mov.w	r1, #4294967295
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	fa01 f303 	lsl.w	r3, r1, r3
 8003522:	43d9      	mvns	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003528:	4313      	orrs	r3, r2
         );
}
 800352a:	4618      	mov	r0, r3
 800352c:	3724      	adds	r7, #36	; 0x24
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3b01      	subs	r3, #1
 8003544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003548:	d301      	bcc.n	800354e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800354a:	2301      	movs	r3, #1
 800354c:	e00f      	b.n	800356e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800354e:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <SysTick_Config+0x40>)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3b01      	subs	r3, #1
 8003554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003556:	210f      	movs	r1, #15
 8003558:	f04f 30ff 	mov.w	r0, #4294967295
 800355c:	f7ff ff8e 	bl	800347c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003560:	4b05      	ldr	r3, [pc, #20]	; (8003578 <SysTick_Config+0x40>)
 8003562:	2200      	movs	r2, #0
 8003564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003566:	4b04      	ldr	r3, [pc, #16]	; (8003578 <SysTick_Config+0x40>)
 8003568:	2207      	movs	r2, #7
 800356a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	e000e010 	.word	0xe000e010

0800357c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7ff ff29 	bl	80033dc <__NVIC_SetPriorityGrouping>
}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003592:	b580      	push	{r7, lr}
 8003594:	b086      	sub	sp, #24
 8003596:	af00      	add	r7, sp, #0
 8003598:	4603      	mov	r3, r0
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035a4:	f7ff ff3e 	bl	8003424 <__NVIC_GetPriorityGrouping>
 80035a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	6978      	ldr	r0, [r7, #20]
 80035b0:	f7ff ff8e 	bl	80034d0 <NVIC_EncodePriority>
 80035b4:	4602      	mov	r2, r0
 80035b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ba:	4611      	mov	r1, r2
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff5d 	bl	800347c <__NVIC_SetPriority>
}
 80035c2:	bf00      	nop
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	4603      	mov	r3, r0
 80035d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff ff31 	bl	8003440 <__NVIC_EnableIRQ>
}
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7ff ffa2 	bl	8003538 <SysTick_Config>
 80035f4:	4603      	mov	r3, r0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800360c:	f7fe fb26 	bl	8001c5c <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e099      	b.n	8003750 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0201 	bic.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800363c:	e00f      	b.n	800365e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800363e:	f7fe fb0d 	bl	8001c5c <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b05      	cmp	r3, #5
 800364a:	d908      	bls.n	800365e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2203      	movs	r2, #3
 8003656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e078      	b.n	8003750 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1e8      	bne.n	800363e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4b38      	ldr	r3, [pc, #224]	; (8003758 <HAL_DMA_Init+0x158>)
 8003678:	4013      	ands	r3, r2
 800367a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800368a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003696:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d107      	bne.n	80036c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	4313      	orrs	r3, r2
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f023 0307 	bic.w	r3, r3, #7
 80036de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d117      	bne.n	8003722 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00e      	beq.n	8003722 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f9e9 	bl	8003adc <DMA_CheckFifoParam>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2240      	movs	r2, #64	; 0x40
 8003714:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800371e:	2301      	movs	r3, #1
 8003720:	e016      	b.n	8003750 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f9a0 	bl	8003a70 <DMA_CalcBaseAndBitshift>
 8003730:	4603      	mov	r3, r0
 8003732:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003738:	223f      	movs	r2, #63	; 0x3f
 800373a:	409a      	lsls	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	f010803f 	.word	0xf010803f

0800375c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003768:	4b8e      	ldr	r3, [pc, #568]	; (80039a4 <HAL_DMA_IRQHandler+0x248>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a8e      	ldr	r2, [pc, #568]	; (80039a8 <HAL_DMA_IRQHandler+0x24c>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	0a9b      	lsrs	r3, r3, #10
 8003774:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003786:	2208      	movs	r2, #8
 8003788:	409a      	lsls	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4013      	ands	r3, r2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d01a      	beq.n	80037c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d013      	beq.n	80037c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0204 	bic.w	r2, r2, #4
 80037ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b4:	2208      	movs	r2, #8
 80037b6:	409a      	lsls	r2, r3
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c0:	f043 0201 	orr.w	r2, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037cc:	2201      	movs	r2, #1
 80037ce:	409a      	lsls	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4013      	ands	r3, r2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d012      	beq.n	80037fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00b      	beq.n	80037fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ea:	2201      	movs	r2, #1
 80037ec:	409a      	lsls	r2, r3
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f6:	f043 0202 	orr.w	r2, r3, #2
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003802:	2204      	movs	r2, #4
 8003804:	409a      	lsls	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4013      	ands	r3, r2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d012      	beq.n	8003834 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00b      	beq.n	8003834 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003820:	2204      	movs	r2, #4
 8003822:	409a      	lsls	r2, r3
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382c:	f043 0204 	orr.w	r2, r3, #4
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003838:	2210      	movs	r2, #16
 800383a:	409a      	lsls	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4013      	ands	r3, r2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d043      	beq.n	80038cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d03c      	beq.n	80038cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	2210      	movs	r2, #16
 8003858:	409a      	lsls	r2, r3
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d018      	beq.n	800389e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d108      	bne.n	800388c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d024      	beq.n	80038cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	4798      	blx	r3
 800388a:	e01f      	b.n	80038cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01b      	beq.n	80038cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	4798      	blx	r3
 800389c:	e016      	b.n	80038cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d107      	bne.n	80038bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0208 	bic.w	r2, r2, #8
 80038ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d0:	2220      	movs	r2, #32
 80038d2:	409a      	lsls	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 808f 	beq.w	80039fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8087 	beq.w	80039fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f2:	2220      	movs	r2, #32
 80038f4:	409a      	lsls	r2, r3
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b05      	cmp	r3, #5
 8003904:	d136      	bne.n	8003974 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0216 	bic.w	r2, r2, #22
 8003914:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695a      	ldr	r2, [r3, #20]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003924:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	2b00      	cmp	r3, #0
 800392c:	d103      	bne.n	8003936 <HAL_DMA_IRQHandler+0x1da>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0208 	bic.w	r2, r2, #8
 8003944:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394a:	223f      	movs	r2, #63	; 0x3f
 800394c:	409a      	lsls	r2, r3
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003966:	2b00      	cmp	r3, #0
 8003968:	d07e      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	4798      	blx	r3
        }
        return;
 8003972:	e079      	b.n	8003a68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d01d      	beq.n	80039be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10d      	bne.n	80039ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003994:	2b00      	cmp	r3, #0
 8003996:	d031      	beq.n	80039fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	4798      	blx	r3
 80039a0:	e02c      	b.n	80039fc <HAL_DMA_IRQHandler+0x2a0>
 80039a2:	bf00      	nop
 80039a4:	20000020 	.word	0x20000020
 80039a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d023      	beq.n	80039fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	4798      	blx	r3
 80039bc:	e01e      	b.n	80039fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10f      	bne.n	80039ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0210 	bic.w	r2, r2, #16
 80039da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d032      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d022      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2205      	movs	r2, #5
 8003a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0201 	bic.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d307      	bcc.n	8003a44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f2      	bne.n	8003a28 <HAL_DMA_IRQHandler+0x2cc>
 8003a42:	e000      	b.n	8003a46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	4798      	blx	r3
 8003a66:	e000      	b.n	8003a6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a68:	bf00      	nop
    }
  }
}
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	3b10      	subs	r3, #16
 8003a80:	4a14      	ldr	r2, [pc, #80]	; (8003ad4 <DMA_CalcBaseAndBitshift+0x64>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	091b      	lsrs	r3, r3, #4
 8003a88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a8a:	4a13      	ldr	r2, [pc, #76]	; (8003ad8 <DMA_CalcBaseAndBitshift+0x68>)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4413      	add	r3, r2
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d909      	bls.n	8003ab2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003aa6:	f023 0303 	bic.w	r3, r3, #3
 8003aaa:	1d1a      	adds	r2, r3, #4
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	659a      	str	r2, [r3, #88]	; 0x58
 8003ab0:	e007      	b.n	8003ac2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003aba:	f023 0303 	bic.w	r3, r3, #3
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	aaaaaaab 	.word	0xaaaaaaab
 8003ad8:	08006e60 	.word	0x08006e60

08003adc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d11f      	bne.n	8003b36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d856      	bhi.n	8003baa <DMA_CheckFifoParam+0xce>
 8003afc:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <DMA_CheckFifoParam+0x28>)
 8003afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b02:	bf00      	nop
 8003b04:	08003b15 	.word	0x08003b15
 8003b08:	08003b27 	.word	0x08003b27
 8003b0c:	08003b15 	.word	0x08003b15
 8003b10:	08003bab 	.word	0x08003bab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d046      	beq.n	8003bae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b24:	e043      	b.n	8003bae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b2e:	d140      	bne.n	8003bb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b34:	e03d      	b.n	8003bb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b3e:	d121      	bne.n	8003b84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d837      	bhi.n	8003bb6 <DMA_CheckFifoParam+0xda>
 8003b46:	a201      	add	r2, pc, #4	; (adr r2, 8003b4c <DMA_CheckFifoParam+0x70>)
 8003b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4c:	08003b5d 	.word	0x08003b5d
 8003b50:	08003b63 	.word	0x08003b63
 8003b54:	08003b5d 	.word	0x08003b5d
 8003b58:	08003b75 	.word	0x08003b75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b60:	e030      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d025      	beq.n	8003bba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b72:	e022      	b.n	8003bba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b7c:	d11f      	bne.n	8003bbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b82:	e01c      	b.n	8003bbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d903      	bls.n	8003b92 <DMA_CheckFifoParam+0xb6>
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d003      	beq.n	8003b98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b90:	e018      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	73fb      	strb	r3, [r7, #15]
      break;
 8003b96:	e015      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00e      	beq.n	8003bc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba8:	e00b      	b.n	8003bc2 <DMA_CheckFifoParam+0xe6>
      break;
 8003baa:	bf00      	nop
 8003bac:	e00a      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bae:	bf00      	nop
 8003bb0:	e008      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bb2:	bf00      	nop
 8003bb4:	e006      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e004      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e002      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003bbe:	bf00      	nop
 8003bc0:	e000      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bc2:	bf00      	nop
    }
  } 
  
  return status; 
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop

08003bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b089      	sub	sp, #36	; 0x24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
 8003bee:	e16b      	b.n	8003ec8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4013      	ands	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	f040 815a 	bne.w	8003ec2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d005      	beq.n	8003c26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d130      	bne.n	8003c88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	2203      	movs	r2, #3
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43db      	mvns	r3, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	43db      	mvns	r3, r3
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	091b      	lsrs	r3, r3, #4
 8003c72:	f003 0201 	and.w	r2, r3, #1
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d017      	beq.n	8003cc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	2203      	movs	r2, #3
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d123      	bne.n	8003d18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	08da      	lsrs	r2, r3, #3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3208      	adds	r2, #8
 8003cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	220f      	movs	r2, #15
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	08da      	lsrs	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3208      	adds	r2, #8
 8003d12:	69b9      	ldr	r1, [r7, #24]
 8003d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	2203      	movs	r2, #3
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 0203 	and.w	r2, r3, #3
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80b4 	beq.w	8003ec2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	4b60      	ldr	r3, [pc, #384]	; (8003ee0 <HAL_GPIO_Init+0x30c>)
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	4a5f      	ldr	r2, [pc, #380]	; (8003ee0 <HAL_GPIO_Init+0x30c>)
 8003d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d68:	6453      	str	r3, [r2, #68]	; 0x44
 8003d6a:	4b5d      	ldr	r3, [pc, #372]	; (8003ee0 <HAL_GPIO_Init+0x30c>)
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d76:	4a5b      	ldr	r2, [pc, #364]	; (8003ee4 <HAL_GPIO_Init+0x310>)
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	089b      	lsrs	r3, r3, #2
 8003d7c:	3302      	adds	r3, #2
 8003d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	220f      	movs	r2, #15
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43db      	mvns	r3, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4013      	ands	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a52      	ldr	r2, [pc, #328]	; (8003ee8 <HAL_GPIO_Init+0x314>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d02b      	beq.n	8003dfa <HAL_GPIO_Init+0x226>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a51      	ldr	r2, [pc, #324]	; (8003eec <HAL_GPIO_Init+0x318>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d025      	beq.n	8003df6 <HAL_GPIO_Init+0x222>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a50      	ldr	r2, [pc, #320]	; (8003ef0 <HAL_GPIO_Init+0x31c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d01f      	beq.n	8003df2 <HAL_GPIO_Init+0x21e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a4f      	ldr	r2, [pc, #316]	; (8003ef4 <HAL_GPIO_Init+0x320>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d019      	beq.n	8003dee <HAL_GPIO_Init+0x21a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a4e      	ldr	r2, [pc, #312]	; (8003ef8 <HAL_GPIO_Init+0x324>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d013      	beq.n	8003dea <HAL_GPIO_Init+0x216>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a4d      	ldr	r2, [pc, #308]	; (8003efc <HAL_GPIO_Init+0x328>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00d      	beq.n	8003de6 <HAL_GPIO_Init+0x212>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a4c      	ldr	r2, [pc, #304]	; (8003f00 <HAL_GPIO_Init+0x32c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d007      	beq.n	8003de2 <HAL_GPIO_Init+0x20e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a4b      	ldr	r2, [pc, #300]	; (8003f04 <HAL_GPIO_Init+0x330>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d101      	bne.n	8003dde <HAL_GPIO_Init+0x20a>
 8003dda:	2307      	movs	r3, #7
 8003ddc:	e00e      	b.n	8003dfc <HAL_GPIO_Init+0x228>
 8003dde:	2308      	movs	r3, #8
 8003de0:	e00c      	b.n	8003dfc <HAL_GPIO_Init+0x228>
 8003de2:	2306      	movs	r3, #6
 8003de4:	e00a      	b.n	8003dfc <HAL_GPIO_Init+0x228>
 8003de6:	2305      	movs	r3, #5
 8003de8:	e008      	b.n	8003dfc <HAL_GPIO_Init+0x228>
 8003dea:	2304      	movs	r3, #4
 8003dec:	e006      	b.n	8003dfc <HAL_GPIO_Init+0x228>
 8003dee:	2303      	movs	r3, #3
 8003df0:	e004      	b.n	8003dfc <HAL_GPIO_Init+0x228>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e002      	b.n	8003dfc <HAL_GPIO_Init+0x228>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_GPIO_Init+0x228>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	69fa      	ldr	r2, [r7, #28]
 8003dfe:	f002 0203 	and.w	r2, r2, #3
 8003e02:	0092      	lsls	r2, r2, #2
 8003e04:	4093      	lsls	r3, r2
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e0c:	4935      	ldr	r1, [pc, #212]	; (8003ee4 <HAL_GPIO_Init+0x310>)
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	089b      	lsrs	r3, r3, #2
 8003e12:	3302      	adds	r3, #2
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e1a:	4b3b      	ldr	r3, [pc, #236]	; (8003f08 <HAL_GPIO_Init+0x334>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	43db      	mvns	r3, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4013      	ands	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e3e:	4a32      	ldr	r2, [pc, #200]	; (8003f08 <HAL_GPIO_Init+0x334>)
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e44:	4b30      	ldr	r3, [pc, #192]	; (8003f08 <HAL_GPIO_Init+0x334>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4013      	ands	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e68:	4a27      	ldr	r2, [pc, #156]	; (8003f08 <HAL_GPIO_Init+0x334>)
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e6e:	4b26      	ldr	r3, [pc, #152]	; (8003f08 <HAL_GPIO_Init+0x334>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	43db      	mvns	r3, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e92:	4a1d      	ldr	r2, [pc, #116]	; (8003f08 <HAL_GPIO_Init+0x334>)
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e98:	4b1b      	ldr	r3, [pc, #108]	; (8003f08 <HAL_GPIO_Init+0x334>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ebc:	4a12      	ldr	r2, [pc, #72]	; (8003f08 <HAL_GPIO_Init+0x334>)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	61fb      	str	r3, [r7, #28]
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	2b0f      	cmp	r3, #15
 8003ecc:	f67f ae90 	bls.w	8003bf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ed0:	bf00      	nop
 8003ed2:	bf00      	nop
 8003ed4:	3724      	adds	r7, #36	; 0x24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	40013800 	.word	0x40013800
 8003ee8:	40020000 	.word	0x40020000
 8003eec:	40020400 	.word	0x40020400
 8003ef0:	40020800 	.word	0x40020800
 8003ef4:	40020c00 	.word	0x40020c00
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40021400 	.word	0x40021400
 8003f00:	40021800 	.word	0x40021800
 8003f04:	40021c00 	.word	0x40021c00
 8003f08:	40013c00 	.word	0x40013c00

08003f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	807b      	strh	r3, [r7, #2]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f1c:	787b      	ldrb	r3, [r7, #1]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f22:	887a      	ldrh	r2, [r7, #2]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f28:	e003      	b.n	8003f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f2a:	887b      	ldrh	r3, [r7, #2]
 8003f2c:	041a      	lsls	r2, r3, #16
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	619a      	str	r2, [r3, #24]
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
	...

08003f40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e267      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d075      	beq.n	800404a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f5e:	4b88      	ldr	r3, [pc, #544]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 030c 	and.w	r3, r3, #12
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d00c      	beq.n	8003f84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f6a:	4b85      	ldr	r3, [pc, #532]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d112      	bne.n	8003f9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f76:	4b82      	ldr	r3, [pc, #520]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f82:	d10b      	bne.n	8003f9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f84:	4b7e      	ldr	r3, [pc, #504]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d05b      	beq.n	8004048 <HAL_RCC_OscConfig+0x108>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d157      	bne.n	8004048 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e242      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa4:	d106      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x74>
 8003fa6:	4b76      	ldr	r3, [pc, #472]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a75      	ldr	r2, [pc, #468]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	e01d      	b.n	8003ff0 <HAL_RCC_OscConfig+0xb0>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fbc:	d10c      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x98>
 8003fbe:	4b70      	ldr	r3, [pc, #448]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a6f      	ldr	r2, [pc, #444]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	4b6d      	ldr	r3, [pc, #436]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a6c      	ldr	r2, [pc, #432]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	e00b      	b.n	8003ff0 <HAL_RCC_OscConfig+0xb0>
 8003fd8:	4b69      	ldr	r3, [pc, #420]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a68      	ldr	r2, [pc, #416]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	4b66      	ldr	r3, [pc, #408]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a65      	ldr	r2, [pc, #404]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8003fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d013      	beq.n	8004020 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff8:	f7fd fe30 	bl	8001c5c <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004000:	f7fd fe2c 	bl	8001c5c <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b64      	cmp	r3, #100	; 0x64
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e207      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004012:	4b5b      	ldr	r3, [pc, #364]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0xc0>
 800401e:	e014      	b.n	800404a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004020:	f7fd fe1c 	bl	8001c5c <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004028:	f7fd fe18 	bl	8001c5c <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b64      	cmp	r3, #100	; 0x64
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e1f3      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800403a:	4b51      	ldr	r3, [pc, #324]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1f0      	bne.n	8004028 <HAL_RCC_OscConfig+0xe8>
 8004046:	e000      	b.n	800404a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d063      	beq.n	800411e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004056:	4b4a      	ldr	r3, [pc, #296]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00b      	beq.n	800407a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004062:	4b47      	ldr	r3, [pc, #284]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800406a:	2b08      	cmp	r3, #8
 800406c:	d11c      	bne.n	80040a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800406e:	4b44      	ldr	r3, [pc, #272]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d116      	bne.n	80040a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800407a:	4b41      	ldr	r3, [pc, #260]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d005      	beq.n	8004092 <HAL_RCC_OscConfig+0x152>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d001      	beq.n	8004092 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e1c7      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004092:	4b3b      	ldr	r3, [pc, #236]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	4937      	ldr	r1, [pc, #220]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a6:	e03a      	b.n	800411e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d020      	beq.n	80040f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040b0:	4b34      	ldr	r3, [pc, #208]	; (8004184 <HAL_RCC_OscConfig+0x244>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b6:	f7fd fdd1 	bl	8001c5c <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040be:	f7fd fdcd 	bl	8001c5c <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e1a8      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d0:	4b2b      	ldr	r3, [pc, #172]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0f0      	beq.n	80040be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040dc:	4b28      	ldr	r3, [pc, #160]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	4925      	ldr	r1, [pc, #148]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	600b      	str	r3, [r1, #0]
 80040f0:	e015      	b.n	800411e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040f2:	4b24      	ldr	r3, [pc, #144]	; (8004184 <HAL_RCC_OscConfig+0x244>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f8:	f7fd fdb0 	bl	8001c5c <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004100:	f7fd fdac 	bl	8001c5c <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e187      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004112:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f0      	bne.n	8004100 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d036      	beq.n	8004198 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d016      	beq.n	8004160 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004132:	4b15      	ldr	r3, [pc, #84]	; (8004188 <HAL_RCC_OscConfig+0x248>)
 8004134:	2201      	movs	r2, #1
 8004136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004138:	f7fd fd90 	bl	8001c5c <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004140:	f7fd fd8c 	bl	8001c5c <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e167      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004152:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <HAL_RCC_OscConfig+0x240>)
 8004154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0x200>
 800415e:	e01b      	b.n	8004198 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004160:	4b09      	ldr	r3, [pc, #36]	; (8004188 <HAL_RCC_OscConfig+0x248>)
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004166:	f7fd fd79 	bl	8001c5c <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800416c:	e00e      	b.n	800418c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800416e:	f7fd fd75 	bl	8001c5c <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d907      	bls.n	800418c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e150      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
 8004180:	40023800 	.word	0x40023800
 8004184:	42470000 	.word	0x42470000
 8004188:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800418c:	4b88      	ldr	r3, [pc, #544]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 800418e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1ea      	bne.n	800416e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 8097 	beq.w	80042d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041a6:	2300      	movs	r3, #0
 80041a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041aa:	4b81      	ldr	r3, [pc, #516]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10f      	bne.n	80041d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b6:	2300      	movs	r3, #0
 80041b8:	60bb      	str	r3, [r7, #8]
 80041ba:	4b7d      	ldr	r3, [pc, #500]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	4a7c      	ldr	r2, [pc, #496]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 80041c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c4:	6413      	str	r3, [r2, #64]	; 0x40
 80041c6:	4b7a      	ldr	r3, [pc, #488]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ce:	60bb      	str	r3, [r7, #8]
 80041d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041d2:	2301      	movs	r3, #1
 80041d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d6:	4b77      	ldr	r3, [pc, #476]	; (80043b4 <HAL_RCC_OscConfig+0x474>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d118      	bne.n	8004214 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041e2:	4b74      	ldr	r3, [pc, #464]	; (80043b4 <HAL_RCC_OscConfig+0x474>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a73      	ldr	r2, [pc, #460]	; (80043b4 <HAL_RCC_OscConfig+0x474>)
 80041e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ee:	f7fd fd35 	bl	8001c5c <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f6:	f7fd fd31 	bl	8001c5c <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e10c      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004208:	4b6a      	ldr	r3, [pc, #424]	; (80043b4 <HAL_RCC_OscConfig+0x474>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d106      	bne.n	800422a <HAL_RCC_OscConfig+0x2ea>
 800421c:	4b64      	ldr	r3, [pc, #400]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 800421e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004220:	4a63      	ldr	r2, [pc, #396]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	6713      	str	r3, [r2, #112]	; 0x70
 8004228:	e01c      	b.n	8004264 <HAL_RCC_OscConfig+0x324>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2b05      	cmp	r3, #5
 8004230:	d10c      	bne.n	800424c <HAL_RCC_OscConfig+0x30c>
 8004232:	4b5f      	ldr	r3, [pc, #380]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 8004234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004236:	4a5e      	ldr	r2, [pc, #376]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 8004238:	f043 0304 	orr.w	r3, r3, #4
 800423c:	6713      	str	r3, [r2, #112]	; 0x70
 800423e:	4b5c      	ldr	r3, [pc, #368]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	4a5b      	ldr	r2, [pc, #364]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	6713      	str	r3, [r2, #112]	; 0x70
 800424a:	e00b      	b.n	8004264 <HAL_RCC_OscConfig+0x324>
 800424c:	4b58      	ldr	r3, [pc, #352]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 800424e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004250:	4a57      	ldr	r2, [pc, #348]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 8004252:	f023 0301 	bic.w	r3, r3, #1
 8004256:	6713      	str	r3, [r2, #112]	; 0x70
 8004258:	4b55      	ldr	r3, [pc, #340]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 800425a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425c:	4a54      	ldr	r2, [pc, #336]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 800425e:	f023 0304 	bic.w	r3, r3, #4
 8004262:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d015      	beq.n	8004298 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426c:	f7fd fcf6 	bl	8001c5c <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004272:	e00a      	b.n	800428a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004274:	f7fd fcf2 	bl	8001c5c <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004282:	4293      	cmp	r3, r2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e0cb      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428a:	4b49      	ldr	r3, [pc, #292]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0ee      	beq.n	8004274 <HAL_RCC_OscConfig+0x334>
 8004296:	e014      	b.n	80042c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004298:	f7fd fce0 	bl	8001c5c <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800429e:	e00a      	b.n	80042b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a0:	f7fd fcdc 	bl	8001c5c <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e0b5      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b6:	4b3e      	ldr	r3, [pc, #248]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1ee      	bne.n	80042a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042c2:	7dfb      	ldrb	r3, [r7, #23]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d105      	bne.n	80042d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c8:	4b39      	ldr	r3, [pc, #228]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	4a38      	ldr	r2, [pc, #224]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 80042ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80a1 	beq.w	8004420 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042de:	4b34      	ldr	r3, [pc, #208]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d05c      	beq.n	80043a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d141      	bne.n	8004376 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f2:	4b31      	ldr	r3, [pc, #196]	; (80043b8 <HAL_RCC_OscConfig+0x478>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f8:	f7fd fcb0 	bl	8001c5c <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004300:	f7fd fcac 	bl	8001c5c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e087      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004312:	4b27      	ldr	r3, [pc, #156]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f0      	bne.n	8004300 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69da      	ldr	r2, [r3, #28]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	019b      	lsls	r3, r3, #6
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004334:	085b      	lsrs	r3, r3, #1
 8004336:	3b01      	subs	r3, #1
 8004338:	041b      	lsls	r3, r3, #16
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	061b      	lsls	r3, r3, #24
 8004342:	491b      	ldr	r1, [pc, #108]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 8004344:	4313      	orrs	r3, r2
 8004346:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004348:	4b1b      	ldr	r3, [pc, #108]	; (80043b8 <HAL_RCC_OscConfig+0x478>)
 800434a:	2201      	movs	r2, #1
 800434c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434e:	f7fd fc85 	bl	8001c5c <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004356:	f7fd fc81 	bl	8001c5c <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e05c      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004368:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x416>
 8004374:	e054      	b.n	8004420 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004376:	4b10      	ldr	r3, [pc, #64]	; (80043b8 <HAL_RCC_OscConfig+0x478>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7fd fc6e 	bl	8001c5c <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004384:	f7fd fc6a 	bl	8001c5c <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e045      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004396:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <HAL_RCC_OscConfig+0x470>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_OscConfig+0x444>
 80043a2:	e03d      	b.n	8004420 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d107      	bne.n	80043bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e038      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
 80043b0:	40023800 	.word	0x40023800
 80043b4:	40007000 	.word	0x40007000
 80043b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043bc:	4b1b      	ldr	r3, [pc, #108]	; (800442c <HAL_RCC_OscConfig+0x4ec>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d028      	beq.n	800441c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d121      	bne.n	800441c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d11a      	bne.n	800441c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043ec:	4013      	ands	r3, r2
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d111      	bne.n	800441c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004402:	085b      	lsrs	r3, r3, #1
 8004404:	3b01      	subs	r3, #1
 8004406:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004408:	429a      	cmp	r2, r3
 800440a:	d107      	bne.n	800441c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004416:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004418:	429a      	cmp	r2, r3
 800441a:	d001      	beq.n	8004420 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40023800 	.word	0x40023800

08004430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e0cc      	b.n	80045de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004444:	4b68      	ldr	r3, [pc, #416]	; (80045e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d90c      	bls.n	800446c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004452:	4b65      	ldr	r3, [pc, #404]	; (80045e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800445a:	4b63      	ldr	r3, [pc, #396]	; (80045e8 <HAL_RCC_ClockConfig+0x1b8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d001      	beq.n	800446c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0b8      	b.n	80045de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d020      	beq.n	80044ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004484:	4b59      	ldr	r3, [pc, #356]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	4a58      	ldr	r2, [pc, #352]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800448e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800449c:	4b53      	ldr	r3, [pc, #332]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	4a52      	ldr	r2, [pc, #328]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a8:	4b50      	ldr	r3, [pc, #320]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	494d      	ldr	r1, [pc, #308]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d044      	beq.n	8004550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d107      	bne.n	80044de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ce:	4b47      	ldr	r3, [pc, #284]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d119      	bne.n	800450e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e07f      	b.n	80045de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d003      	beq.n	80044ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d107      	bne.n	80044fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ee:	4b3f      	ldr	r3, [pc, #252]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d109      	bne.n	800450e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e06f      	b.n	80045de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044fe:	4b3b      	ldr	r3, [pc, #236]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e067      	b.n	80045de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800450e:	4b37      	ldr	r3, [pc, #220]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f023 0203 	bic.w	r2, r3, #3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	4934      	ldr	r1, [pc, #208]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 800451c:	4313      	orrs	r3, r2
 800451e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004520:	f7fd fb9c 	bl	8001c5c <HAL_GetTick>
 8004524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004526:	e00a      	b.n	800453e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004528:	f7fd fb98 	bl	8001c5c <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	f241 3288 	movw	r2, #5000	; 0x1388
 8004536:	4293      	cmp	r3, r2
 8004538:	d901      	bls.n	800453e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e04f      	b.n	80045de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453e:	4b2b      	ldr	r3, [pc, #172]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 020c 	and.w	r2, r3, #12
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	429a      	cmp	r2, r3
 800454e:	d1eb      	bne.n	8004528 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004550:	4b25      	ldr	r3, [pc, #148]	; (80045e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0307 	and.w	r3, r3, #7
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	d20c      	bcs.n	8004578 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455e:	4b22      	ldr	r3, [pc, #136]	; (80045e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004566:	4b20      	ldr	r3, [pc, #128]	; (80045e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d001      	beq.n	8004578 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e032      	b.n	80045de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004584:	4b19      	ldr	r3, [pc, #100]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	4916      	ldr	r1, [pc, #88]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	4313      	orrs	r3, r2
 8004594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d009      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045a2:	4b12      	ldr	r3, [pc, #72]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	490e      	ldr	r1, [pc, #56]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045b6:	f000 f821 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 80045ba:	4602      	mov	r2, r0
 80045bc:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	091b      	lsrs	r3, r3, #4
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	490a      	ldr	r1, [pc, #40]	; (80045f0 <HAL_RCC_ClockConfig+0x1c0>)
 80045c8:	5ccb      	ldrb	r3, [r1, r3]
 80045ca:	fa22 f303 	lsr.w	r3, r2, r3
 80045ce:	4a09      	ldr	r2, [pc, #36]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 80045d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045d2:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <HAL_RCC_ClockConfig+0x1c8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fd fafc 	bl	8001bd4 <HAL_InitTick>

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	40023c00 	.word	0x40023c00
 80045ec:	40023800 	.word	0x40023800
 80045f0:	08006e48 	.word	0x08006e48
 80045f4:	20000020 	.word	0x20000020
 80045f8:	20000024 	.word	0x20000024

080045fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004600:	b094      	sub	sp, #80	; 0x50
 8004602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	647b      	str	r3, [r7, #68]	; 0x44
 8004608:	2300      	movs	r3, #0
 800460a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800460c:	2300      	movs	r3, #0
 800460e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004614:	4b79      	ldr	r3, [pc, #484]	; (80047fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 030c 	and.w	r3, r3, #12
 800461c:	2b08      	cmp	r3, #8
 800461e:	d00d      	beq.n	800463c <HAL_RCC_GetSysClockFreq+0x40>
 8004620:	2b08      	cmp	r3, #8
 8004622:	f200 80e1 	bhi.w	80047e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <HAL_RCC_GetSysClockFreq+0x34>
 800462a:	2b04      	cmp	r3, #4
 800462c:	d003      	beq.n	8004636 <HAL_RCC_GetSysClockFreq+0x3a>
 800462e:	e0db      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004630:	4b73      	ldr	r3, [pc, #460]	; (8004800 <HAL_RCC_GetSysClockFreq+0x204>)
 8004632:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004634:	e0db      	b.n	80047ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004636:	4b73      	ldr	r3, [pc, #460]	; (8004804 <HAL_RCC_GetSysClockFreq+0x208>)
 8004638:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800463a:	e0d8      	b.n	80047ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800463c:	4b6f      	ldr	r3, [pc, #444]	; (80047fc <HAL_RCC_GetSysClockFreq+0x200>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004644:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004646:	4b6d      	ldr	r3, [pc, #436]	; (80047fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d063      	beq.n	800471a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004652:	4b6a      	ldr	r3, [pc, #424]	; (80047fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	099b      	lsrs	r3, r3, #6
 8004658:	2200      	movs	r2, #0
 800465a:	63bb      	str	r3, [r7, #56]	; 0x38
 800465c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800465e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004664:	633b      	str	r3, [r7, #48]	; 0x30
 8004666:	2300      	movs	r3, #0
 8004668:	637b      	str	r3, [r7, #52]	; 0x34
 800466a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800466e:	4622      	mov	r2, r4
 8004670:	462b      	mov	r3, r5
 8004672:	f04f 0000 	mov.w	r0, #0
 8004676:	f04f 0100 	mov.w	r1, #0
 800467a:	0159      	lsls	r1, r3, #5
 800467c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004680:	0150      	lsls	r0, r2, #5
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4621      	mov	r1, r4
 8004688:	1a51      	subs	r1, r2, r1
 800468a:	6139      	str	r1, [r7, #16]
 800468c:	4629      	mov	r1, r5
 800468e:	eb63 0301 	sbc.w	r3, r3, r1
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046a0:	4659      	mov	r1, fp
 80046a2:	018b      	lsls	r3, r1, #6
 80046a4:	4651      	mov	r1, sl
 80046a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046aa:	4651      	mov	r1, sl
 80046ac:	018a      	lsls	r2, r1, #6
 80046ae:	4651      	mov	r1, sl
 80046b0:	ebb2 0801 	subs.w	r8, r2, r1
 80046b4:	4659      	mov	r1, fp
 80046b6:	eb63 0901 	sbc.w	r9, r3, r1
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	f04f 0300 	mov.w	r3, #0
 80046c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046ce:	4690      	mov	r8, r2
 80046d0:	4699      	mov	r9, r3
 80046d2:	4623      	mov	r3, r4
 80046d4:	eb18 0303 	adds.w	r3, r8, r3
 80046d8:	60bb      	str	r3, [r7, #8]
 80046da:	462b      	mov	r3, r5
 80046dc:	eb49 0303 	adc.w	r3, r9, r3
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	f04f 0300 	mov.w	r3, #0
 80046ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046ee:	4629      	mov	r1, r5
 80046f0:	024b      	lsls	r3, r1, #9
 80046f2:	4621      	mov	r1, r4
 80046f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046f8:	4621      	mov	r1, r4
 80046fa:	024a      	lsls	r2, r1, #9
 80046fc:	4610      	mov	r0, r2
 80046fe:	4619      	mov	r1, r3
 8004700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004702:	2200      	movs	r2, #0
 8004704:	62bb      	str	r3, [r7, #40]	; 0x28
 8004706:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004708:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800470c:	f7fc f99e 	bl	8000a4c <__aeabi_uldivmod>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4613      	mov	r3, r2
 8004716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004718:	e058      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800471a:	4b38      	ldr	r3, [pc, #224]	; (80047fc <HAL_RCC_GetSysClockFreq+0x200>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	099b      	lsrs	r3, r3, #6
 8004720:	2200      	movs	r2, #0
 8004722:	4618      	mov	r0, r3
 8004724:	4611      	mov	r1, r2
 8004726:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800472a:	623b      	str	r3, [r7, #32]
 800472c:	2300      	movs	r3, #0
 800472e:	627b      	str	r3, [r7, #36]	; 0x24
 8004730:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004734:	4642      	mov	r2, r8
 8004736:	464b      	mov	r3, r9
 8004738:	f04f 0000 	mov.w	r0, #0
 800473c:	f04f 0100 	mov.w	r1, #0
 8004740:	0159      	lsls	r1, r3, #5
 8004742:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004746:	0150      	lsls	r0, r2, #5
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4641      	mov	r1, r8
 800474e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004752:	4649      	mov	r1, r9
 8004754:	eb63 0b01 	sbc.w	fp, r3, r1
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004764:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004768:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800476c:	ebb2 040a 	subs.w	r4, r2, sl
 8004770:	eb63 050b 	sbc.w	r5, r3, fp
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	f04f 0300 	mov.w	r3, #0
 800477c:	00eb      	lsls	r3, r5, #3
 800477e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004782:	00e2      	lsls	r2, r4, #3
 8004784:	4614      	mov	r4, r2
 8004786:	461d      	mov	r5, r3
 8004788:	4643      	mov	r3, r8
 800478a:	18e3      	adds	r3, r4, r3
 800478c:	603b      	str	r3, [r7, #0]
 800478e:	464b      	mov	r3, r9
 8004790:	eb45 0303 	adc.w	r3, r5, r3
 8004794:	607b      	str	r3, [r7, #4]
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047a2:	4629      	mov	r1, r5
 80047a4:	028b      	lsls	r3, r1, #10
 80047a6:	4621      	mov	r1, r4
 80047a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047ac:	4621      	mov	r1, r4
 80047ae:	028a      	lsls	r2, r1, #10
 80047b0:	4610      	mov	r0, r2
 80047b2:	4619      	mov	r1, r3
 80047b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047b6:	2200      	movs	r2, #0
 80047b8:	61bb      	str	r3, [r7, #24]
 80047ba:	61fa      	str	r2, [r7, #28]
 80047bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047c0:	f7fc f944 	bl	8000a4c <__aeabi_uldivmod>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4613      	mov	r3, r2
 80047ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047cc:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <HAL_RCC_GetSysClockFreq+0x200>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	0c1b      	lsrs	r3, r3, #16
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	3301      	adds	r3, #1
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047e6:	e002      	b.n	80047ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047e8:	4b05      	ldr	r3, [pc, #20]	; (8004800 <HAL_RCC_GetSysClockFreq+0x204>)
 80047ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3750      	adds	r7, #80	; 0x50
 80047f4:	46bd      	mov	sp, r7
 80047f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047fa:	bf00      	nop
 80047fc:	40023800 	.word	0x40023800
 8004800:	00f42400 	.word	0x00f42400
 8004804:	007a1200 	.word	0x007a1200

08004808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800480c:	4b03      	ldr	r3, [pc, #12]	; (800481c <HAL_RCC_GetHCLKFreq+0x14>)
 800480e:	681b      	ldr	r3, [r3, #0]
}
 8004810:	4618      	mov	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	20000020 	.word	0x20000020

08004820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004824:	f7ff fff0 	bl	8004808 <HAL_RCC_GetHCLKFreq>
 8004828:	4602      	mov	r2, r0
 800482a:	4b05      	ldr	r3, [pc, #20]	; (8004840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	0a9b      	lsrs	r3, r3, #10
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	4903      	ldr	r1, [pc, #12]	; (8004844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004836:	5ccb      	ldrb	r3, [r1, r3]
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800483c:	4618      	mov	r0, r3
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40023800 	.word	0x40023800
 8004844:	08006e58 	.word	0x08006e58

08004848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800484c:	f7ff ffdc 	bl	8004808 <HAL_RCC_GetHCLKFreq>
 8004850:	4602      	mov	r2, r0
 8004852:	4b05      	ldr	r3, [pc, #20]	; (8004868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	0b5b      	lsrs	r3, r3, #13
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	4903      	ldr	r1, [pc, #12]	; (800486c <HAL_RCC_GetPCLK2Freq+0x24>)
 800485e:	5ccb      	ldrb	r3, [r1, r3]
 8004860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004864:	4618      	mov	r0, r3
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40023800 	.word	0x40023800
 800486c:	08006e58 	.word	0x08006e58

08004870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e041      	b.n	8004906 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fc ff94 	bl	80017c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3304      	adds	r3, #4
 80048ac:	4619      	mov	r1, r3
 80048ae:	4610      	mov	r0, r2
 80048b0:	f000 fad8 	bl	8004e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e041      	b.n	80049a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d106      	bne.n	800493a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f839 	bl	80049ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2202      	movs	r2, #2
 800493e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3304      	adds	r3, #4
 800494a:	4619      	mov	r1, r3
 800494c:	4610      	mov	r0, r2
 800494e:	f000 fa89 	bl	8004e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d109      	bne.n	80049e4 <HAL_TIM_PWM_Start+0x24>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b01      	cmp	r3, #1
 80049da:	bf14      	ite	ne
 80049dc:	2301      	movne	r3, #1
 80049de:	2300      	moveq	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	e022      	b.n	8004a2a <HAL_TIM_PWM_Start+0x6a>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d109      	bne.n	80049fe <HAL_TIM_PWM_Start+0x3e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	bf14      	ite	ne
 80049f6:	2301      	movne	r3, #1
 80049f8:	2300      	moveq	r3, #0
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	e015      	b.n	8004a2a <HAL_TIM_PWM_Start+0x6a>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d109      	bne.n	8004a18 <HAL_TIM_PWM_Start+0x58>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	bf14      	ite	ne
 8004a10:	2301      	movne	r3, #1
 8004a12:	2300      	moveq	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	e008      	b.n	8004a2a <HAL_TIM_PWM_Start+0x6a>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	bf14      	ite	ne
 8004a24:	2301      	movne	r3, #1
 8004a26:	2300      	moveq	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e07c      	b.n	8004b2c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d104      	bne.n	8004a42 <HAL_TIM_PWM_Start+0x82>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a40:	e013      	b.n	8004a6a <HAL_TIM_PWM_Start+0xaa>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d104      	bne.n	8004a52 <HAL_TIM_PWM_Start+0x92>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a50:	e00b      	b.n	8004a6a <HAL_TIM_PWM_Start+0xaa>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d104      	bne.n	8004a62 <HAL_TIM_PWM_Start+0xa2>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a60:	e003      	b.n	8004a6a <HAL_TIM_PWM_Start+0xaa>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2202      	movs	r2, #2
 8004a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	6839      	ldr	r1, [r7, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fce0 	bl	8005438 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a2d      	ldr	r2, [pc, #180]	; (8004b34 <HAL_TIM_PWM_Start+0x174>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d004      	beq.n	8004a8c <HAL_TIM_PWM_Start+0xcc>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a2c      	ldr	r2, [pc, #176]	; (8004b38 <HAL_TIM_PWM_Start+0x178>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d101      	bne.n	8004a90 <HAL_TIM_PWM_Start+0xd0>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e000      	b.n	8004a92 <HAL_TIM_PWM_Start+0xd2>
 8004a90:	2300      	movs	r3, #0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d007      	beq.n	8004aa6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aa4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a22      	ldr	r2, [pc, #136]	; (8004b34 <HAL_TIM_PWM_Start+0x174>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d022      	beq.n	8004af6 <HAL_TIM_PWM_Start+0x136>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab8:	d01d      	beq.n	8004af6 <HAL_TIM_PWM_Start+0x136>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a1f      	ldr	r2, [pc, #124]	; (8004b3c <HAL_TIM_PWM_Start+0x17c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d018      	beq.n	8004af6 <HAL_TIM_PWM_Start+0x136>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a1d      	ldr	r2, [pc, #116]	; (8004b40 <HAL_TIM_PWM_Start+0x180>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d013      	beq.n	8004af6 <HAL_TIM_PWM_Start+0x136>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a1c      	ldr	r2, [pc, #112]	; (8004b44 <HAL_TIM_PWM_Start+0x184>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00e      	beq.n	8004af6 <HAL_TIM_PWM_Start+0x136>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a16      	ldr	r2, [pc, #88]	; (8004b38 <HAL_TIM_PWM_Start+0x178>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d009      	beq.n	8004af6 <HAL_TIM_PWM_Start+0x136>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a18      	ldr	r2, [pc, #96]	; (8004b48 <HAL_TIM_PWM_Start+0x188>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d004      	beq.n	8004af6 <HAL_TIM_PWM_Start+0x136>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a16      	ldr	r2, [pc, #88]	; (8004b4c <HAL_TIM_PWM_Start+0x18c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d111      	bne.n	8004b1a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b06      	cmp	r3, #6
 8004b06:	d010      	beq.n	8004b2a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b18:	e007      	b.n	8004b2a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 0201 	orr.w	r2, r2, #1
 8004b28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40010000 	.word	0x40010000
 8004b38:	40010400 	.word	0x40010400
 8004b3c:	40000400 	.word	0x40000400
 8004b40:	40000800 	.word	0x40000800
 8004b44:	40000c00 	.word	0x40000c00
 8004b48:	40014000 	.word	0x40014000
 8004b4c:	40001800 	.word	0x40001800

08004b50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d101      	bne.n	8004b6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	e0ae      	b.n	8004ccc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b0c      	cmp	r3, #12
 8004b7a:	f200 809f 	bhi.w	8004cbc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b7e:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b84:	08004bb9 	.word	0x08004bb9
 8004b88:	08004cbd 	.word	0x08004cbd
 8004b8c:	08004cbd 	.word	0x08004cbd
 8004b90:	08004cbd 	.word	0x08004cbd
 8004b94:	08004bf9 	.word	0x08004bf9
 8004b98:	08004cbd 	.word	0x08004cbd
 8004b9c:	08004cbd 	.word	0x08004cbd
 8004ba0:	08004cbd 	.word	0x08004cbd
 8004ba4:	08004c3b 	.word	0x08004c3b
 8004ba8:	08004cbd 	.word	0x08004cbd
 8004bac:	08004cbd 	.word	0x08004cbd
 8004bb0:	08004cbd 	.word	0x08004cbd
 8004bb4:	08004c7b 	.word	0x08004c7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68b9      	ldr	r1, [r7, #8]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 f9f0 	bl	8004fa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	699a      	ldr	r2, [r3, #24]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0208 	orr.w	r2, r2, #8
 8004bd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699a      	ldr	r2, [r3, #24]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0204 	bic.w	r2, r2, #4
 8004be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6999      	ldr	r1, [r3, #24]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	691a      	ldr	r2, [r3, #16]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	619a      	str	r2, [r3, #24]
      break;
 8004bf6:	e064      	b.n	8004cc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68b9      	ldr	r1, [r7, #8]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fa40 	bl	8005084 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699a      	ldr	r2, [r3, #24]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699a      	ldr	r2, [r3, #24]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6999      	ldr	r1, [r3, #24]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	021a      	lsls	r2, r3, #8
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	430a      	orrs	r2, r1
 8004c36:	619a      	str	r2, [r3, #24]
      break;
 8004c38:	e043      	b.n	8004cc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68b9      	ldr	r1, [r7, #8]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 fa95 	bl	8005170 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	69da      	ldr	r2, [r3, #28]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f042 0208 	orr.w	r2, r2, #8
 8004c54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69da      	ldr	r2, [r3, #28]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0204 	bic.w	r2, r2, #4
 8004c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69d9      	ldr	r1, [r3, #28]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	61da      	str	r2, [r3, #28]
      break;
 8004c78:	e023      	b.n	8004cc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68b9      	ldr	r1, [r7, #8]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fae9 	bl	8005258 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69da      	ldr	r2, [r3, #28]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69da      	ldr	r2, [r3, #28]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69d9      	ldr	r1, [r3, #28]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	021a      	lsls	r2, r3, #8
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	61da      	str	r2, [r3, #28]
      break;
 8004cba:	e002      	b.n	8004cc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8004cc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3718      	adds	r7, #24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_TIM_ConfigClockSource+0x1c>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e0b4      	b.n	8004e5a <HAL_TIM_ConfigClockSource+0x186>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d28:	d03e      	beq.n	8004da8 <HAL_TIM_ConfigClockSource+0xd4>
 8004d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d2e:	f200 8087 	bhi.w	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d36:	f000 8086 	beq.w	8004e46 <HAL_TIM_ConfigClockSource+0x172>
 8004d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d3e:	d87f      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d40:	2b70      	cmp	r3, #112	; 0x70
 8004d42:	d01a      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0xa6>
 8004d44:	2b70      	cmp	r3, #112	; 0x70
 8004d46:	d87b      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d48:	2b60      	cmp	r3, #96	; 0x60
 8004d4a:	d050      	beq.n	8004dee <HAL_TIM_ConfigClockSource+0x11a>
 8004d4c:	2b60      	cmp	r3, #96	; 0x60
 8004d4e:	d877      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d50:	2b50      	cmp	r3, #80	; 0x50
 8004d52:	d03c      	beq.n	8004dce <HAL_TIM_ConfigClockSource+0xfa>
 8004d54:	2b50      	cmp	r3, #80	; 0x50
 8004d56:	d873      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d58:	2b40      	cmp	r3, #64	; 0x40
 8004d5a:	d058      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x13a>
 8004d5c:	2b40      	cmp	r3, #64	; 0x40
 8004d5e:	d86f      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d60:	2b30      	cmp	r3, #48	; 0x30
 8004d62:	d064      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x15a>
 8004d64:	2b30      	cmp	r3, #48	; 0x30
 8004d66:	d86b      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d060      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x15a>
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	d867      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d05c      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x15a>
 8004d74:	2b10      	cmp	r3, #16
 8004d76:	d05a      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x15a>
 8004d78:	e062      	b.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	6899      	ldr	r1, [r3, #8]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f000 fb35 	bl	80053f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	609a      	str	r2, [r3, #8]
      break;
 8004da6:	e04f      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6818      	ldr	r0, [r3, #0]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	6899      	ldr	r1, [r3, #8]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f000 fb1e 	bl	80053f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dca:	609a      	str	r2, [r3, #8]
      break;
 8004dcc:	e03c      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6818      	ldr	r0, [r3, #0]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	6859      	ldr	r1, [r3, #4]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f000 fa92 	bl	8005304 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2150      	movs	r1, #80	; 0x50
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 faeb 	bl	80053c2 <TIM_ITRx_SetConfig>
      break;
 8004dec:	e02c      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	6859      	ldr	r1, [r3, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f000 fab1 	bl	8005362 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2160      	movs	r1, #96	; 0x60
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fadb 	bl	80053c2 <TIM_ITRx_SetConfig>
      break;
 8004e0c:	e01c      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	6859      	ldr	r1, [r3, #4]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f000 fa72 	bl	8005304 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2140      	movs	r1, #64	; 0x40
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 facb 	bl	80053c2 <TIM_ITRx_SetConfig>
      break;
 8004e2c:	e00c      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4619      	mov	r1, r3
 8004e38:	4610      	mov	r0, r2
 8004e3a:	f000 fac2 	bl	80053c2 <TIM_ITRx_SetConfig>
      break;
 8004e3e:	e003      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	73fb      	strb	r3, [r7, #15]
      break;
 8004e44:	e000      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a40      	ldr	r2, [pc, #256]	; (8004f78 <TIM_Base_SetConfig+0x114>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d013      	beq.n	8004ea4 <TIM_Base_SetConfig+0x40>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e82:	d00f      	beq.n	8004ea4 <TIM_Base_SetConfig+0x40>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a3d      	ldr	r2, [pc, #244]	; (8004f7c <TIM_Base_SetConfig+0x118>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00b      	beq.n	8004ea4 <TIM_Base_SetConfig+0x40>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a3c      	ldr	r2, [pc, #240]	; (8004f80 <TIM_Base_SetConfig+0x11c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d007      	beq.n	8004ea4 <TIM_Base_SetConfig+0x40>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a3b      	ldr	r2, [pc, #236]	; (8004f84 <TIM_Base_SetConfig+0x120>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d003      	beq.n	8004ea4 <TIM_Base_SetConfig+0x40>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a3a      	ldr	r2, [pc, #232]	; (8004f88 <TIM_Base_SetConfig+0x124>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d108      	bne.n	8004eb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a2f      	ldr	r2, [pc, #188]	; (8004f78 <TIM_Base_SetConfig+0x114>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d02b      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec4:	d027      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a2c      	ldr	r2, [pc, #176]	; (8004f7c <TIM_Base_SetConfig+0x118>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d023      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a2b      	ldr	r2, [pc, #172]	; (8004f80 <TIM_Base_SetConfig+0x11c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d01f      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a2a      	ldr	r2, [pc, #168]	; (8004f84 <TIM_Base_SetConfig+0x120>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d01b      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a29      	ldr	r2, [pc, #164]	; (8004f88 <TIM_Base_SetConfig+0x124>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d017      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a28      	ldr	r2, [pc, #160]	; (8004f8c <TIM_Base_SetConfig+0x128>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d013      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a27      	ldr	r2, [pc, #156]	; (8004f90 <TIM_Base_SetConfig+0x12c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00f      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a26      	ldr	r2, [pc, #152]	; (8004f94 <TIM_Base_SetConfig+0x130>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00b      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a25      	ldr	r2, [pc, #148]	; (8004f98 <TIM_Base_SetConfig+0x134>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d007      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a24      	ldr	r2, [pc, #144]	; (8004f9c <TIM_Base_SetConfig+0x138>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d003      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a23      	ldr	r2, [pc, #140]	; (8004fa0 <TIM_Base_SetConfig+0x13c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d108      	bne.n	8004f28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a0a      	ldr	r2, [pc, #40]	; (8004f78 <TIM_Base_SetConfig+0x114>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d003      	beq.n	8004f5c <TIM_Base_SetConfig+0xf8>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a0c      	ldr	r2, [pc, #48]	; (8004f88 <TIM_Base_SetConfig+0x124>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d103      	bne.n	8004f64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	691a      	ldr	r2, [r3, #16]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	615a      	str	r2, [r3, #20]
}
 8004f6a:	bf00      	nop
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40010000 	.word	0x40010000
 8004f7c:	40000400 	.word	0x40000400
 8004f80:	40000800 	.word	0x40000800
 8004f84:	40000c00 	.word	0x40000c00
 8004f88:	40010400 	.word	0x40010400
 8004f8c:	40014000 	.word	0x40014000
 8004f90:	40014400 	.word	0x40014400
 8004f94:	40014800 	.word	0x40014800
 8004f98:	40001800 	.word	0x40001800
 8004f9c:	40001c00 	.word	0x40001c00
 8004fa0:	40002000 	.word	0x40002000

08004fa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	f023 0201 	bic.w	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0303 	bic.w	r3, r3, #3
 8004fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f023 0302 	bic.w	r3, r3, #2
 8004fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a20      	ldr	r2, [pc, #128]	; (800507c <TIM_OC1_SetConfig+0xd8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d003      	beq.n	8005008 <TIM_OC1_SetConfig+0x64>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a1f      	ldr	r2, [pc, #124]	; (8005080 <TIM_OC1_SetConfig+0xdc>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d10c      	bne.n	8005022 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f023 0308 	bic.w	r3, r3, #8
 800500e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	4313      	orrs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f023 0304 	bic.w	r3, r3, #4
 8005020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a15      	ldr	r2, [pc, #84]	; (800507c <TIM_OC1_SetConfig+0xd8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d003      	beq.n	8005032 <TIM_OC1_SetConfig+0x8e>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a14      	ldr	r2, [pc, #80]	; (8005080 <TIM_OC1_SetConfig+0xdc>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d111      	bne.n	8005056 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	621a      	str	r2, [r3, #32]
}
 8005070:	bf00      	nop
 8005072:	371c      	adds	r7, #28
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	40010000 	.word	0x40010000
 8005080:	40010400 	.word	0x40010400

08005084 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	f023 0210 	bic.w	r2, r3, #16
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	021b      	lsls	r3, r3, #8
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f023 0320 	bic.w	r3, r3, #32
 80050ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	4313      	orrs	r3, r2
 80050da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a22      	ldr	r2, [pc, #136]	; (8005168 <TIM_OC2_SetConfig+0xe4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_OC2_SetConfig+0x68>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a21      	ldr	r2, [pc, #132]	; (800516c <TIM_OC2_SetConfig+0xe8>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d10d      	bne.n	8005108 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005106:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a17      	ldr	r2, [pc, #92]	; (8005168 <TIM_OC2_SetConfig+0xe4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d003      	beq.n	8005118 <TIM_OC2_SetConfig+0x94>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a16      	ldr	r2, [pc, #88]	; (800516c <TIM_OC2_SetConfig+0xe8>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d113      	bne.n	8005140 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800511e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005126:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	4313      	orrs	r3, r2
 8005132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	621a      	str	r2, [r3, #32]
}
 800515a:	bf00      	nop
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40010000 	.word	0x40010000
 800516c:	40010400 	.word	0x40010400

08005170 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 0303 	bic.w	r3, r3, #3
 80051a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	021b      	lsls	r3, r3, #8
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a21      	ldr	r2, [pc, #132]	; (8005250 <TIM_OC3_SetConfig+0xe0>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d003      	beq.n	80051d6 <TIM_OC3_SetConfig+0x66>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a20      	ldr	r2, [pc, #128]	; (8005254 <TIM_OC3_SetConfig+0xe4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d10d      	bne.n	80051f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	021b      	lsls	r3, r3, #8
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a16      	ldr	r2, [pc, #88]	; (8005250 <TIM_OC3_SetConfig+0xe0>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d003      	beq.n	8005202 <TIM_OC3_SetConfig+0x92>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a15      	ldr	r2, [pc, #84]	; (8005254 <TIM_OC3_SetConfig+0xe4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d113      	bne.n	800522a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	4313      	orrs	r3, r2
 800521c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	621a      	str	r2, [r3, #32]
}
 8005244:	bf00      	nop
 8005246:	371c      	adds	r7, #28
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	40010000 	.word	0x40010000
 8005254:	40010400 	.word	0x40010400

08005258 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	021b      	lsls	r3, r3, #8
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	031b      	lsls	r3, r3, #12
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a12      	ldr	r2, [pc, #72]	; (80052fc <TIM_OC4_SetConfig+0xa4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_OC4_SetConfig+0x68>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a11      	ldr	r2, [pc, #68]	; (8005300 <TIM_OC4_SetConfig+0xa8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d109      	bne.n	80052d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	019b      	lsls	r3, r3, #6
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	621a      	str	r2, [r3, #32]
}
 80052ee:	bf00      	nop
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	40010000 	.word	0x40010000
 8005300:	40010400 	.word	0x40010400

08005304 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	f023 0201 	bic.w	r2, r3, #1
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800532e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f023 030a 	bic.w	r3, r3, #10
 8005340:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	4313      	orrs	r3, r2
 8005348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	621a      	str	r2, [r3, #32]
}
 8005356:	bf00      	nop
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005362:	b480      	push	{r7}
 8005364:	b087      	sub	sp, #28
 8005366:	af00      	add	r7, sp, #0
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	f023 0210 	bic.w	r2, r3, #16
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800538c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	031b      	lsls	r3, r3, #12
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	4313      	orrs	r3, r2
 8005396:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800539e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	011b      	lsls	r3, r3, #4
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	621a      	str	r2, [r3, #32]
}
 80053b6:	bf00      	nop
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b085      	sub	sp, #20
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4313      	orrs	r3, r2
 80053e0:	f043 0307 	orr.w	r3, r3, #7
 80053e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	609a      	str	r2, [r3, #8]
}
 80053ec:	bf00      	nop
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
 8005404:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005412:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	021a      	lsls	r2, r3, #8
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	431a      	orrs	r2, r3
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	4313      	orrs	r3, r2
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	4313      	orrs	r3, r2
 8005424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	609a      	str	r2, [r3, #8]
}
 800542c:	bf00      	nop
 800542e:	371c      	adds	r7, #28
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f003 031f 	and.w	r3, r3, #31
 800544a:	2201      	movs	r2, #1
 800544c:	fa02 f303 	lsl.w	r3, r2, r3
 8005450:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6a1a      	ldr	r2, [r3, #32]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	43db      	mvns	r3, r3
 800545a:	401a      	ands	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a1a      	ldr	r2, [r3, #32]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f003 031f 	and.w	r3, r3, #31
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	fa01 f303 	lsl.w	r3, r1, r3
 8005470:	431a      	orrs	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	621a      	str	r2, [r3, #32]
}
 8005476:	bf00      	nop
 8005478:	371c      	adds	r7, #28
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
	...

08005484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005498:	2302      	movs	r3, #2
 800549a:	e05a      	b.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a21      	ldr	r2, [pc, #132]	; (8005560 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d022      	beq.n	8005526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e8:	d01d      	beq.n	8005526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a1d      	ldr	r2, [pc, #116]	; (8005564 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d018      	beq.n	8005526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a1b      	ldr	r2, [pc, #108]	; (8005568 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d013      	beq.n	8005526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a1a      	ldr	r2, [pc, #104]	; (800556c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00e      	beq.n	8005526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a18      	ldr	r2, [pc, #96]	; (8005570 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d009      	beq.n	8005526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a17      	ldr	r2, [pc, #92]	; (8005574 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d004      	beq.n	8005526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a15      	ldr	r2, [pc, #84]	; (8005578 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d10c      	bne.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800552c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	4313      	orrs	r3, r2
 8005536:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40010000 	.word	0x40010000
 8005564:	40000400 	.word	0x40000400
 8005568:	40000800 	.word	0x40000800
 800556c:	40000c00 	.word	0x40000c00
 8005570:	40010400 	.word	0x40010400
 8005574:	40014000 	.word	0x40014000
 8005578:	40001800 	.word	0x40001800

0800557c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e03f      	b.n	800560e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7fc f966 	bl	8001874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2224      	movs	r2, #36	; 0x24
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f929 	bl	8005818 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	691a      	ldr	r2, [r3, #16]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695a      	ldr	r2, [r3, #20]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2220      	movs	r2, #32
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b08a      	sub	sp, #40	; 0x28
 800561a:	af02      	add	r7, sp, #8
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	603b      	str	r3, [r7, #0]
 8005622:	4613      	mov	r3, r2
 8005624:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b20      	cmp	r3, #32
 8005634:	d17c      	bne.n	8005730 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <HAL_UART_Transmit+0x2c>
 800563c:	88fb      	ldrh	r3, [r7, #6]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e075      	b.n	8005732 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_UART_Transmit+0x3e>
 8005650:	2302      	movs	r3, #2
 8005652:	e06e      	b.n	8005732 <HAL_UART_Transmit+0x11c>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2221      	movs	r2, #33	; 0x21
 8005666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800566a:	f7fc faf7 	bl	8001c5c <HAL_GetTick>
 800566e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	88fa      	ldrh	r2, [r7, #6]
 8005674:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	88fa      	ldrh	r2, [r7, #6]
 800567a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005684:	d108      	bne.n	8005698 <HAL_UART_Transmit+0x82>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d104      	bne.n	8005698 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800568e:	2300      	movs	r3, #0
 8005690:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	61bb      	str	r3, [r7, #24]
 8005696:	e003      	b.n	80056a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800569c:	2300      	movs	r3, #0
 800569e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80056a8:	e02a      	b.n	8005700 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2200      	movs	r2, #0
 80056b2:	2180      	movs	r1, #128	; 0x80
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 f840 	bl	800573a <UART_WaitOnFlagUntilTimeout>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e036      	b.n	8005732 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10b      	bne.n	80056e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	3302      	adds	r3, #2
 80056de:	61bb      	str	r3, [r7, #24]
 80056e0:	e007      	b.n	80056f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	781a      	ldrb	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	3301      	adds	r3, #1
 80056f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	3b01      	subs	r3, #1
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005704:	b29b      	uxth	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1cf      	bne.n	80056aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2200      	movs	r2, #0
 8005712:	2140      	movs	r1, #64	; 0x40
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f810 	bl	800573a <UART_WaitOnFlagUntilTimeout>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e006      	b.n	8005732 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800572c:	2300      	movs	r3, #0
 800572e:	e000      	b.n	8005732 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005730:	2302      	movs	r3, #2
  }
}
 8005732:	4618      	mov	r0, r3
 8005734:	3720      	adds	r7, #32
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b090      	sub	sp, #64	; 0x40
 800573e:	af00      	add	r7, sp, #0
 8005740:	60f8      	str	r0, [r7, #12]
 8005742:	60b9      	str	r1, [r7, #8]
 8005744:	603b      	str	r3, [r7, #0]
 8005746:	4613      	mov	r3, r2
 8005748:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800574a:	e050      	b.n	80057ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800574c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800574e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005752:	d04c      	beq.n	80057ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005756:	2b00      	cmp	r3, #0
 8005758:	d007      	beq.n	800576a <UART_WaitOnFlagUntilTimeout+0x30>
 800575a:	f7fc fa7f 	bl	8001c5c <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005766:	429a      	cmp	r2, r3
 8005768:	d241      	bcs.n	80057ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	330c      	adds	r3, #12
 8005770:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005774:	e853 3f00 	ldrex	r3, [r3]
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	330c      	adds	r3, #12
 8005788:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800578a:	637a      	str	r2, [r7, #52]	; 0x34
 800578c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005790:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005792:	e841 2300 	strex	r3, r2, [r1]
 8005796:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1e5      	bne.n	800576a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	3314      	adds	r3, #20
 80057a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	613b      	str	r3, [r7, #16]
   return(result);
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f023 0301 	bic.w	r3, r3, #1
 80057b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3314      	adds	r3, #20
 80057bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057be:	623a      	str	r2, [r7, #32]
 80057c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	69f9      	ldr	r1, [r7, #28]
 80057c4:	6a3a      	ldr	r2, [r7, #32]
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e5      	bne.n	800579e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2220      	movs	r2, #32
 80057de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e00f      	b.n	800580e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	4013      	ands	r3, r2
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	bf0c      	ite	eq
 80057fe:	2301      	moveq	r3, #1
 8005800:	2300      	movne	r3, #0
 8005802:	b2db      	uxtb	r3, r3
 8005804:	461a      	mov	r2, r3
 8005806:	79fb      	ldrb	r3, [r7, #7]
 8005808:	429a      	cmp	r2, r3
 800580a:	d09f      	beq.n	800574c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3740      	adds	r7, #64	; 0x40
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800581c:	b0c0      	sub	sp, #256	; 0x100
 800581e:	af00      	add	r7, sp, #0
 8005820:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005834:	68d9      	ldr	r1, [r3, #12]
 8005836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	ea40 0301 	orr.w	r3, r0, r1
 8005840:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	431a      	orrs	r2, r3
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	431a      	orrs	r2, r3
 8005858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005870:	f021 010c 	bic.w	r1, r1, #12
 8005874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800587e:	430b      	orrs	r3, r1
 8005880:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800588e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005892:	6999      	ldr	r1, [r3, #24]
 8005894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	ea40 0301 	orr.w	r3, r0, r1
 800589e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	4b8f      	ldr	r3, [pc, #572]	; (8005ae4 <UART_SetConfig+0x2cc>)
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d005      	beq.n	80058b8 <UART_SetConfig+0xa0>
 80058ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	4b8d      	ldr	r3, [pc, #564]	; (8005ae8 <UART_SetConfig+0x2d0>)
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d104      	bne.n	80058c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058b8:	f7fe ffc6 	bl	8004848 <HAL_RCC_GetPCLK2Freq>
 80058bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80058c0:	e003      	b.n	80058ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058c2:	f7fe ffad 	bl	8004820 <HAL_RCC_GetPCLK1Freq>
 80058c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d4:	f040 810c 	bne.w	8005af0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058dc:	2200      	movs	r2, #0
 80058de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80058e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80058ea:	4622      	mov	r2, r4
 80058ec:	462b      	mov	r3, r5
 80058ee:	1891      	adds	r1, r2, r2
 80058f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80058f2:	415b      	adcs	r3, r3
 80058f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80058fa:	4621      	mov	r1, r4
 80058fc:	eb12 0801 	adds.w	r8, r2, r1
 8005900:	4629      	mov	r1, r5
 8005902:	eb43 0901 	adc.w	r9, r3, r1
 8005906:	f04f 0200 	mov.w	r2, #0
 800590a:	f04f 0300 	mov.w	r3, #0
 800590e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005912:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005916:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800591a:	4690      	mov	r8, r2
 800591c:	4699      	mov	r9, r3
 800591e:	4623      	mov	r3, r4
 8005920:	eb18 0303 	adds.w	r3, r8, r3
 8005924:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005928:	462b      	mov	r3, r5
 800592a:	eb49 0303 	adc.w	r3, r9, r3
 800592e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800593e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005942:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005946:	460b      	mov	r3, r1
 8005948:	18db      	adds	r3, r3, r3
 800594a:	653b      	str	r3, [r7, #80]	; 0x50
 800594c:	4613      	mov	r3, r2
 800594e:	eb42 0303 	adc.w	r3, r2, r3
 8005952:	657b      	str	r3, [r7, #84]	; 0x54
 8005954:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005958:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800595c:	f7fb f876 	bl	8000a4c <__aeabi_uldivmod>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4b61      	ldr	r3, [pc, #388]	; (8005aec <UART_SetConfig+0x2d4>)
 8005966:	fba3 2302 	umull	r2, r3, r3, r2
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	011c      	lsls	r4, r3, #4
 800596e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005972:	2200      	movs	r2, #0
 8005974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005978:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800597c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005980:	4642      	mov	r2, r8
 8005982:	464b      	mov	r3, r9
 8005984:	1891      	adds	r1, r2, r2
 8005986:	64b9      	str	r1, [r7, #72]	; 0x48
 8005988:	415b      	adcs	r3, r3
 800598a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800598c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005990:	4641      	mov	r1, r8
 8005992:	eb12 0a01 	adds.w	sl, r2, r1
 8005996:	4649      	mov	r1, r9
 8005998:	eb43 0b01 	adc.w	fp, r3, r1
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	f04f 0300 	mov.w	r3, #0
 80059a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059b0:	4692      	mov	sl, r2
 80059b2:	469b      	mov	fp, r3
 80059b4:	4643      	mov	r3, r8
 80059b6:	eb1a 0303 	adds.w	r3, sl, r3
 80059ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059be:	464b      	mov	r3, r9
 80059c0:	eb4b 0303 	adc.w	r3, fp, r3
 80059c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80059d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80059dc:	460b      	mov	r3, r1
 80059de:	18db      	adds	r3, r3, r3
 80059e0:	643b      	str	r3, [r7, #64]	; 0x40
 80059e2:	4613      	mov	r3, r2
 80059e4:	eb42 0303 	adc.w	r3, r2, r3
 80059e8:	647b      	str	r3, [r7, #68]	; 0x44
 80059ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80059f2:	f7fb f82b 	bl	8000a4c <__aeabi_uldivmod>
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	4611      	mov	r1, r2
 80059fc:	4b3b      	ldr	r3, [pc, #236]	; (8005aec <UART_SetConfig+0x2d4>)
 80059fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005a02:	095b      	lsrs	r3, r3, #5
 8005a04:	2264      	movs	r2, #100	; 0x64
 8005a06:	fb02 f303 	mul.w	r3, r2, r3
 8005a0a:	1acb      	subs	r3, r1, r3
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a12:	4b36      	ldr	r3, [pc, #216]	; (8005aec <UART_SetConfig+0x2d4>)
 8005a14:	fba3 2302 	umull	r2, r3, r3, r2
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a20:	441c      	add	r4, r3
 8005a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a34:	4642      	mov	r2, r8
 8005a36:	464b      	mov	r3, r9
 8005a38:	1891      	adds	r1, r2, r2
 8005a3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a3c:	415b      	adcs	r3, r3
 8005a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a44:	4641      	mov	r1, r8
 8005a46:	1851      	adds	r1, r2, r1
 8005a48:	6339      	str	r1, [r7, #48]	; 0x30
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	414b      	adcs	r3, r1
 8005a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a5c:	4659      	mov	r1, fp
 8005a5e:	00cb      	lsls	r3, r1, #3
 8005a60:	4651      	mov	r1, sl
 8005a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a66:	4651      	mov	r1, sl
 8005a68:	00ca      	lsls	r2, r1, #3
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4603      	mov	r3, r0
 8005a70:	4642      	mov	r2, r8
 8005a72:	189b      	adds	r3, r3, r2
 8005a74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a78:	464b      	mov	r3, r9
 8005a7a:	460a      	mov	r2, r1
 8005a7c:	eb42 0303 	adc.w	r3, r2, r3
 8005a80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a98:	460b      	mov	r3, r1
 8005a9a:	18db      	adds	r3, r3, r3
 8005a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	eb42 0303 	adc.w	r3, r2, r3
 8005aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005aaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005aae:	f7fa ffcd 	bl	8000a4c <__aeabi_uldivmod>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4b0d      	ldr	r3, [pc, #52]	; (8005aec <UART_SetConfig+0x2d4>)
 8005ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8005abc:	095b      	lsrs	r3, r3, #5
 8005abe:	2164      	movs	r1, #100	; 0x64
 8005ac0:	fb01 f303 	mul.w	r3, r1, r3
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	3332      	adds	r3, #50	; 0x32
 8005aca:	4a08      	ldr	r2, [pc, #32]	; (8005aec <UART_SetConfig+0x2d4>)
 8005acc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad0:	095b      	lsrs	r3, r3, #5
 8005ad2:	f003 0207 	and.w	r2, r3, #7
 8005ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4422      	add	r2, r4
 8005ade:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ae0:	e105      	b.n	8005cee <UART_SetConfig+0x4d6>
 8005ae2:	bf00      	nop
 8005ae4:	40011000 	.word	0x40011000
 8005ae8:	40011400 	.word	0x40011400
 8005aec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005af4:	2200      	movs	r2, #0
 8005af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005afa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005afe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b02:	4642      	mov	r2, r8
 8005b04:	464b      	mov	r3, r9
 8005b06:	1891      	adds	r1, r2, r2
 8005b08:	6239      	str	r1, [r7, #32]
 8005b0a:	415b      	adcs	r3, r3
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b12:	4641      	mov	r1, r8
 8005b14:	1854      	adds	r4, r2, r1
 8005b16:	4649      	mov	r1, r9
 8005b18:	eb43 0501 	adc.w	r5, r3, r1
 8005b1c:	f04f 0200 	mov.w	r2, #0
 8005b20:	f04f 0300 	mov.w	r3, #0
 8005b24:	00eb      	lsls	r3, r5, #3
 8005b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b2a:	00e2      	lsls	r2, r4, #3
 8005b2c:	4614      	mov	r4, r2
 8005b2e:	461d      	mov	r5, r3
 8005b30:	4643      	mov	r3, r8
 8005b32:	18e3      	adds	r3, r4, r3
 8005b34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b38:	464b      	mov	r3, r9
 8005b3a:	eb45 0303 	adc.w	r3, r5, r3
 8005b3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b52:	f04f 0200 	mov.w	r2, #0
 8005b56:	f04f 0300 	mov.w	r3, #0
 8005b5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b5e:	4629      	mov	r1, r5
 8005b60:	008b      	lsls	r3, r1, #2
 8005b62:	4621      	mov	r1, r4
 8005b64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b68:	4621      	mov	r1, r4
 8005b6a:	008a      	lsls	r2, r1, #2
 8005b6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b70:	f7fa ff6c 	bl	8000a4c <__aeabi_uldivmod>
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4b60      	ldr	r3, [pc, #384]	; (8005cfc <UART_SetConfig+0x4e4>)
 8005b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	011c      	lsls	r4, r3, #4
 8005b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b86:	2200      	movs	r2, #0
 8005b88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b94:	4642      	mov	r2, r8
 8005b96:	464b      	mov	r3, r9
 8005b98:	1891      	adds	r1, r2, r2
 8005b9a:	61b9      	str	r1, [r7, #24]
 8005b9c:	415b      	adcs	r3, r3
 8005b9e:	61fb      	str	r3, [r7, #28]
 8005ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ba4:	4641      	mov	r1, r8
 8005ba6:	1851      	adds	r1, r2, r1
 8005ba8:	6139      	str	r1, [r7, #16]
 8005baa:	4649      	mov	r1, r9
 8005bac:	414b      	adcs	r3, r1
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	f04f 0200 	mov.w	r2, #0
 8005bb4:	f04f 0300 	mov.w	r3, #0
 8005bb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bbc:	4659      	mov	r1, fp
 8005bbe:	00cb      	lsls	r3, r1, #3
 8005bc0:	4651      	mov	r1, sl
 8005bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bc6:	4651      	mov	r1, sl
 8005bc8:	00ca      	lsls	r2, r1, #3
 8005bca:	4610      	mov	r0, r2
 8005bcc:	4619      	mov	r1, r3
 8005bce:	4603      	mov	r3, r0
 8005bd0:	4642      	mov	r2, r8
 8005bd2:	189b      	adds	r3, r3, r2
 8005bd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bd8:	464b      	mov	r3, r9
 8005bda:	460a      	mov	r2, r1
 8005bdc:	eb42 0303 	adc.w	r3, r2, r3
 8005be0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	f04f 0300 	mov.w	r3, #0
 8005bf8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005bfc:	4649      	mov	r1, r9
 8005bfe:	008b      	lsls	r3, r1, #2
 8005c00:	4641      	mov	r1, r8
 8005c02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c06:	4641      	mov	r1, r8
 8005c08:	008a      	lsls	r2, r1, #2
 8005c0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c0e:	f7fa ff1d 	bl	8000a4c <__aeabi_uldivmod>
 8005c12:	4602      	mov	r2, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	4b39      	ldr	r3, [pc, #228]	; (8005cfc <UART_SetConfig+0x4e4>)
 8005c18:	fba3 1302 	umull	r1, r3, r3, r2
 8005c1c:	095b      	lsrs	r3, r3, #5
 8005c1e:	2164      	movs	r1, #100	; 0x64
 8005c20:	fb01 f303 	mul.w	r3, r1, r3
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	011b      	lsls	r3, r3, #4
 8005c28:	3332      	adds	r3, #50	; 0x32
 8005c2a:	4a34      	ldr	r2, [pc, #208]	; (8005cfc <UART_SetConfig+0x4e4>)
 8005c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c30:	095b      	lsrs	r3, r3, #5
 8005c32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c36:	441c      	add	r4, r3
 8005c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	673b      	str	r3, [r7, #112]	; 0x70
 8005c40:	677a      	str	r2, [r7, #116]	; 0x74
 8005c42:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c46:	4642      	mov	r2, r8
 8005c48:	464b      	mov	r3, r9
 8005c4a:	1891      	adds	r1, r2, r2
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	415b      	adcs	r3, r3
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c56:	4641      	mov	r1, r8
 8005c58:	1851      	adds	r1, r2, r1
 8005c5a:	6039      	str	r1, [r7, #0]
 8005c5c:	4649      	mov	r1, r9
 8005c5e:	414b      	adcs	r3, r1
 8005c60:	607b      	str	r3, [r7, #4]
 8005c62:	f04f 0200 	mov.w	r2, #0
 8005c66:	f04f 0300 	mov.w	r3, #0
 8005c6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c6e:	4659      	mov	r1, fp
 8005c70:	00cb      	lsls	r3, r1, #3
 8005c72:	4651      	mov	r1, sl
 8005c74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c78:	4651      	mov	r1, sl
 8005c7a:	00ca      	lsls	r2, r1, #3
 8005c7c:	4610      	mov	r0, r2
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4603      	mov	r3, r0
 8005c82:	4642      	mov	r2, r8
 8005c84:	189b      	adds	r3, r3, r2
 8005c86:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c88:	464b      	mov	r3, r9
 8005c8a:	460a      	mov	r2, r1
 8005c8c:	eb42 0303 	adc.w	r3, r2, r3
 8005c90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	663b      	str	r3, [r7, #96]	; 0x60
 8005c9c:	667a      	str	r2, [r7, #100]	; 0x64
 8005c9e:	f04f 0200 	mov.w	r2, #0
 8005ca2:	f04f 0300 	mov.w	r3, #0
 8005ca6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005caa:	4649      	mov	r1, r9
 8005cac:	008b      	lsls	r3, r1, #2
 8005cae:	4641      	mov	r1, r8
 8005cb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cb4:	4641      	mov	r1, r8
 8005cb6:	008a      	lsls	r2, r1, #2
 8005cb8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005cbc:	f7fa fec6 	bl	8000a4c <__aeabi_uldivmod>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	4b0d      	ldr	r3, [pc, #52]	; (8005cfc <UART_SetConfig+0x4e4>)
 8005cc6:	fba3 1302 	umull	r1, r3, r3, r2
 8005cca:	095b      	lsrs	r3, r3, #5
 8005ccc:	2164      	movs	r1, #100	; 0x64
 8005cce:	fb01 f303 	mul.w	r3, r1, r3
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	011b      	lsls	r3, r3, #4
 8005cd6:	3332      	adds	r3, #50	; 0x32
 8005cd8:	4a08      	ldr	r2, [pc, #32]	; (8005cfc <UART_SetConfig+0x4e4>)
 8005cda:	fba2 2303 	umull	r2, r3, r2, r3
 8005cde:	095b      	lsrs	r3, r3, #5
 8005ce0:	f003 020f 	and.w	r2, r3, #15
 8005ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4422      	add	r2, r4
 8005cec:	609a      	str	r2, [r3, #8]
}
 8005cee:	bf00      	nop
 8005cf0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cfa:	bf00      	nop
 8005cfc:	51eb851f 	.word	0x51eb851f

08005d00 <clock>:
 8005d00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d02:	4b08      	ldr	r3, [pc, #32]	; (8005d24 <clock+0x24>)
 8005d04:	4669      	mov	r1, sp
 8005d06:	6818      	ldr	r0, [r3, #0]
 8005d08:	f000 f8ce 	bl	8005ea8 <_times_r>
 8005d0c:	1c43      	adds	r3, r0, #1
 8005d0e:	d006      	beq.n	8005d1e <clock+0x1e>
 8005d10:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005d14:	4418      	add	r0, r3
 8005d16:	9b02      	ldr	r3, [sp, #8]
 8005d18:	4418      	add	r0, r3
 8005d1a:	9b03      	ldr	r3, [sp, #12]
 8005d1c:	4418      	add	r0, r3
 8005d1e:	b005      	add	sp, #20
 8005d20:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d24:	2000002c 	.word	0x2000002c

08005d28 <__errno>:
 8005d28:	4b01      	ldr	r3, [pc, #4]	; (8005d30 <__errno+0x8>)
 8005d2a:	6818      	ldr	r0, [r3, #0]
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	2000002c 	.word	0x2000002c

08005d34 <__libc_init_array>:
 8005d34:	b570      	push	{r4, r5, r6, lr}
 8005d36:	4d0d      	ldr	r5, [pc, #52]	; (8005d6c <__libc_init_array+0x38>)
 8005d38:	4c0d      	ldr	r4, [pc, #52]	; (8005d70 <__libc_init_array+0x3c>)
 8005d3a:	1b64      	subs	r4, r4, r5
 8005d3c:	10a4      	asrs	r4, r4, #2
 8005d3e:	2600      	movs	r6, #0
 8005d40:	42a6      	cmp	r6, r4
 8005d42:	d109      	bne.n	8005d58 <__libc_init_array+0x24>
 8005d44:	4d0b      	ldr	r5, [pc, #44]	; (8005d74 <__libc_init_array+0x40>)
 8005d46:	4c0c      	ldr	r4, [pc, #48]	; (8005d78 <__libc_init_array+0x44>)
 8005d48:	f001 f828 	bl	8006d9c <_init>
 8005d4c:	1b64      	subs	r4, r4, r5
 8005d4e:	10a4      	asrs	r4, r4, #2
 8005d50:	2600      	movs	r6, #0
 8005d52:	42a6      	cmp	r6, r4
 8005d54:	d105      	bne.n	8005d62 <__libc_init_array+0x2e>
 8005d56:	bd70      	pop	{r4, r5, r6, pc}
 8005d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d5c:	4798      	blx	r3
 8005d5e:	3601      	adds	r6, #1
 8005d60:	e7ee      	b.n	8005d40 <__libc_init_array+0xc>
 8005d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d66:	4798      	blx	r3
 8005d68:	3601      	adds	r6, #1
 8005d6a:	e7f2      	b.n	8005d52 <__libc_init_array+0x1e>
 8005d6c:	08006f08 	.word	0x08006f08
 8005d70:	08006f08 	.word	0x08006f08
 8005d74:	08006f08 	.word	0x08006f08
 8005d78:	08006f0c 	.word	0x08006f0c

08005d7c <memset>:
 8005d7c:	4402      	add	r2, r0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d100      	bne.n	8005d86 <memset+0xa>
 8005d84:	4770      	bx	lr
 8005d86:	f803 1b01 	strb.w	r1, [r3], #1
 8005d8a:	e7f9      	b.n	8005d80 <memset+0x4>

08005d8c <iprintf>:
 8005d8c:	b40f      	push	{r0, r1, r2, r3}
 8005d8e:	4b0a      	ldr	r3, [pc, #40]	; (8005db8 <iprintf+0x2c>)
 8005d90:	b513      	push	{r0, r1, r4, lr}
 8005d92:	681c      	ldr	r4, [r3, #0]
 8005d94:	b124      	cbz	r4, 8005da0 <iprintf+0x14>
 8005d96:	69a3      	ldr	r3, [r4, #24]
 8005d98:	b913      	cbnz	r3, 8005da0 <iprintf+0x14>
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f000 fa62 	bl	8006264 <__sinit>
 8005da0:	ab05      	add	r3, sp, #20
 8005da2:	9a04      	ldr	r2, [sp, #16]
 8005da4:	68a1      	ldr	r1, [r4, #8]
 8005da6:	9301      	str	r3, [sp, #4]
 8005da8:	4620      	mov	r0, r4
 8005daa:	f000 fc6b 	bl	8006684 <_vfiprintf_r>
 8005dae:	b002      	add	sp, #8
 8005db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005db4:	b004      	add	sp, #16
 8005db6:	4770      	bx	lr
 8005db8:	2000002c 	.word	0x2000002c

08005dbc <_puts_r>:
 8005dbc:	b570      	push	{r4, r5, r6, lr}
 8005dbe:	460e      	mov	r6, r1
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	b118      	cbz	r0, 8005dcc <_puts_r+0x10>
 8005dc4:	6983      	ldr	r3, [r0, #24]
 8005dc6:	b90b      	cbnz	r3, 8005dcc <_puts_r+0x10>
 8005dc8:	f000 fa4c 	bl	8006264 <__sinit>
 8005dcc:	69ab      	ldr	r3, [r5, #24]
 8005dce:	68ac      	ldr	r4, [r5, #8]
 8005dd0:	b913      	cbnz	r3, 8005dd8 <_puts_r+0x1c>
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	f000 fa46 	bl	8006264 <__sinit>
 8005dd8:	4b2c      	ldr	r3, [pc, #176]	; (8005e8c <_puts_r+0xd0>)
 8005dda:	429c      	cmp	r4, r3
 8005ddc:	d120      	bne.n	8005e20 <_puts_r+0x64>
 8005dde:	686c      	ldr	r4, [r5, #4]
 8005de0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005de2:	07db      	lsls	r3, r3, #31
 8005de4:	d405      	bmi.n	8005df2 <_puts_r+0x36>
 8005de6:	89a3      	ldrh	r3, [r4, #12]
 8005de8:	0598      	lsls	r0, r3, #22
 8005dea:	d402      	bmi.n	8005df2 <_puts_r+0x36>
 8005dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dee:	f000 fad7 	bl	80063a0 <__retarget_lock_acquire_recursive>
 8005df2:	89a3      	ldrh	r3, [r4, #12]
 8005df4:	0719      	lsls	r1, r3, #28
 8005df6:	d51d      	bpl.n	8005e34 <_puts_r+0x78>
 8005df8:	6923      	ldr	r3, [r4, #16]
 8005dfa:	b1db      	cbz	r3, 8005e34 <_puts_r+0x78>
 8005dfc:	3e01      	subs	r6, #1
 8005dfe:	68a3      	ldr	r3, [r4, #8]
 8005e00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e04:	3b01      	subs	r3, #1
 8005e06:	60a3      	str	r3, [r4, #8]
 8005e08:	bb39      	cbnz	r1, 8005e5a <_puts_r+0x9e>
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	da38      	bge.n	8005e80 <_puts_r+0xc4>
 8005e0e:	4622      	mov	r2, r4
 8005e10:	210a      	movs	r1, #10
 8005e12:	4628      	mov	r0, r5
 8005e14:	f000 f84c 	bl	8005eb0 <__swbuf_r>
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d011      	beq.n	8005e40 <_puts_r+0x84>
 8005e1c:	250a      	movs	r5, #10
 8005e1e:	e011      	b.n	8005e44 <_puts_r+0x88>
 8005e20:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <_puts_r+0xd4>)
 8005e22:	429c      	cmp	r4, r3
 8005e24:	d101      	bne.n	8005e2a <_puts_r+0x6e>
 8005e26:	68ac      	ldr	r4, [r5, #8]
 8005e28:	e7da      	b.n	8005de0 <_puts_r+0x24>
 8005e2a:	4b1a      	ldr	r3, [pc, #104]	; (8005e94 <_puts_r+0xd8>)
 8005e2c:	429c      	cmp	r4, r3
 8005e2e:	bf08      	it	eq
 8005e30:	68ec      	ldreq	r4, [r5, #12]
 8005e32:	e7d5      	b.n	8005de0 <_puts_r+0x24>
 8005e34:	4621      	mov	r1, r4
 8005e36:	4628      	mov	r0, r5
 8005e38:	f000 f88c 	bl	8005f54 <__swsetup_r>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d0dd      	beq.n	8005dfc <_puts_r+0x40>
 8005e40:	f04f 35ff 	mov.w	r5, #4294967295
 8005e44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e46:	07da      	lsls	r2, r3, #31
 8005e48:	d405      	bmi.n	8005e56 <_puts_r+0x9a>
 8005e4a:	89a3      	ldrh	r3, [r4, #12]
 8005e4c:	059b      	lsls	r3, r3, #22
 8005e4e:	d402      	bmi.n	8005e56 <_puts_r+0x9a>
 8005e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e52:	f000 faa6 	bl	80063a2 <__retarget_lock_release_recursive>
 8005e56:	4628      	mov	r0, r5
 8005e58:	bd70      	pop	{r4, r5, r6, pc}
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	da04      	bge.n	8005e68 <_puts_r+0xac>
 8005e5e:	69a2      	ldr	r2, [r4, #24]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	dc06      	bgt.n	8005e72 <_puts_r+0xb6>
 8005e64:	290a      	cmp	r1, #10
 8005e66:	d004      	beq.n	8005e72 <_puts_r+0xb6>
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	6022      	str	r2, [r4, #0]
 8005e6e:	7019      	strb	r1, [r3, #0]
 8005e70:	e7c5      	b.n	8005dfe <_puts_r+0x42>
 8005e72:	4622      	mov	r2, r4
 8005e74:	4628      	mov	r0, r5
 8005e76:	f000 f81b 	bl	8005eb0 <__swbuf_r>
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	d1bf      	bne.n	8005dfe <_puts_r+0x42>
 8005e7e:	e7df      	b.n	8005e40 <_puts_r+0x84>
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	250a      	movs	r5, #10
 8005e84:	1c5a      	adds	r2, r3, #1
 8005e86:	6022      	str	r2, [r4, #0]
 8005e88:	701d      	strb	r5, [r3, #0]
 8005e8a:	e7db      	b.n	8005e44 <_puts_r+0x88>
 8005e8c:	08006e8c 	.word	0x08006e8c
 8005e90:	08006eac 	.word	0x08006eac
 8005e94:	08006e6c 	.word	0x08006e6c

08005e98 <puts>:
 8005e98:	4b02      	ldr	r3, [pc, #8]	; (8005ea4 <puts+0xc>)
 8005e9a:	4601      	mov	r1, r0
 8005e9c:	6818      	ldr	r0, [r3, #0]
 8005e9e:	f7ff bf8d 	b.w	8005dbc <_puts_r>
 8005ea2:	bf00      	nop
 8005ea4:	2000002c 	.word	0x2000002c

08005ea8 <_times_r>:
 8005ea8:	4608      	mov	r0, r1
 8005eaa:	f7fb bdf2 	b.w	8001a92 <_times>
	...

08005eb0 <__swbuf_r>:
 8005eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb2:	460e      	mov	r6, r1
 8005eb4:	4614      	mov	r4, r2
 8005eb6:	4605      	mov	r5, r0
 8005eb8:	b118      	cbz	r0, 8005ec2 <__swbuf_r+0x12>
 8005eba:	6983      	ldr	r3, [r0, #24]
 8005ebc:	b90b      	cbnz	r3, 8005ec2 <__swbuf_r+0x12>
 8005ebe:	f000 f9d1 	bl	8006264 <__sinit>
 8005ec2:	4b21      	ldr	r3, [pc, #132]	; (8005f48 <__swbuf_r+0x98>)
 8005ec4:	429c      	cmp	r4, r3
 8005ec6:	d12b      	bne.n	8005f20 <__swbuf_r+0x70>
 8005ec8:	686c      	ldr	r4, [r5, #4]
 8005eca:	69a3      	ldr	r3, [r4, #24]
 8005ecc:	60a3      	str	r3, [r4, #8]
 8005ece:	89a3      	ldrh	r3, [r4, #12]
 8005ed0:	071a      	lsls	r2, r3, #28
 8005ed2:	d52f      	bpl.n	8005f34 <__swbuf_r+0x84>
 8005ed4:	6923      	ldr	r3, [r4, #16]
 8005ed6:	b36b      	cbz	r3, 8005f34 <__swbuf_r+0x84>
 8005ed8:	6923      	ldr	r3, [r4, #16]
 8005eda:	6820      	ldr	r0, [r4, #0]
 8005edc:	1ac0      	subs	r0, r0, r3
 8005ede:	6963      	ldr	r3, [r4, #20]
 8005ee0:	b2f6      	uxtb	r6, r6
 8005ee2:	4283      	cmp	r3, r0
 8005ee4:	4637      	mov	r7, r6
 8005ee6:	dc04      	bgt.n	8005ef2 <__swbuf_r+0x42>
 8005ee8:	4621      	mov	r1, r4
 8005eea:	4628      	mov	r0, r5
 8005eec:	f000 f926 	bl	800613c <_fflush_r>
 8005ef0:	bb30      	cbnz	r0, 8005f40 <__swbuf_r+0x90>
 8005ef2:	68a3      	ldr	r3, [r4, #8]
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	60a3      	str	r3, [r4, #8]
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	6022      	str	r2, [r4, #0]
 8005efe:	701e      	strb	r6, [r3, #0]
 8005f00:	6963      	ldr	r3, [r4, #20]
 8005f02:	3001      	adds	r0, #1
 8005f04:	4283      	cmp	r3, r0
 8005f06:	d004      	beq.n	8005f12 <__swbuf_r+0x62>
 8005f08:	89a3      	ldrh	r3, [r4, #12]
 8005f0a:	07db      	lsls	r3, r3, #31
 8005f0c:	d506      	bpl.n	8005f1c <__swbuf_r+0x6c>
 8005f0e:	2e0a      	cmp	r6, #10
 8005f10:	d104      	bne.n	8005f1c <__swbuf_r+0x6c>
 8005f12:	4621      	mov	r1, r4
 8005f14:	4628      	mov	r0, r5
 8005f16:	f000 f911 	bl	800613c <_fflush_r>
 8005f1a:	b988      	cbnz	r0, 8005f40 <__swbuf_r+0x90>
 8005f1c:	4638      	mov	r0, r7
 8005f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f20:	4b0a      	ldr	r3, [pc, #40]	; (8005f4c <__swbuf_r+0x9c>)
 8005f22:	429c      	cmp	r4, r3
 8005f24:	d101      	bne.n	8005f2a <__swbuf_r+0x7a>
 8005f26:	68ac      	ldr	r4, [r5, #8]
 8005f28:	e7cf      	b.n	8005eca <__swbuf_r+0x1a>
 8005f2a:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <__swbuf_r+0xa0>)
 8005f2c:	429c      	cmp	r4, r3
 8005f2e:	bf08      	it	eq
 8005f30:	68ec      	ldreq	r4, [r5, #12]
 8005f32:	e7ca      	b.n	8005eca <__swbuf_r+0x1a>
 8005f34:	4621      	mov	r1, r4
 8005f36:	4628      	mov	r0, r5
 8005f38:	f000 f80c 	bl	8005f54 <__swsetup_r>
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	d0cb      	beq.n	8005ed8 <__swbuf_r+0x28>
 8005f40:	f04f 37ff 	mov.w	r7, #4294967295
 8005f44:	e7ea      	b.n	8005f1c <__swbuf_r+0x6c>
 8005f46:	bf00      	nop
 8005f48:	08006e8c 	.word	0x08006e8c
 8005f4c:	08006eac 	.word	0x08006eac
 8005f50:	08006e6c 	.word	0x08006e6c

08005f54 <__swsetup_r>:
 8005f54:	4b32      	ldr	r3, [pc, #200]	; (8006020 <__swsetup_r+0xcc>)
 8005f56:	b570      	push	{r4, r5, r6, lr}
 8005f58:	681d      	ldr	r5, [r3, #0]
 8005f5a:	4606      	mov	r6, r0
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	b125      	cbz	r5, 8005f6a <__swsetup_r+0x16>
 8005f60:	69ab      	ldr	r3, [r5, #24]
 8005f62:	b913      	cbnz	r3, 8005f6a <__swsetup_r+0x16>
 8005f64:	4628      	mov	r0, r5
 8005f66:	f000 f97d 	bl	8006264 <__sinit>
 8005f6a:	4b2e      	ldr	r3, [pc, #184]	; (8006024 <__swsetup_r+0xd0>)
 8005f6c:	429c      	cmp	r4, r3
 8005f6e:	d10f      	bne.n	8005f90 <__swsetup_r+0x3c>
 8005f70:	686c      	ldr	r4, [r5, #4]
 8005f72:	89a3      	ldrh	r3, [r4, #12]
 8005f74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f78:	0719      	lsls	r1, r3, #28
 8005f7a:	d42c      	bmi.n	8005fd6 <__swsetup_r+0x82>
 8005f7c:	06dd      	lsls	r5, r3, #27
 8005f7e:	d411      	bmi.n	8005fa4 <__swsetup_r+0x50>
 8005f80:	2309      	movs	r3, #9
 8005f82:	6033      	str	r3, [r6, #0]
 8005f84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f88:	81a3      	strh	r3, [r4, #12]
 8005f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8e:	e03e      	b.n	800600e <__swsetup_r+0xba>
 8005f90:	4b25      	ldr	r3, [pc, #148]	; (8006028 <__swsetup_r+0xd4>)
 8005f92:	429c      	cmp	r4, r3
 8005f94:	d101      	bne.n	8005f9a <__swsetup_r+0x46>
 8005f96:	68ac      	ldr	r4, [r5, #8]
 8005f98:	e7eb      	b.n	8005f72 <__swsetup_r+0x1e>
 8005f9a:	4b24      	ldr	r3, [pc, #144]	; (800602c <__swsetup_r+0xd8>)
 8005f9c:	429c      	cmp	r4, r3
 8005f9e:	bf08      	it	eq
 8005fa0:	68ec      	ldreq	r4, [r5, #12]
 8005fa2:	e7e6      	b.n	8005f72 <__swsetup_r+0x1e>
 8005fa4:	0758      	lsls	r0, r3, #29
 8005fa6:	d512      	bpl.n	8005fce <__swsetup_r+0x7a>
 8005fa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005faa:	b141      	cbz	r1, 8005fbe <__swsetup_r+0x6a>
 8005fac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fb0:	4299      	cmp	r1, r3
 8005fb2:	d002      	beq.n	8005fba <__swsetup_r+0x66>
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	f000 fa5b 	bl	8006470 <_free_r>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	6363      	str	r3, [r4, #52]	; 0x34
 8005fbe:	89a3      	ldrh	r3, [r4, #12]
 8005fc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fc4:	81a3      	strh	r3, [r4, #12]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	6063      	str	r3, [r4, #4]
 8005fca:	6923      	ldr	r3, [r4, #16]
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	f043 0308 	orr.w	r3, r3, #8
 8005fd4:	81a3      	strh	r3, [r4, #12]
 8005fd6:	6923      	ldr	r3, [r4, #16]
 8005fd8:	b94b      	cbnz	r3, 8005fee <__swsetup_r+0x9a>
 8005fda:	89a3      	ldrh	r3, [r4, #12]
 8005fdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe4:	d003      	beq.n	8005fee <__swsetup_r+0x9a>
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f000 fa01 	bl	80063f0 <__smakebuf_r>
 8005fee:	89a0      	ldrh	r0, [r4, #12]
 8005ff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ff4:	f010 0301 	ands.w	r3, r0, #1
 8005ff8:	d00a      	beq.n	8006010 <__swsetup_r+0xbc>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60a3      	str	r3, [r4, #8]
 8005ffe:	6963      	ldr	r3, [r4, #20]
 8006000:	425b      	negs	r3, r3
 8006002:	61a3      	str	r3, [r4, #24]
 8006004:	6923      	ldr	r3, [r4, #16]
 8006006:	b943      	cbnz	r3, 800601a <__swsetup_r+0xc6>
 8006008:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800600c:	d1ba      	bne.n	8005f84 <__swsetup_r+0x30>
 800600e:	bd70      	pop	{r4, r5, r6, pc}
 8006010:	0781      	lsls	r1, r0, #30
 8006012:	bf58      	it	pl
 8006014:	6963      	ldrpl	r3, [r4, #20]
 8006016:	60a3      	str	r3, [r4, #8]
 8006018:	e7f4      	b.n	8006004 <__swsetup_r+0xb0>
 800601a:	2000      	movs	r0, #0
 800601c:	e7f7      	b.n	800600e <__swsetup_r+0xba>
 800601e:	bf00      	nop
 8006020:	2000002c 	.word	0x2000002c
 8006024:	08006e8c 	.word	0x08006e8c
 8006028:	08006eac 	.word	0x08006eac
 800602c:	08006e6c 	.word	0x08006e6c

08006030 <__sflush_r>:
 8006030:	898a      	ldrh	r2, [r1, #12]
 8006032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006036:	4605      	mov	r5, r0
 8006038:	0710      	lsls	r0, r2, #28
 800603a:	460c      	mov	r4, r1
 800603c:	d458      	bmi.n	80060f0 <__sflush_r+0xc0>
 800603e:	684b      	ldr	r3, [r1, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	dc05      	bgt.n	8006050 <__sflush_r+0x20>
 8006044:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006046:	2b00      	cmp	r3, #0
 8006048:	dc02      	bgt.n	8006050 <__sflush_r+0x20>
 800604a:	2000      	movs	r0, #0
 800604c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006050:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006052:	2e00      	cmp	r6, #0
 8006054:	d0f9      	beq.n	800604a <__sflush_r+0x1a>
 8006056:	2300      	movs	r3, #0
 8006058:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800605c:	682f      	ldr	r7, [r5, #0]
 800605e:	602b      	str	r3, [r5, #0]
 8006060:	d032      	beq.n	80060c8 <__sflush_r+0x98>
 8006062:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006064:	89a3      	ldrh	r3, [r4, #12]
 8006066:	075a      	lsls	r2, r3, #29
 8006068:	d505      	bpl.n	8006076 <__sflush_r+0x46>
 800606a:	6863      	ldr	r3, [r4, #4]
 800606c:	1ac0      	subs	r0, r0, r3
 800606e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006070:	b10b      	cbz	r3, 8006076 <__sflush_r+0x46>
 8006072:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006074:	1ac0      	subs	r0, r0, r3
 8006076:	2300      	movs	r3, #0
 8006078:	4602      	mov	r2, r0
 800607a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800607c:	6a21      	ldr	r1, [r4, #32]
 800607e:	4628      	mov	r0, r5
 8006080:	47b0      	blx	r6
 8006082:	1c43      	adds	r3, r0, #1
 8006084:	89a3      	ldrh	r3, [r4, #12]
 8006086:	d106      	bne.n	8006096 <__sflush_r+0x66>
 8006088:	6829      	ldr	r1, [r5, #0]
 800608a:	291d      	cmp	r1, #29
 800608c:	d82c      	bhi.n	80060e8 <__sflush_r+0xb8>
 800608e:	4a2a      	ldr	r2, [pc, #168]	; (8006138 <__sflush_r+0x108>)
 8006090:	40ca      	lsrs	r2, r1
 8006092:	07d6      	lsls	r6, r2, #31
 8006094:	d528      	bpl.n	80060e8 <__sflush_r+0xb8>
 8006096:	2200      	movs	r2, #0
 8006098:	6062      	str	r2, [r4, #4]
 800609a:	04d9      	lsls	r1, r3, #19
 800609c:	6922      	ldr	r2, [r4, #16]
 800609e:	6022      	str	r2, [r4, #0]
 80060a0:	d504      	bpl.n	80060ac <__sflush_r+0x7c>
 80060a2:	1c42      	adds	r2, r0, #1
 80060a4:	d101      	bne.n	80060aa <__sflush_r+0x7a>
 80060a6:	682b      	ldr	r3, [r5, #0]
 80060a8:	b903      	cbnz	r3, 80060ac <__sflush_r+0x7c>
 80060aa:	6560      	str	r0, [r4, #84]	; 0x54
 80060ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060ae:	602f      	str	r7, [r5, #0]
 80060b0:	2900      	cmp	r1, #0
 80060b2:	d0ca      	beq.n	800604a <__sflush_r+0x1a>
 80060b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060b8:	4299      	cmp	r1, r3
 80060ba:	d002      	beq.n	80060c2 <__sflush_r+0x92>
 80060bc:	4628      	mov	r0, r5
 80060be:	f000 f9d7 	bl	8006470 <_free_r>
 80060c2:	2000      	movs	r0, #0
 80060c4:	6360      	str	r0, [r4, #52]	; 0x34
 80060c6:	e7c1      	b.n	800604c <__sflush_r+0x1c>
 80060c8:	6a21      	ldr	r1, [r4, #32]
 80060ca:	2301      	movs	r3, #1
 80060cc:	4628      	mov	r0, r5
 80060ce:	47b0      	blx	r6
 80060d0:	1c41      	adds	r1, r0, #1
 80060d2:	d1c7      	bne.n	8006064 <__sflush_r+0x34>
 80060d4:	682b      	ldr	r3, [r5, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0c4      	beq.n	8006064 <__sflush_r+0x34>
 80060da:	2b1d      	cmp	r3, #29
 80060dc:	d001      	beq.n	80060e2 <__sflush_r+0xb2>
 80060de:	2b16      	cmp	r3, #22
 80060e0:	d101      	bne.n	80060e6 <__sflush_r+0xb6>
 80060e2:	602f      	str	r7, [r5, #0]
 80060e4:	e7b1      	b.n	800604a <__sflush_r+0x1a>
 80060e6:	89a3      	ldrh	r3, [r4, #12]
 80060e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ec:	81a3      	strh	r3, [r4, #12]
 80060ee:	e7ad      	b.n	800604c <__sflush_r+0x1c>
 80060f0:	690f      	ldr	r7, [r1, #16]
 80060f2:	2f00      	cmp	r7, #0
 80060f4:	d0a9      	beq.n	800604a <__sflush_r+0x1a>
 80060f6:	0793      	lsls	r3, r2, #30
 80060f8:	680e      	ldr	r6, [r1, #0]
 80060fa:	bf08      	it	eq
 80060fc:	694b      	ldreq	r3, [r1, #20]
 80060fe:	600f      	str	r7, [r1, #0]
 8006100:	bf18      	it	ne
 8006102:	2300      	movne	r3, #0
 8006104:	eba6 0807 	sub.w	r8, r6, r7
 8006108:	608b      	str	r3, [r1, #8]
 800610a:	f1b8 0f00 	cmp.w	r8, #0
 800610e:	dd9c      	ble.n	800604a <__sflush_r+0x1a>
 8006110:	6a21      	ldr	r1, [r4, #32]
 8006112:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006114:	4643      	mov	r3, r8
 8006116:	463a      	mov	r2, r7
 8006118:	4628      	mov	r0, r5
 800611a:	47b0      	blx	r6
 800611c:	2800      	cmp	r0, #0
 800611e:	dc06      	bgt.n	800612e <__sflush_r+0xfe>
 8006120:	89a3      	ldrh	r3, [r4, #12]
 8006122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006126:	81a3      	strh	r3, [r4, #12]
 8006128:	f04f 30ff 	mov.w	r0, #4294967295
 800612c:	e78e      	b.n	800604c <__sflush_r+0x1c>
 800612e:	4407      	add	r7, r0
 8006130:	eba8 0800 	sub.w	r8, r8, r0
 8006134:	e7e9      	b.n	800610a <__sflush_r+0xda>
 8006136:	bf00      	nop
 8006138:	20400001 	.word	0x20400001

0800613c <_fflush_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	690b      	ldr	r3, [r1, #16]
 8006140:	4605      	mov	r5, r0
 8006142:	460c      	mov	r4, r1
 8006144:	b913      	cbnz	r3, 800614c <_fflush_r+0x10>
 8006146:	2500      	movs	r5, #0
 8006148:	4628      	mov	r0, r5
 800614a:	bd38      	pop	{r3, r4, r5, pc}
 800614c:	b118      	cbz	r0, 8006156 <_fflush_r+0x1a>
 800614e:	6983      	ldr	r3, [r0, #24]
 8006150:	b90b      	cbnz	r3, 8006156 <_fflush_r+0x1a>
 8006152:	f000 f887 	bl	8006264 <__sinit>
 8006156:	4b14      	ldr	r3, [pc, #80]	; (80061a8 <_fflush_r+0x6c>)
 8006158:	429c      	cmp	r4, r3
 800615a:	d11b      	bne.n	8006194 <_fflush_r+0x58>
 800615c:	686c      	ldr	r4, [r5, #4]
 800615e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d0ef      	beq.n	8006146 <_fflush_r+0xa>
 8006166:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006168:	07d0      	lsls	r0, r2, #31
 800616a:	d404      	bmi.n	8006176 <_fflush_r+0x3a>
 800616c:	0599      	lsls	r1, r3, #22
 800616e:	d402      	bmi.n	8006176 <_fflush_r+0x3a>
 8006170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006172:	f000 f915 	bl	80063a0 <__retarget_lock_acquire_recursive>
 8006176:	4628      	mov	r0, r5
 8006178:	4621      	mov	r1, r4
 800617a:	f7ff ff59 	bl	8006030 <__sflush_r>
 800617e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006180:	07da      	lsls	r2, r3, #31
 8006182:	4605      	mov	r5, r0
 8006184:	d4e0      	bmi.n	8006148 <_fflush_r+0xc>
 8006186:	89a3      	ldrh	r3, [r4, #12]
 8006188:	059b      	lsls	r3, r3, #22
 800618a:	d4dd      	bmi.n	8006148 <_fflush_r+0xc>
 800618c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800618e:	f000 f908 	bl	80063a2 <__retarget_lock_release_recursive>
 8006192:	e7d9      	b.n	8006148 <_fflush_r+0xc>
 8006194:	4b05      	ldr	r3, [pc, #20]	; (80061ac <_fflush_r+0x70>)
 8006196:	429c      	cmp	r4, r3
 8006198:	d101      	bne.n	800619e <_fflush_r+0x62>
 800619a:	68ac      	ldr	r4, [r5, #8]
 800619c:	e7df      	b.n	800615e <_fflush_r+0x22>
 800619e:	4b04      	ldr	r3, [pc, #16]	; (80061b0 <_fflush_r+0x74>)
 80061a0:	429c      	cmp	r4, r3
 80061a2:	bf08      	it	eq
 80061a4:	68ec      	ldreq	r4, [r5, #12]
 80061a6:	e7da      	b.n	800615e <_fflush_r+0x22>
 80061a8:	08006e8c 	.word	0x08006e8c
 80061ac:	08006eac 	.word	0x08006eac
 80061b0:	08006e6c 	.word	0x08006e6c

080061b4 <std>:
 80061b4:	2300      	movs	r3, #0
 80061b6:	b510      	push	{r4, lr}
 80061b8:	4604      	mov	r4, r0
 80061ba:	e9c0 3300 	strd	r3, r3, [r0]
 80061be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061c2:	6083      	str	r3, [r0, #8]
 80061c4:	8181      	strh	r1, [r0, #12]
 80061c6:	6643      	str	r3, [r0, #100]	; 0x64
 80061c8:	81c2      	strh	r2, [r0, #14]
 80061ca:	6183      	str	r3, [r0, #24]
 80061cc:	4619      	mov	r1, r3
 80061ce:	2208      	movs	r2, #8
 80061d0:	305c      	adds	r0, #92	; 0x5c
 80061d2:	f7ff fdd3 	bl	8005d7c <memset>
 80061d6:	4b05      	ldr	r3, [pc, #20]	; (80061ec <std+0x38>)
 80061d8:	6263      	str	r3, [r4, #36]	; 0x24
 80061da:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <std+0x3c>)
 80061dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80061de:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <std+0x40>)
 80061e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061e2:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <std+0x44>)
 80061e4:	6224      	str	r4, [r4, #32]
 80061e6:	6323      	str	r3, [r4, #48]	; 0x30
 80061e8:	bd10      	pop	{r4, pc}
 80061ea:	bf00      	nop
 80061ec:	08006c2d 	.word	0x08006c2d
 80061f0:	08006c4f 	.word	0x08006c4f
 80061f4:	08006c87 	.word	0x08006c87
 80061f8:	08006cab 	.word	0x08006cab

080061fc <_cleanup_r>:
 80061fc:	4901      	ldr	r1, [pc, #4]	; (8006204 <_cleanup_r+0x8>)
 80061fe:	f000 b8af 	b.w	8006360 <_fwalk_reent>
 8006202:	bf00      	nop
 8006204:	0800613d 	.word	0x0800613d

08006208 <__sfmoreglue>:
 8006208:	b570      	push	{r4, r5, r6, lr}
 800620a:	2268      	movs	r2, #104	; 0x68
 800620c:	1e4d      	subs	r5, r1, #1
 800620e:	4355      	muls	r5, r2
 8006210:	460e      	mov	r6, r1
 8006212:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006216:	f000 f997 	bl	8006548 <_malloc_r>
 800621a:	4604      	mov	r4, r0
 800621c:	b140      	cbz	r0, 8006230 <__sfmoreglue+0x28>
 800621e:	2100      	movs	r1, #0
 8006220:	e9c0 1600 	strd	r1, r6, [r0]
 8006224:	300c      	adds	r0, #12
 8006226:	60a0      	str	r0, [r4, #8]
 8006228:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800622c:	f7ff fda6 	bl	8005d7c <memset>
 8006230:	4620      	mov	r0, r4
 8006232:	bd70      	pop	{r4, r5, r6, pc}

08006234 <__sfp_lock_acquire>:
 8006234:	4801      	ldr	r0, [pc, #4]	; (800623c <__sfp_lock_acquire+0x8>)
 8006236:	f000 b8b3 	b.w	80063a0 <__retarget_lock_acquire_recursive>
 800623a:	bf00      	nop
 800623c:	200002b1 	.word	0x200002b1

08006240 <__sfp_lock_release>:
 8006240:	4801      	ldr	r0, [pc, #4]	; (8006248 <__sfp_lock_release+0x8>)
 8006242:	f000 b8ae 	b.w	80063a2 <__retarget_lock_release_recursive>
 8006246:	bf00      	nop
 8006248:	200002b1 	.word	0x200002b1

0800624c <__sinit_lock_acquire>:
 800624c:	4801      	ldr	r0, [pc, #4]	; (8006254 <__sinit_lock_acquire+0x8>)
 800624e:	f000 b8a7 	b.w	80063a0 <__retarget_lock_acquire_recursive>
 8006252:	bf00      	nop
 8006254:	200002b2 	.word	0x200002b2

08006258 <__sinit_lock_release>:
 8006258:	4801      	ldr	r0, [pc, #4]	; (8006260 <__sinit_lock_release+0x8>)
 800625a:	f000 b8a2 	b.w	80063a2 <__retarget_lock_release_recursive>
 800625e:	bf00      	nop
 8006260:	200002b2 	.word	0x200002b2

08006264 <__sinit>:
 8006264:	b510      	push	{r4, lr}
 8006266:	4604      	mov	r4, r0
 8006268:	f7ff fff0 	bl	800624c <__sinit_lock_acquire>
 800626c:	69a3      	ldr	r3, [r4, #24]
 800626e:	b11b      	cbz	r3, 8006278 <__sinit+0x14>
 8006270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006274:	f7ff bff0 	b.w	8006258 <__sinit_lock_release>
 8006278:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800627c:	6523      	str	r3, [r4, #80]	; 0x50
 800627e:	4b13      	ldr	r3, [pc, #76]	; (80062cc <__sinit+0x68>)
 8006280:	4a13      	ldr	r2, [pc, #76]	; (80062d0 <__sinit+0x6c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	62a2      	str	r2, [r4, #40]	; 0x28
 8006286:	42a3      	cmp	r3, r4
 8006288:	bf04      	itt	eq
 800628a:	2301      	moveq	r3, #1
 800628c:	61a3      	streq	r3, [r4, #24]
 800628e:	4620      	mov	r0, r4
 8006290:	f000 f820 	bl	80062d4 <__sfp>
 8006294:	6060      	str	r0, [r4, #4]
 8006296:	4620      	mov	r0, r4
 8006298:	f000 f81c 	bl	80062d4 <__sfp>
 800629c:	60a0      	str	r0, [r4, #8]
 800629e:	4620      	mov	r0, r4
 80062a0:	f000 f818 	bl	80062d4 <__sfp>
 80062a4:	2200      	movs	r2, #0
 80062a6:	60e0      	str	r0, [r4, #12]
 80062a8:	2104      	movs	r1, #4
 80062aa:	6860      	ldr	r0, [r4, #4]
 80062ac:	f7ff ff82 	bl	80061b4 <std>
 80062b0:	68a0      	ldr	r0, [r4, #8]
 80062b2:	2201      	movs	r2, #1
 80062b4:	2109      	movs	r1, #9
 80062b6:	f7ff ff7d 	bl	80061b4 <std>
 80062ba:	68e0      	ldr	r0, [r4, #12]
 80062bc:	2202      	movs	r2, #2
 80062be:	2112      	movs	r1, #18
 80062c0:	f7ff ff78 	bl	80061b4 <std>
 80062c4:	2301      	movs	r3, #1
 80062c6:	61a3      	str	r3, [r4, #24]
 80062c8:	e7d2      	b.n	8006270 <__sinit+0xc>
 80062ca:	bf00      	nop
 80062cc:	08006e68 	.word	0x08006e68
 80062d0:	080061fd 	.word	0x080061fd

080062d4 <__sfp>:
 80062d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d6:	4607      	mov	r7, r0
 80062d8:	f7ff ffac 	bl	8006234 <__sfp_lock_acquire>
 80062dc:	4b1e      	ldr	r3, [pc, #120]	; (8006358 <__sfp+0x84>)
 80062de:	681e      	ldr	r6, [r3, #0]
 80062e0:	69b3      	ldr	r3, [r6, #24]
 80062e2:	b913      	cbnz	r3, 80062ea <__sfp+0x16>
 80062e4:	4630      	mov	r0, r6
 80062e6:	f7ff ffbd 	bl	8006264 <__sinit>
 80062ea:	3648      	adds	r6, #72	; 0x48
 80062ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	d503      	bpl.n	80062fc <__sfp+0x28>
 80062f4:	6833      	ldr	r3, [r6, #0]
 80062f6:	b30b      	cbz	r3, 800633c <__sfp+0x68>
 80062f8:	6836      	ldr	r6, [r6, #0]
 80062fa:	e7f7      	b.n	80062ec <__sfp+0x18>
 80062fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006300:	b9d5      	cbnz	r5, 8006338 <__sfp+0x64>
 8006302:	4b16      	ldr	r3, [pc, #88]	; (800635c <__sfp+0x88>)
 8006304:	60e3      	str	r3, [r4, #12]
 8006306:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800630a:	6665      	str	r5, [r4, #100]	; 0x64
 800630c:	f000 f847 	bl	800639e <__retarget_lock_init_recursive>
 8006310:	f7ff ff96 	bl	8006240 <__sfp_lock_release>
 8006314:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006318:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800631c:	6025      	str	r5, [r4, #0]
 800631e:	61a5      	str	r5, [r4, #24]
 8006320:	2208      	movs	r2, #8
 8006322:	4629      	mov	r1, r5
 8006324:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006328:	f7ff fd28 	bl	8005d7c <memset>
 800632c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006330:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006334:	4620      	mov	r0, r4
 8006336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006338:	3468      	adds	r4, #104	; 0x68
 800633a:	e7d9      	b.n	80062f0 <__sfp+0x1c>
 800633c:	2104      	movs	r1, #4
 800633e:	4638      	mov	r0, r7
 8006340:	f7ff ff62 	bl	8006208 <__sfmoreglue>
 8006344:	4604      	mov	r4, r0
 8006346:	6030      	str	r0, [r6, #0]
 8006348:	2800      	cmp	r0, #0
 800634a:	d1d5      	bne.n	80062f8 <__sfp+0x24>
 800634c:	f7ff ff78 	bl	8006240 <__sfp_lock_release>
 8006350:	230c      	movs	r3, #12
 8006352:	603b      	str	r3, [r7, #0]
 8006354:	e7ee      	b.n	8006334 <__sfp+0x60>
 8006356:	bf00      	nop
 8006358:	08006e68 	.word	0x08006e68
 800635c:	ffff0001 	.word	0xffff0001

08006360 <_fwalk_reent>:
 8006360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006364:	4606      	mov	r6, r0
 8006366:	4688      	mov	r8, r1
 8006368:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800636c:	2700      	movs	r7, #0
 800636e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006372:	f1b9 0901 	subs.w	r9, r9, #1
 8006376:	d505      	bpl.n	8006384 <_fwalk_reent+0x24>
 8006378:	6824      	ldr	r4, [r4, #0]
 800637a:	2c00      	cmp	r4, #0
 800637c:	d1f7      	bne.n	800636e <_fwalk_reent+0xe>
 800637e:	4638      	mov	r0, r7
 8006380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006384:	89ab      	ldrh	r3, [r5, #12]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d907      	bls.n	800639a <_fwalk_reent+0x3a>
 800638a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800638e:	3301      	adds	r3, #1
 8006390:	d003      	beq.n	800639a <_fwalk_reent+0x3a>
 8006392:	4629      	mov	r1, r5
 8006394:	4630      	mov	r0, r6
 8006396:	47c0      	blx	r8
 8006398:	4307      	orrs	r7, r0
 800639a:	3568      	adds	r5, #104	; 0x68
 800639c:	e7e9      	b.n	8006372 <_fwalk_reent+0x12>

0800639e <__retarget_lock_init_recursive>:
 800639e:	4770      	bx	lr

080063a0 <__retarget_lock_acquire_recursive>:
 80063a0:	4770      	bx	lr

080063a2 <__retarget_lock_release_recursive>:
 80063a2:	4770      	bx	lr

080063a4 <__swhatbuf_r>:
 80063a4:	b570      	push	{r4, r5, r6, lr}
 80063a6:	460e      	mov	r6, r1
 80063a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ac:	2900      	cmp	r1, #0
 80063ae:	b096      	sub	sp, #88	; 0x58
 80063b0:	4614      	mov	r4, r2
 80063b2:	461d      	mov	r5, r3
 80063b4:	da08      	bge.n	80063c8 <__swhatbuf_r+0x24>
 80063b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	602a      	str	r2, [r5, #0]
 80063be:	061a      	lsls	r2, r3, #24
 80063c0:	d410      	bmi.n	80063e4 <__swhatbuf_r+0x40>
 80063c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063c6:	e00e      	b.n	80063e6 <__swhatbuf_r+0x42>
 80063c8:	466a      	mov	r2, sp
 80063ca:	f000 fc95 	bl	8006cf8 <_fstat_r>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	dbf1      	blt.n	80063b6 <__swhatbuf_r+0x12>
 80063d2:	9a01      	ldr	r2, [sp, #4]
 80063d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80063d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80063dc:	425a      	negs	r2, r3
 80063de:	415a      	adcs	r2, r3
 80063e0:	602a      	str	r2, [r5, #0]
 80063e2:	e7ee      	b.n	80063c2 <__swhatbuf_r+0x1e>
 80063e4:	2340      	movs	r3, #64	; 0x40
 80063e6:	2000      	movs	r0, #0
 80063e8:	6023      	str	r3, [r4, #0]
 80063ea:	b016      	add	sp, #88	; 0x58
 80063ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080063f0 <__smakebuf_r>:
 80063f0:	898b      	ldrh	r3, [r1, #12]
 80063f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063f4:	079d      	lsls	r5, r3, #30
 80063f6:	4606      	mov	r6, r0
 80063f8:	460c      	mov	r4, r1
 80063fa:	d507      	bpl.n	800640c <__smakebuf_r+0x1c>
 80063fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	6123      	str	r3, [r4, #16]
 8006404:	2301      	movs	r3, #1
 8006406:	6163      	str	r3, [r4, #20]
 8006408:	b002      	add	sp, #8
 800640a:	bd70      	pop	{r4, r5, r6, pc}
 800640c:	ab01      	add	r3, sp, #4
 800640e:	466a      	mov	r2, sp
 8006410:	f7ff ffc8 	bl	80063a4 <__swhatbuf_r>
 8006414:	9900      	ldr	r1, [sp, #0]
 8006416:	4605      	mov	r5, r0
 8006418:	4630      	mov	r0, r6
 800641a:	f000 f895 	bl	8006548 <_malloc_r>
 800641e:	b948      	cbnz	r0, 8006434 <__smakebuf_r+0x44>
 8006420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006424:	059a      	lsls	r2, r3, #22
 8006426:	d4ef      	bmi.n	8006408 <__smakebuf_r+0x18>
 8006428:	f023 0303 	bic.w	r3, r3, #3
 800642c:	f043 0302 	orr.w	r3, r3, #2
 8006430:	81a3      	strh	r3, [r4, #12]
 8006432:	e7e3      	b.n	80063fc <__smakebuf_r+0xc>
 8006434:	4b0d      	ldr	r3, [pc, #52]	; (800646c <__smakebuf_r+0x7c>)
 8006436:	62b3      	str	r3, [r6, #40]	; 0x28
 8006438:	89a3      	ldrh	r3, [r4, #12]
 800643a:	6020      	str	r0, [r4, #0]
 800643c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006440:	81a3      	strh	r3, [r4, #12]
 8006442:	9b00      	ldr	r3, [sp, #0]
 8006444:	6163      	str	r3, [r4, #20]
 8006446:	9b01      	ldr	r3, [sp, #4]
 8006448:	6120      	str	r0, [r4, #16]
 800644a:	b15b      	cbz	r3, 8006464 <__smakebuf_r+0x74>
 800644c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006450:	4630      	mov	r0, r6
 8006452:	f000 fc63 	bl	8006d1c <_isatty_r>
 8006456:	b128      	cbz	r0, 8006464 <__smakebuf_r+0x74>
 8006458:	89a3      	ldrh	r3, [r4, #12]
 800645a:	f023 0303 	bic.w	r3, r3, #3
 800645e:	f043 0301 	orr.w	r3, r3, #1
 8006462:	81a3      	strh	r3, [r4, #12]
 8006464:	89a0      	ldrh	r0, [r4, #12]
 8006466:	4305      	orrs	r5, r0
 8006468:	81a5      	strh	r5, [r4, #12]
 800646a:	e7cd      	b.n	8006408 <__smakebuf_r+0x18>
 800646c:	080061fd 	.word	0x080061fd

08006470 <_free_r>:
 8006470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006472:	2900      	cmp	r1, #0
 8006474:	d044      	beq.n	8006500 <_free_r+0x90>
 8006476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800647a:	9001      	str	r0, [sp, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	f1a1 0404 	sub.w	r4, r1, #4
 8006482:	bfb8      	it	lt
 8006484:	18e4      	addlt	r4, r4, r3
 8006486:	f000 fc6b 	bl	8006d60 <__malloc_lock>
 800648a:	4a1e      	ldr	r2, [pc, #120]	; (8006504 <_free_r+0x94>)
 800648c:	9801      	ldr	r0, [sp, #4]
 800648e:	6813      	ldr	r3, [r2, #0]
 8006490:	b933      	cbnz	r3, 80064a0 <_free_r+0x30>
 8006492:	6063      	str	r3, [r4, #4]
 8006494:	6014      	str	r4, [r2, #0]
 8006496:	b003      	add	sp, #12
 8006498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800649c:	f000 bc66 	b.w	8006d6c <__malloc_unlock>
 80064a0:	42a3      	cmp	r3, r4
 80064a2:	d908      	bls.n	80064b6 <_free_r+0x46>
 80064a4:	6825      	ldr	r5, [r4, #0]
 80064a6:	1961      	adds	r1, r4, r5
 80064a8:	428b      	cmp	r3, r1
 80064aa:	bf01      	itttt	eq
 80064ac:	6819      	ldreq	r1, [r3, #0]
 80064ae:	685b      	ldreq	r3, [r3, #4]
 80064b0:	1949      	addeq	r1, r1, r5
 80064b2:	6021      	streq	r1, [r4, #0]
 80064b4:	e7ed      	b.n	8006492 <_free_r+0x22>
 80064b6:	461a      	mov	r2, r3
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	b10b      	cbz	r3, 80064c0 <_free_r+0x50>
 80064bc:	42a3      	cmp	r3, r4
 80064be:	d9fa      	bls.n	80064b6 <_free_r+0x46>
 80064c0:	6811      	ldr	r1, [r2, #0]
 80064c2:	1855      	adds	r5, r2, r1
 80064c4:	42a5      	cmp	r5, r4
 80064c6:	d10b      	bne.n	80064e0 <_free_r+0x70>
 80064c8:	6824      	ldr	r4, [r4, #0]
 80064ca:	4421      	add	r1, r4
 80064cc:	1854      	adds	r4, r2, r1
 80064ce:	42a3      	cmp	r3, r4
 80064d0:	6011      	str	r1, [r2, #0]
 80064d2:	d1e0      	bne.n	8006496 <_free_r+0x26>
 80064d4:	681c      	ldr	r4, [r3, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	6053      	str	r3, [r2, #4]
 80064da:	4421      	add	r1, r4
 80064dc:	6011      	str	r1, [r2, #0]
 80064de:	e7da      	b.n	8006496 <_free_r+0x26>
 80064e0:	d902      	bls.n	80064e8 <_free_r+0x78>
 80064e2:	230c      	movs	r3, #12
 80064e4:	6003      	str	r3, [r0, #0]
 80064e6:	e7d6      	b.n	8006496 <_free_r+0x26>
 80064e8:	6825      	ldr	r5, [r4, #0]
 80064ea:	1961      	adds	r1, r4, r5
 80064ec:	428b      	cmp	r3, r1
 80064ee:	bf04      	itt	eq
 80064f0:	6819      	ldreq	r1, [r3, #0]
 80064f2:	685b      	ldreq	r3, [r3, #4]
 80064f4:	6063      	str	r3, [r4, #4]
 80064f6:	bf04      	itt	eq
 80064f8:	1949      	addeq	r1, r1, r5
 80064fa:	6021      	streq	r1, [r4, #0]
 80064fc:	6054      	str	r4, [r2, #4]
 80064fe:	e7ca      	b.n	8006496 <_free_r+0x26>
 8006500:	b003      	add	sp, #12
 8006502:	bd30      	pop	{r4, r5, pc}
 8006504:	200002b4 	.word	0x200002b4

08006508 <sbrk_aligned>:
 8006508:	b570      	push	{r4, r5, r6, lr}
 800650a:	4e0e      	ldr	r6, [pc, #56]	; (8006544 <sbrk_aligned+0x3c>)
 800650c:	460c      	mov	r4, r1
 800650e:	6831      	ldr	r1, [r6, #0]
 8006510:	4605      	mov	r5, r0
 8006512:	b911      	cbnz	r1, 800651a <sbrk_aligned+0x12>
 8006514:	f000 fb7a 	bl	8006c0c <_sbrk_r>
 8006518:	6030      	str	r0, [r6, #0]
 800651a:	4621      	mov	r1, r4
 800651c:	4628      	mov	r0, r5
 800651e:	f000 fb75 	bl	8006c0c <_sbrk_r>
 8006522:	1c43      	adds	r3, r0, #1
 8006524:	d00a      	beq.n	800653c <sbrk_aligned+0x34>
 8006526:	1cc4      	adds	r4, r0, #3
 8006528:	f024 0403 	bic.w	r4, r4, #3
 800652c:	42a0      	cmp	r0, r4
 800652e:	d007      	beq.n	8006540 <sbrk_aligned+0x38>
 8006530:	1a21      	subs	r1, r4, r0
 8006532:	4628      	mov	r0, r5
 8006534:	f000 fb6a 	bl	8006c0c <_sbrk_r>
 8006538:	3001      	adds	r0, #1
 800653a:	d101      	bne.n	8006540 <sbrk_aligned+0x38>
 800653c:	f04f 34ff 	mov.w	r4, #4294967295
 8006540:	4620      	mov	r0, r4
 8006542:	bd70      	pop	{r4, r5, r6, pc}
 8006544:	200002b8 	.word	0x200002b8

08006548 <_malloc_r>:
 8006548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800654c:	1ccd      	adds	r5, r1, #3
 800654e:	f025 0503 	bic.w	r5, r5, #3
 8006552:	3508      	adds	r5, #8
 8006554:	2d0c      	cmp	r5, #12
 8006556:	bf38      	it	cc
 8006558:	250c      	movcc	r5, #12
 800655a:	2d00      	cmp	r5, #0
 800655c:	4607      	mov	r7, r0
 800655e:	db01      	blt.n	8006564 <_malloc_r+0x1c>
 8006560:	42a9      	cmp	r1, r5
 8006562:	d905      	bls.n	8006570 <_malloc_r+0x28>
 8006564:	230c      	movs	r3, #12
 8006566:	603b      	str	r3, [r7, #0]
 8006568:	2600      	movs	r6, #0
 800656a:	4630      	mov	r0, r6
 800656c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006570:	4e2e      	ldr	r6, [pc, #184]	; (800662c <_malloc_r+0xe4>)
 8006572:	f000 fbf5 	bl	8006d60 <__malloc_lock>
 8006576:	6833      	ldr	r3, [r6, #0]
 8006578:	461c      	mov	r4, r3
 800657a:	bb34      	cbnz	r4, 80065ca <_malloc_r+0x82>
 800657c:	4629      	mov	r1, r5
 800657e:	4638      	mov	r0, r7
 8006580:	f7ff ffc2 	bl	8006508 <sbrk_aligned>
 8006584:	1c43      	adds	r3, r0, #1
 8006586:	4604      	mov	r4, r0
 8006588:	d14d      	bne.n	8006626 <_malloc_r+0xde>
 800658a:	6834      	ldr	r4, [r6, #0]
 800658c:	4626      	mov	r6, r4
 800658e:	2e00      	cmp	r6, #0
 8006590:	d140      	bne.n	8006614 <_malloc_r+0xcc>
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	4631      	mov	r1, r6
 8006596:	4638      	mov	r0, r7
 8006598:	eb04 0803 	add.w	r8, r4, r3
 800659c:	f000 fb36 	bl	8006c0c <_sbrk_r>
 80065a0:	4580      	cmp	r8, r0
 80065a2:	d13a      	bne.n	800661a <_malloc_r+0xd2>
 80065a4:	6821      	ldr	r1, [r4, #0]
 80065a6:	3503      	adds	r5, #3
 80065a8:	1a6d      	subs	r5, r5, r1
 80065aa:	f025 0503 	bic.w	r5, r5, #3
 80065ae:	3508      	adds	r5, #8
 80065b0:	2d0c      	cmp	r5, #12
 80065b2:	bf38      	it	cc
 80065b4:	250c      	movcc	r5, #12
 80065b6:	4629      	mov	r1, r5
 80065b8:	4638      	mov	r0, r7
 80065ba:	f7ff ffa5 	bl	8006508 <sbrk_aligned>
 80065be:	3001      	adds	r0, #1
 80065c0:	d02b      	beq.n	800661a <_malloc_r+0xd2>
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	442b      	add	r3, r5
 80065c6:	6023      	str	r3, [r4, #0]
 80065c8:	e00e      	b.n	80065e8 <_malloc_r+0xa0>
 80065ca:	6822      	ldr	r2, [r4, #0]
 80065cc:	1b52      	subs	r2, r2, r5
 80065ce:	d41e      	bmi.n	800660e <_malloc_r+0xc6>
 80065d0:	2a0b      	cmp	r2, #11
 80065d2:	d916      	bls.n	8006602 <_malloc_r+0xba>
 80065d4:	1961      	adds	r1, r4, r5
 80065d6:	42a3      	cmp	r3, r4
 80065d8:	6025      	str	r5, [r4, #0]
 80065da:	bf18      	it	ne
 80065dc:	6059      	strne	r1, [r3, #4]
 80065de:	6863      	ldr	r3, [r4, #4]
 80065e0:	bf08      	it	eq
 80065e2:	6031      	streq	r1, [r6, #0]
 80065e4:	5162      	str	r2, [r4, r5]
 80065e6:	604b      	str	r3, [r1, #4]
 80065e8:	4638      	mov	r0, r7
 80065ea:	f104 060b 	add.w	r6, r4, #11
 80065ee:	f000 fbbd 	bl	8006d6c <__malloc_unlock>
 80065f2:	f026 0607 	bic.w	r6, r6, #7
 80065f6:	1d23      	adds	r3, r4, #4
 80065f8:	1af2      	subs	r2, r6, r3
 80065fa:	d0b6      	beq.n	800656a <_malloc_r+0x22>
 80065fc:	1b9b      	subs	r3, r3, r6
 80065fe:	50a3      	str	r3, [r4, r2]
 8006600:	e7b3      	b.n	800656a <_malloc_r+0x22>
 8006602:	6862      	ldr	r2, [r4, #4]
 8006604:	42a3      	cmp	r3, r4
 8006606:	bf0c      	ite	eq
 8006608:	6032      	streq	r2, [r6, #0]
 800660a:	605a      	strne	r2, [r3, #4]
 800660c:	e7ec      	b.n	80065e8 <_malloc_r+0xa0>
 800660e:	4623      	mov	r3, r4
 8006610:	6864      	ldr	r4, [r4, #4]
 8006612:	e7b2      	b.n	800657a <_malloc_r+0x32>
 8006614:	4634      	mov	r4, r6
 8006616:	6876      	ldr	r6, [r6, #4]
 8006618:	e7b9      	b.n	800658e <_malloc_r+0x46>
 800661a:	230c      	movs	r3, #12
 800661c:	603b      	str	r3, [r7, #0]
 800661e:	4638      	mov	r0, r7
 8006620:	f000 fba4 	bl	8006d6c <__malloc_unlock>
 8006624:	e7a1      	b.n	800656a <_malloc_r+0x22>
 8006626:	6025      	str	r5, [r4, #0]
 8006628:	e7de      	b.n	80065e8 <_malloc_r+0xa0>
 800662a:	bf00      	nop
 800662c:	200002b4 	.word	0x200002b4

08006630 <__sfputc_r>:
 8006630:	6893      	ldr	r3, [r2, #8]
 8006632:	3b01      	subs	r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	b410      	push	{r4}
 8006638:	6093      	str	r3, [r2, #8]
 800663a:	da08      	bge.n	800664e <__sfputc_r+0x1e>
 800663c:	6994      	ldr	r4, [r2, #24]
 800663e:	42a3      	cmp	r3, r4
 8006640:	db01      	blt.n	8006646 <__sfputc_r+0x16>
 8006642:	290a      	cmp	r1, #10
 8006644:	d103      	bne.n	800664e <__sfputc_r+0x1e>
 8006646:	f85d 4b04 	ldr.w	r4, [sp], #4
 800664a:	f7ff bc31 	b.w	8005eb0 <__swbuf_r>
 800664e:	6813      	ldr	r3, [r2, #0]
 8006650:	1c58      	adds	r0, r3, #1
 8006652:	6010      	str	r0, [r2, #0]
 8006654:	7019      	strb	r1, [r3, #0]
 8006656:	4608      	mov	r0, r1
 8006658:	f85d 4b04 	ldr.w	r4, [sp], #4
 800665c:	4770      	bx	lr

0800665e <__sfputs_r>:
 800665e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006660:	4606      	mov	r6, r0
 8006662:	460f      	mov	r7, r1
 8006664:	4614      	mov	r4, r2
 8006666:	18d5      	adds	r5, r2, r3
 8006668:	42ac      	cmp	r4, r5
 800666a:	d101      	bne.n	8006670 <__sfputs_r+0x12>
 800666c:	2000      	movs	r0, #0
 800666e:	e007      	b.n	8006680 <__sfputs_r+0x22>
 8006670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006674:	463a      	mov	r2, r7
 8006676:	4630      	mov	r0, r6
 8006678:	f7ff ffda 	bl	8006630 <__sfputc_r>
 800667c:	1c43      	adds	r3, r0, #1
 800667e:	d1f3      	bne.n	8006668 <__sfputs_r+0xa>
 8006680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006684 <_vfiprintf_r>:
 8006684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006688:	460d      	mov	r5, r1
 800668a:	b09d      	sub	sp, #116	; 0x74
 800668c:	4614      	mov	r4, r2
 800668e:	4698      	mov	r8, r3
 8006690:	4606      	mov	r6, r0
 8006692:	b118      	cbz	r0, 800669c <_vfiprintf_r+0x18>
 8006694:	6983      	ldr	r3, [r0, #24]
 8006696:	b90b      	cbnz	r3, 800669c <_vfiprintf_r+0x18>
 8006698:	f7ff fde4 	bl	8006264 <__sinit>
 800669c:	4b89      	ldr	r3, [pc, #548]	; (80068c4 <_vfiprintf_r+0x240>)
 800669e:	429d      	cmp	r5, r3
 80066a0:	d11b      	bne.n	80066da <_vfiprintf_r+0x56>
 80066a2:	6875      	ldr	r5, [r6, #4]
 80066a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066a6:	07d9      	lsls	r1, r3, #31
 80066a8:	d405      	bmi.n	80066b6 <_vfiprintf_r+0x32>
 80066aa:	89ab      	ldrh	r3, [r5, #12]
 80066ac:	059a      	lsls	r2, r3, #22
 80066ae:	d402      	bmi.n	80066b6 <_vfiprintf_r+0x32>
 80066b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066b2:	f7ff fe75 	bl	80063a0 <__retarget_lock_acquire_recursive>
 80066b6:	89ab      	ldrh	r3, [r5, #12]
 80066b8:	071b      	lsls	r3, r3, #28
 80066ba:	d501      	bpl.n	80066c0 <_vfiprintf_r+0x3c>
 80066bc:	692b      	ldr	r3, [r5, #16]
 80066be:	b9eb      	cbnz	r3, 80066fc <_vfiprintf_r+0x78>
 80066c0:	4629      	mov	r1, r5
 80066c2:	4630      	mov	r0, r6
 80066c4:	f7ff fc46 	bl	8005f54 <__swsetup_r>
 80066c8:	b1c0      	cbz	r0, 80066fc <_vfiprintf_r+0x78>
 80066ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066cc:	07dc      	lsls	r4, r3, #31
 80066ce:	d50e      	bpl.n	80066ee <_vfiprintf_r+0x6a>
 80066d0:	f04f 30ff 	mov.w	r0, #4294967295
 80066d4:	b01d      	add	sp, #116	; 0x74
 80066d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066da:	4b7b      	ldr	r3, [pc, #492]	; (80068c8 <_vfiprintf_r+0x244>)
 80066dc:	429d      	cmp	r5, r3
 80066de:	d101      	bne.n	80066e4 <_vfiprintf_r+0x60>
 80066e0:	68b5      	ldr	r5, [r6, #8]
 80066e2:	e7df      	b.n	80066a4 <_vfiprintf_r+0x20>
 80066e4:	4b79      	ldr	r3, [pc, #484]	; (80068cc <_vfiprintf_r+0x248>)
 80066e6:	429d      	cmp	r5, r3
 80066e8:	bf08      	it	eq
 80066ea:	68f5      	ldreq	r5, [r6, #12]
 80066ec:	e7da      	b.n	80066a4 <_vfiprintf_r+0x20>
 80066ee:	89ab      	ldrh	r3, [r5, #12]
 80066f0:	0598      	lsls	r0, r3, #22
 80066f2:	d4ed      	bmi.n	80066d0 <_vfiprintf_r+0x4c>
 80066f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066f6:	f7ff fe54 	bl	80063a2 <__retarget_lock_release_recursive>
 80066fa:	e7e9      	b.n	80066d0 <_vfiprintf_r+0x4c>
 80066fc:	2300      	movs	r3, #0
 80066fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006700:	2320      	movs	r3, #32
 8006702:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006706:	f8cd 800c 	str.w	r8, [sp, #12]
 800670a:	2330      	movs	r3, #48	; 0x30
 800670c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80068d0 <_vfiprintf_r+0x24c>
 8006710:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006714:	f04f 0901 	mov.w	r9, #1
 8006718:	4623      	mov	r3, r4
 800671a:	469a      	mov	sl, r3
 800671c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006720:	b10a      	cbz	r2, 8006726 <_vfiprintf_r+0xa2>
 8006722:	2a25      	cmp	r2, #37	; 0x25
 8006724:	d1f9      	bne.n	800671a <_vfiprintf_r+0x96>
 8006726:	ebba 0b04 	subs.w	fp, sl, r4
 800672a:	d00b      	beq.n	8006744 <_vfiprintf_r+0xc0>
 800672c:	465b      	mov	r3, fp
 800672e:	4622      	mov	r2, r4
 8006730:	4629      	mov	r1, r5
 8006732:	4630      	mov	r0, r6
 8006734:	f7ff ff93 	bl	800665e <__sfputs_r>
 8006738:	3001      	adds	r0, #1
 800673a:	f000 80aa 	beq.w	8006892 <_vfiprintf_r+0x20e>
 800673e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006740:	445a      	add	r2, fp
 8006742:	9209      	str	r2, [sp, #36]	; 0x24
 8006744:	f89a 3000 	ldrb.w	r3, [sl]
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 80a2 	beq.w	8006892 <_vfiprintf_r+0x20e>
 800674e:	2300      	movs	r3, #0
 8006750:	f04f 32ff 	mov.w	r2, #4294967295
 8006754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006758:	f10a 0a01 	add.w	sl, sl, #1
 800675c:	9304      	str	r3, [sp, #16]
 800675e:	9307      	str	r3, [sp, #28]
 8006760:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006764:	931a      	str	r3, [sp, #104]	; 0x68
 8006766:	4654      	mov	r4, sl
 8006768:	2205      	movs	r2, #5
 800676a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800676e:	4858      	ldr	r0, [pc, #352]	; (80068d0 <_vfiprintf_r+0x24c>)
 8006770:	f7f9 fd2e 	bl	80001d0 <memchr>
 8006774:	9a04      	ldr	r2, [sp, #16]
 8006776:	b9d8      	cbnz	r0, 80067b0 <_vfiprintf_r+0x12c>
 8006778:	06d1      	lsls	r1, r2, #27
 800677a:	bf44      	itt	mi
 800677c:	2320      	movmi	r3, #32
 800677e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006782:	0713      	lsls	r3, r2, #28
 8006784:	bf44      	itt	mi
 8006786:	232b      	movmi	r3, #43	; 0x2b
 8006788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800678c:	f89a 3000 	ldrb.w	r3, [sl]
 8006790:	2b2a      	cmp	r3, #42	; 0x2a
 8006792:	d015      	beq.n	80067c0 <_vfiprintf_r+0x13c>
 8006794:	9a07      	ldr	r2, [sp, #28]
 8006796:	4654      	mov	r4, sl
 8006798:	2000      	movs	r0, #0
 800679a:	f04f 0c0a 	mov.w	ip, #10
 800679e:	4621      	mov	r1, r4
 80067a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067a4:	3b30      	subs	r3, #48	; 0x30
 80067a6:	2b09      	cmp	r3, #9
 80067a8:	d94e      	bls.n	8006848 <_vfiprintf_r+0x1c4>
 80067aa:	b1b0      	cbz	r0, 80067da <_vfiprintf_r+0x156>
 80067ac:	9207      	str	r2, [sp, #28]
 80067ae:	e014      	b.n	80067da <_vfiprintf_r+0x156>
 80067b0:	eba0 0308 	sub.w	r3, r0, r8
 80067b4:	fa09 f303 	lsl.w	r3, r9, r3
 80067b8:	4313      	orrs	r3, r2
 80067ba:	9304      	str	r3, [sp, #16]
 80067bc:	46a2      	mov	sl, r4
 80067be:	e7d2      	b.n	8006766 <_vfiprintf_r+0xe2>
 80067c0:	9b03      	ldr	r3, [sp, #12]
 80067c2:	1d19      	adds	r1, r3, #4
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	9103      	str	r1, [sp, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	bfbb      	ittet	lt
 80067cc:	425b      	neglt	r3, r3
 80067ce:	f042 0202 	orrlt.w	r2, r2, #2
 80067d2:	9307      	strge	r3, [sp, #28]
 80067d4:	9307      	strlt	r3, [sp, #28]
 80067d6:	bfb8      	it	lt
 80067d8:	9204      	strlt	r2, [sp, #16]
 80067da:	7823      	ldrb	r3, [r4, #0]
 80067dc:	2b2e      	cmp	r3, #46	; 0x2e
 80067de:	d10c      	bne.n	80067fa <_vfiprintf_r+0x176>
 80067e0:	7863      	ldrb	r3, [r4, #1]
 80067e2:	2b2a      	cmp	r3, #42	; 0x2a
 80067e4:	d135      	bne.n	8006852 <_vfiprintf_r+0x1ce>
 80067e6:	9b03      	ldr	r3, [sp, #12]
 80067e8:	1d1a      	adds	r2, r3, #4
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	9203      	str	r2, [sp, #12]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	bfb8      	it	lt
 80067f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80067f6:	3402      	adds	r4, #2
 80067f8:	9305      	str	r3, [sp, #20]
 80067fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80068e0 <_vfiprintf_r+0x25c>
 80067fe:	7821      	ldrb	r1, [r4, #0]
 8006800:	2203      	movs	r2, #3
 8006802:	4650      	mov	r0, sl
 8006804:	f7f9 fce4 	bl	80001d0 <memchr>
 8006808:	b140      	cbz	r0, 800681c <_vfiprintf_r+0x198>
 800680a:	2340      	movs	r3, #64	; 0x40
 800680c:	eba0 000a 	sub.w	r0, r0, sl
 8006810:	fa03 f000 	lsl.w	r0, r3, r0
 8006814:	9b04      	ldr	r3, [sp, #16]
 8006816:	4303      	orrs	r3, r0
 8006818:	3401      	adds	r4, #1
 800681a:	9304      	str	r3, [sp, #16]
 800681c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006820:	482c      	ldr	r0, [pc, #176]	; (80068d4 <_vfiprintf_r+0x250>)
 8006822:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006826:	2206      	movs	r2, #6
 8006828:	f7f9 fcd2 	bl	80001d0 <memchr>
 800682c:	2800      	cmp	r0, #0
 800682e:	d03f      	beq.n	80068b0 <_vfiprintf_r+0x22c>
 8006830:	4b29      	ldr	r3, [pc, #164]	; (80068d8 <_vfiprintf_r+0x254>)
 8006832:	bb1b      	cbnz	r3, 800687c <_vfiprintf_r+0x1f8>
 8006834:	9b03      	ldr	r3, [sp, #12]
 8006836:	3307      	adds	r3, #7
 8006838:	f023 0307 	bic.w	r3, r3, #7
 800683c:	3308      	adds	r3, #8
 800683e:	9303      	str	r3, [sp, #12]
 8006840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006842:	443b      	add	r3, r7
 8006844:	9309      	str	r3, [sp, #36]	; 0x24
 8006846:	e767      	b.n	8006718 <_vfiprintf_r+0x94>
 8006848:	fb0c 3202 	mla	r2, ip, r2, r3
 800684c:	460c      	mov	r4, r1
 800684e:	2001      	movs	r0, #1
 8006850:	e7a5      	b.n	800679e <_vfiprintf_r+0x11a>
 8006852:	2300      	movs	r3, #0
 8006854:	3401      	adds	r4, #1
 8006856:	9305      	str	r3, [sp, #20]
 8006858:	4619      	mov	r1, r3
 800685a:	f04f 0c0a 	mov.w	ip, #10
 800685e:	4620      	mov	r0, r4
 8006860:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006864:	3a30      	subs	r2, #48	; 0x30
 8006866:	2a09      	cmp	r2, #9
 8006868:	d903      	bls.n	8006872 <_vfiprintf_r+0x1ee>
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0c5      	beq.n	80067fa <_vfiprintf_r+0x176>
 800686e:	9105      	str	r1, [sp, #20]
 8006870:	e7c3      	b.n	80067fa <_vfiprintf_r+0x176>
 8006872:	fb0c 2101 	mla	r1, ip, r1, r2
 8006876:	4604      	mov	r4, r0
 8006878:	2301      	movs	r3, #1
 800687a:	e7f0      	b.n	800685e <_vfiprintf_r+0x1da>
 800687c:	ab03      	add	r3, sp, #12
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	462a      	mov	r2, r5
 8006882:	4b16      	ldr	r3, [pc, #88]	; (80068dc <_vfiprintf_r+0x258>)
 8006884:	a904      	add	r1, sp, #16
 8006886:	4630      	mov	r0, r6
 8006888:	f3af 8000 	nop.w
 800688c:	4607      	mov	r7, r0
 800688e:	1c78      	adds	r0, r7, #1
 8006890:	d1d6      	bne.n	8006840 <_vfiprintf_r+0x1bc>
 8006892:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006894:	07d9      	lsls	r1, r3, #31
 8006896:	d405      	bmi.n	80068a4 <_vfiprintf_r+0x220>
 8006898:	89ab      	ldrh	r3, [r5, #12]
 800689a:	059a      	lsls	r2, r3, #22
 800689c:	d402      	bmi.n	80068a4 <_vfiprintf_r+0x220>
 800689e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068a0:	f7ff fd7f 	bl	80063a2 <__retarget_lock_release_recursive>
 80068a4:	89ab      	ldrh	r3, [r5, #12]
 80068a6:	065b      	lsls	r3, r3, #25
 80068a8:	f53f af12 	bmi.w	80066d0 <_vfiprintf_r+0x4c>
 80068ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068ae:	e711      	b.n	80066d4 <_vfiprintf_r+0x50>
 80068b0:	ab03      	add	r3, sp, #12
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	462a      	mov	r2, r5
 80068b6:	4b09      	ldr	r3, [pc, #36]	; (80068dc <_vfiprintf_r+0x258>)
 80068b8:	a904      	add	r1, sp, #16
 80068ba:	4630      	mov	r0, r6
 80068bc:	f000 f880 	bl	80069c0 <_printf_i>
 80068c0:	e7e4      	b.n	800688c <_vfiprintf_r+0x208>
 80068c2:	bf00      	nop
 80068c4:	08006e8c 	.word	0x08006e8c
 80068c8:	08006eac 	.word	0x08006eac
 80068cc:	08006e6c 	.word	0x08006e6c
 80068d0:	08006ecc 	.word	0x08006ecc
 80068d4:	08006ed6 	.word	0x08006ed6
 80068d8:	00000000 	.word	0x00000000
 80068dc:	0800665f 	.word	0x0800665f
 80068e0:	08006ed2 	.word	0x08006ed2

080068e4 <_printf_common>:
 80068e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e8:	4616      	mov	r6, r2
 80068ea:	4699      	mov	r9, r3
 80068ec:	688a      	ldr	r2, [r1, #8]
 80068ee:	690b      	ldr	r3, [r1, #16]
 80068f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068f4:	4293      	cmp	r3, r2
 80068f6:	bfb8      	it	lt
 80068f8:	4613      	movlt	r3, r2
 80068fa:	6033      	str	r3, [r6, #0]
 80068fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006900:	4607      	mov	r7, r0
 8006902:	460c      	mov	r4, r1
 8006904:	b10a      	cbz	r2, 800690a <_printf_common+0x26>
 8006906:	3301      	adds	r3, #1
 8006908:	6033      	str	r3, [r6, #0]
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	0699      	lsls	r1, r3, #26
 800690e:	bf42      	ittt	mi
 8006910:	6833      	ldrmi	r3, [r6, #0]
 8006912:	3302      	addmi	r3, #2
 8006914:	6033      	strmi	r3, [r6, #0]
 8006916:	6825      	ldr	r5, [r4, #0]
 8006918:	f015 0506 	ands.w	r5, r5, #6
 800691c:	d106      	bne.n	800692c <_printf_common+0x48>
 800691e:	f104 0a19 	add.w	sl, r4, #25
 8006922:	68e3      	ldr	r3, [r4, #12]
 8006924:	6832      	ldr	r2, [r6, #0]
 8006926:	1a9b      	subs	r3, r3, r2
 8006928:	42ab      	cmp	r3, r5
 800692a:	dc26      	bgt.n	800697a <_printf_common+0x96>
 800692c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006930:	1e13      	subs	r3, r2, #0
 8006932:	6822      	ldr	r2, [r4, #0]
 8006934:	bf18      	it	ne
 8006936:	2301      	movne	r3, #1
 8006938:	0692      	lsls	r2, r2, #26
 800693a:	d42b      	bmi.n	8006994 <_printf_common+0xb0>
 800693c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006940:	4649      	mov	r1, r9
 8006942:	4638      	mov	r0, r7
 8006944:	47c0      	blx	r8
 8006946:	3001      	adds	r0, #1
 8006948:	d01e      	beq.n	8006988 <_printf_common+0xa4>
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	68e5      	ldr	r5, [r4, #12]
 800694e:	6832      	ldr	r2, [r6, #0]
 8006950:	f003 0306 	and.w	r3, r3, #6
 8006954:	2b04      	cmp	r3, #4
 8006956:	bf08      	it	eq
 8006958:	1aad      	subeq	r5, r5, r2
 800695a:	68a3      	ldr	r3, [r4, #8]
 800695c:	6922      	ldr	r2, [r4, #16]
 800695e:	bf0c      	ite	eq
 8006960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006964:	2500      	movne	r5, #0
 8006966:	4293      	cmp	r3, r2
 8006968:	bfc4      	itt	gt
 800696a:	1a9b      	subgt	r3, r3, r2
 800696c:	18ed      	addgt	r5, r5, r3
 800696e:	2600      	movs	r6, #0
 8006970:	341a      	adds	r4, #26
 8006972:	42b5      	cmp	r5, r6
 8006974:	d11a      	bne.n	80069ac <_printf_common+0xc8>
 8006976:	2000      	movs	r0, #0
 8006978:	e008      	b.n	800698c <_printf_common+0xa8>
 800697a:	2301      	movs	r3, #1
 800697c:	4652      	mov	r2, sl
 800697e:	4649      	mov	r1, r9
 8006980:	4638      	mov	r0, r7
 8006982:	47c0      	blx	r8
 8006984:	3001      	adds	r0, #1
 8006986:	d103      	bne.n	8006990 <_printf_common+0xac>
 8006988:	f04f 30ff 	mov.w	r0, #4294967295
 800698c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006990:	3501      	adds	r5, #1
 8006992:	e7c6      	b.n	8006922 <_printf_common+0x3e>
 8006994:	18e1      	adds	r1, r4, r3
 8006996:	1c5a      	adds	r2, r3, #1
 8006998:	2030      	movs	r0, #48	; 0x30
 800699a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800699e:	4422      	add	r2, r4
 80069a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069a8:	3302      	adds	r3, #2
 80069aa:	e7c7      	b.n	800693c <_printf_common+0x58>
 80069ac:	2301      	movs	r3, #1
 80069ae:	4622      	mov	r2, r4
 80069b0:	4649      	mov	r1, r9
 80069b2:	4638      	mov	r0, r7
 80069b4:	47c0      	blx	r8
 80069b6:	3001      	adds	r0, #1
 80069b8:	d0e6      	beq.n	8006988 <_printf_common+0xa4>
 80069ba:	3601      	adds	r6, #1
 80069bc:	e7d9      	b.n	8006972 <_printf_common+0x8e>
	...

080069c0 <_printf_i>:
 80069c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069c4:	7e0f      	ldrb	r7, [r1, #24]
 80069c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069c8:	2f78      	cmp	r7, #120	; 0x78
 80069ca:	4691      	mov	r9, r2
 80069cc:	4680      	mov	r8, r0
 80069ce:	460c      	mov	r4, r1
 80069d0:	469a      	mov	sl, r3
 80069d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069d6:	d807      	bhi.n	80069e8 <_printf_i+0x28>
 80069d8:	2f62      	cmp	r7, #98	; 0x62
 80069da:	d80a      	bhi.n	80069f2 <_printf_i+0x32>
 80069dc:	2f00      	cmp	r7, #0
 80069de:	f000 80d8 	beq.w	8006b92 <_printf_i+0x1d2>
 80069e2:	2f58      	cmp	r7, #88	; 0x58
 80069e4:	f000 80a3 	beq.w	8006b2e <_printf_i+0x16e>
 80069e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069f0:	e03a      	b.n	8006a68 <_printf_i+0xa8>
 80069f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069f6:	2b15      	cmp	r3, #21
 80069f8:	d8f6      	bhi.n	80069e8 <_printf_i+0x28>
 80069fa:	a101      	add	r1, pc, #4	; (adr r1, 8006a00 <_printf_i+0x40>)
 80069fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a00:	08006a59 	.word	0x08006a59
 8006a04:	08006a6d 	.word	0x08006a6d
 8006a08:	080069e9 	.word	0x080069e9
 8006a0c:	080069e9 	.word	0x080069e9
 8006a10:	080069e9 	.word	0x080069e9
 8006a14:	080069e9 	.word	0x080069e9
 8006a18:	08006a6d 	.word	0x08006a6d
 8006a1c:	080069e9 	.word	0x080069e9
 8006a20:	080069e9 	.word	0x080069e9
 8006a24:	080069e9 	.word	0x080069e9
 8006a28:	080069e9 	.word	0x080069e9
 8006a2c:	08006b79 	.word	0x08006b79
 8006a30:	08006a9d 	.word	0x08006a9d
 8006a34:	08006b5b 	.word	0x08006b5b
 8006a38:	080069e9 	.word	0x080069e9
 8006a3c:	080069e9 	.word	0x080069e9
 8006a40:	08006b9b 	.word	0x08006b9b
 8006a44:	080069e9 	.word	0x080069e9
 8006a48:	08006a9d 	.word	0x08006a9d
 8006a4c:	080069e9 	.word	0x080069e9
 8006a50:	080069e9 	.word	0x080069e9
 8006a54:	08006b63 	.word	0x08006b63
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	1d1a      	adds	r2, r3, #4
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	602a      	str	r2, [r5, #0]
 8006a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e0a3      	b.n	8006bb4 <_printf_i+0x1f4>
 8006a6c:	6820      	ldr	r0, [r4, #0]
 8006a6e:	6829      	ldr	r1, [r5, #0]
 8006a70:	0606      	lsls	r6, r0, #24
 8006a72:	f101 0304 	add.w	r3, r1, #4
 8006a76:	d50a      	bpl.n	8006a8e <_printf_i+0xce>
 8006a78:	680e      	ldr	r6, [r1, #0]
 8006a7a:	602b      	str	r3, [r5, #0]
 8006a7c:	2e00      	cmp	r6, #0
 8006a7e:	da03      	bge.n	8006a88 <_printf_i+0xc8>
 8006a80:	232d      	movs	r3, #45	; 0x2d
 8006a82:	4276      	negs	r6, r6
 8006a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a88:	485e      	ldr	r0, [pc, #376]	; (8006c04 <_printf_i+0x244>)
 8006a8a:	230a      	movs	r3, #10
 8006a8c:	e019      	b.n	8006ac2 <_printf_i+0x102>
 8006a8e:	680e      	ldr	r6, [r1, #0]
 8006a90:	602b      	str	r3, [r5, #0]
 8006a92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a96:	bf18      	it	ne
 8006a98:	b236      	sxthne	r6, r6
 8006a9a:	e7ef      	b.n	8006a7c <_printf_i+0xbc>
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	6820      	ldr	r0, [r4, #0]
 8006aa0:	1d19      	adds	r1, r3, #4
 8006aa2:	6029      	str	r1, [r5, #0]
 8006aa4:	0601      	lsls	r1, r0, #24
 8006aa6:	d501      	bpl.n	8006aac <_printf_i+0xec>
 8006aa8:	681e      	ldr	r6, [r3, #0]
 8006aaa:	e002      	b.n	8006ab2 <_printf_i+0xf2>
 8006aac:	0646      	lsls	r6, r0, #25
 8006aae:	d5fb      	bpl.n	8006aa8 <_printf_i+0xe8>
 8006ab0:	881e      	ldrh	r6, [r3, #0]
 8006ab2:	4854      	ldr	r0, [pc, #336]	; (8006c04 <_printf_i+0x244>)
 8006ab4:	2f6f      	cmp	r7, #111	; 0x6f
 8006ab6:	bf0c      	ite	eq
 8006ab8:	2308      	moveq	r3, #8
 8006aba:	230a      	movne	r3, #10
 8006abc:	2100      	movs	r1, #0
 8006abe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ac2:	6865      	ldr	r5, [r4, #4]
 8006ac4:	60a5      	str	r5, [r4, #8]
 8006ac6:	2d00      	cmp	r5, #0
 8006ac8:	bfa2      	ittt	ge
 8006aca:	6821      	ldrge	r1, [r4, #0]
 8006acc:	f021 0104 	bicge.w	r1, r1, #4
 8006ad0:	6021      	strge	r1, [r4, #0]
 8006ad2:	b90e      	cbnz	r6, 8006ad8 <_printf_i+0x118>
 8006ad4:	2d00      	cmp	r5, #0
 8006ad6:	d04d      	beq.n	8006b74 <_printf_i+0x1b4>
 8006ad8:	4615      	mov	r5, r2
 8006ada:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ade:	fb03 6711 	mls	r7, r3, r1, r6
 8006ae2:	5dc7      	ldrb	r7, [r0, r7]
 8006ae4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ae8:	4637      	mov	r7, r6
 8006aea:	42bb      	cmp	r3, r7
 8006aec:	460e      	mov	r6, r1
 8006aee:	d9f4      	bls.n	8006ada <_printf_i+0x11a>
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d10b      	bne.n	8006b0c <_printf_i+0x14c>
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	07de      	lsls	r6, r3, #31
 8006af8:	d508      	bpl.n	8006b0c <_printf_i+0x14c>
 8006afa:	6923      	ldr	r3, [r4, #16]
 8006afc:	6861      	ldr	r1, [r4, #4]
 8006afe:	4299      	cmp	r1, r3
 8006b00:	bfde      	ittt	le
 8006b02:	2330      	movle	r3, #48	; 0x30
 8006b04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b0c:	1b52      	subs	r2, r2, r5
 8006b0e:	6122      	str	r2, [r4, #16]
 8006b10:	f8cd a000 	str.w	sl, [sp]
 8006b14:	464b      	mov	r3, r9
 8006b16:	aa03      	add	r2, sp, #12
 8006b18:	4621      	mov	r1, r4
 8006b1a:	4640      	mov	r0, r8
 8006b1c:	f7ff fee2 	bl	80068e4 <_printf_common>
 8006b20:	3001      	adds	r0, #1
 8006b22:	d14c      	bne.n	8006bbe <_printf_i+0x1fe>
 8006b24:	f04f 30ff 	mov.w	r0, #4294967295
 8006b28:	b004      	add	sp, #16
 8006b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b2e:	4835      	ldr	r0, [pc, #212]	; (8006c04 <_printf_i+0x244>)
 8006b30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b34:	6829      	ldr	r1, [r5, #0]
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b3c:	6029      	str	r1, [r5, #0]
 8006b3e:	061d      	lsls	r5, r3, #24
 8006b40:	d514      	bpl.n	8006b6c <_printf_i+0x1ac>
 8006b42:	07df      	lsls	r7, r3, #31
 8006b44:	bf44      	itt	mi
 8006b46:	f043 0320 	orrmi.w	r3, r3, #32
 8006b4a:	6023      	strmi	r3, [r4, #0]
 8006b4c:	b91e      	cbnz	r6, 8006b56 <_printf_i+0x196>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	f023 0320 	bic.w	r3, r3, #32
 8006b54:	6023      	str	r3, [r4, #0]
 8006b56:	2310      	movs	r3, #16
 8006b58:	e7b0      	b.n	8006abc <_printf_i+0xfc>
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	f043 0320 	orr.w	r3, r3, #32
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	2378      	movs	r3, #120	; 0x78
 8006b64:	4828      	ldr	r0, [pc, #160]	; (8006c08 <_printf_i+0x248>)
 8006b66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b6a:	e7e3      	b.n	8006b34 <_printf_i+0x174>
 8006b6c:	0659      	lsls	r1, r3, #25
 8006b6e:	bf48      	it	mi
 8006b70:	b2b6      	uxthmi	r6, r6
 8006b72:	e7e6      	b.n	8006b42 <_printf_i+0x182>
 8006b74:	4615      	mov	r5, r2
 8006b76:	e7bb      	b.n	8006af0 <_printf_i+0x130>
 8006b78:	682b      	ldr	r3, [r5, #0]
 8006b7a:	6826      	ldr	r6, [r4, #0]
 8006b7c:	6961      	ldr	r1, [r4, #20]
 8006b7e:	1d18      	adds	r0, r3, #4
 8006b80:	6028      	str	r0, [r5, #0]
 8006b82:	0635      	lsls	r5, r6, #24
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	d501      	bpl.n	8006b8c <_printf_i+0x1cc>
 8006b88:	6019      	str	r1, [r3, #0]
 8006b8a:	e002      	b.n	8006b92 <_printf_i+0x1d2>
 8006b8c:	0670      	lsls	r0, r6, #25
 8006b8e:	d5fb      	bpl.n	8006b88 <_printf_i+0x1c8>
 8006b90:	8019      	strh	r1, [r3, #0]
 8006b92:	2300      	movs	r3, #0
 8006b94:	6123      	str	r3, [r4, #16]
 8006b96:	4615      	mov	r5, r2
 8006b98:	e7ba      	b.n	8006b10 <_printf_i+0x150>
 8006b9a:	682b      	ldr	r3, [r5, #0]
 8006b9c:	1d1a      	adds	r2, r3, #4
 8006b9e:	602a      	str	r2, [r5, #0]
 8006ba0:	681d      	ldr	r5, [r3, #0]
 8006ba2:	6862      	ldr	r2, [r4, #4]
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	f7f9 fb12 	bl	80001d0 <memchr>
 8006bac:	b108      	cbz	r0, 8006bb2 <_printf_i+0x1f2>
 8006bae:	1b40      	subs	r0, r0, r5
 8006bb0:	6060      	str	r0, [r4, #4]
 8006bb2:	6863      	ldr	r3, [r4, #4]
 8006bb4:	6123      	str	r3, [r4, #16]
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bbc:	e7a8      	b.n	8006b10 <_printf_i+0x150>
 8006bbe:	6923      	ldr	r3, [r4, #16]
 8006bc0:	462a      	mov	r2, r5
 8006bc2:	4649      	mov	r1, r9
 8006bc4:	4640      	mov	r0, r8
 8006bc6:	47d0      	blx	sl
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d0ab      	beq.n	8006b24 <_printf_i+0x164>
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	079b      	lsls	r3, r3, #30
 8006bd0:	d413      	bmi.n	8006bfa <_printf_i+0x23a>
 8006bd2:	68e0      	ldr	r0, [r4, #12]
 8006bd4:	9b03      	ldr	r3, [sp, #12]
 8006bd6:	4298      	cmp	r0, r3
 8006bd8:	bfb8      	it	lt
 8006bda:	4618      	movlt	r0, r3
 8006bdc:	e7a4      	b.n	8006b28 <_printf_i+0x168>
 8006bde:	2301      	movs	r3, #1
 8006be0:	4632      	mov	r2, r6
 8006be2:	4649      	mov	r1, r9
 8006be4:	4640      	mov	r0, r8
 8006be6:	47d0      	blx	sl
 8006be8:	3001      	adds	r0, #1
 8006bea:	d09b      	beq.n	8006b24 <_printf_i+0x164>
 8006bec:	3501      	adds	r5, #1
 8006bee:	68e3      	ldr	r3, [r4, #12]
 8006bf0:	9903      	ldr	r1, [sp, #12]
 8006bf2:	1a5b      	subs	r3, r3, r1
 8006bf4:	42ab      	cmp	r3, r5
 8006bf6:	dcf2      	bgt.n	8006bde <_printf_i+0x21e>
 8006bf8:	e7eb      	b.n	8006bd2 <_printf_i+0x212>
 8006bfa:	2500      	movs	r5, #0
 8006bfc:	f104 0619 	add.w	r6, r4, #25
 8006c00:	e7f5      	b.n	8006bee <_printf_i+0x22e>
 8006c02:	bf00      	nop
 8006c04:	08006edd 	.word	0x08006edd
 8006c08:	08006eee 	.word	0x08006eee

08006c0c <_sbrk_r>:
 8006c0c:	b538      	push	{r3, r4, r5, lr}
 8006c0e:	4d06      	ldr	r5, [pc, #24]	; (8006c28 <_sbrk_r+0x1c>)
 8006c10:	2300      	movs	r3, #0
 8006c12:	4604      	mov	r4, r0
 8006c14:	4608      	mov	r0, r1
 8006c16:	602b      	str	r3, [r5, #0]
 8006c18:	f7fa ff48 	bl	8001aac <_sbrk>
 8006c1c:	1c43      	adds	r3, r0, #1
 8006c1e:	d102      	bne.n	8006c26 <_sbrk_r+0x1a>
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	b103      	cbz	r3, 8006c26 <_sbrk_r+0x1a>
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	bd38      	pop	{r3, r4, r5, pc}
 8006c28:	200002bc 	.word	0x200002bc

08006c2c <__sread>:
 8006c2c:	b510      	push	{r4, lr}
 8006c2e:	460c      	mov	r4, r1
 8006c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c34:	f000 f8a0 	bl	8006d78 <_read_r>
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	bfab      	itete	ge
 8006c3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c3e:	89a3      	ldrhlt	r3, [r4, #12]
 8006c40:	181b      	addge	r3, r3, r0
 8006c42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c46:	bfac      	ite	ge
 8006c48:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c4a:	81a3      	strhlt	r3, [r4, #12]
 8006c4c:	bd10      	pop	{r4, pc}

08006c4e <__swrite>:
 8006c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c52:	461f      	mov	r7, r3
 8006c54:	898b      	ldrh	r3, [r1, #12]
 8006c56:	05db      	lsls	r3, r3, #23
 8006c58:	4605      	mov	r5, r0
 8006c5a:	460c      	mov	r4, r1
 8006c5c:	4616      	mov	r6, r2
 8006c5e:	d505      	bpl.n	8006c6c <__swrite+0x1e>
 8006c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c64:	2302      	movs	r3, #2
 8006c66:	2200      	movs	r2, #0
 8006c68:	f000 f868 	bl	8006d3c <_lseek_r>
 8006c6c:	89a3      	ldrh	r3, [r4, #12]
 8006c6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c76:	81a3      	strh	r3, [r4, #12]
 8006c78:	4632      	mov	r2, r6
 8006c7a:	463b      	mov	r3, r7
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c82:	f000 b817 	b.w	8006cb4 <_write_r>

08006c86 <__sseek>:
 8006c86:	b510      	push	{r4, lr}
 8006c88:	460c      	mov	r4, r1
 8006c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c8e:	f000 f855 	bl	8006d3c <_lseek_r>
 8006c92:	1c43      	adds	r3, r0, #1
 8006c94:	89a3      	ldrh	r3, [r4, #12]
 8006c96:	bf15      	itete	ne
 8006c98:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ca2:	81a3      	strheq	r3, [r4, #12]
 8006ca4:	bf18      	it	ne
 8006ca6:	81a3      	strhne	r3, [r4, #12]
 8006ca8:	bd10      	pop	{r4, pc}

08006caa <__sclose>:
 8006caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cae:	f000 b813 	b.w	8006cd8 <_close_r>
	...

08006cb4 <_write_r>:
 8006cb4:	b538      	push	{r3, r4, r5, lr}
 8006cb6:	4d07      	ldr	r5, [pc, #28]	; (8006cd4 <_write_r+0x20>)
 8006cb8:	4604      	mov	r4, r0
 8006cba:	4608      	mov	r0, r1
 8006cbc:	4611      	mov	r1, r2
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	602a      	str	r2, [r5, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	f7fa fe95 	bl	80019f2 <_write>
 8006cc8:	1c43      	adds	r3, r0, #1
 8006cca:	d102      	bne.n	8006cd2 <_write_r+0x1e>
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	b103      	cbz	r3, 8006cd2 <_write_r+0x1e>
 8006cd0:	6023      	str	r3, [r4, #0]
 8006cd2:	bd38      	pop	{r3, r4, r5, pc}
 8006cd4:	200002bc 	.word	0x200002bc

08006cd8 <_close_r>:
 8006cd8:	b538      	push	{r3, r4, r5, lr}
 8006cda:	4d06      	ldr	r5, [pc, #24]	; (8006cf4 <_close_r+0x1c>)
 8006cdc:	2300      	movs	r3, #0
 8006cde:	4604      	mov	r4, r0
 8006ce0:	4608      	mov	r0, r1
 8006ce2:	602b      	str	r3, [r5, #0]
 8006ce4:	f7fa fea1 	bl	8001a2a <_close>
 8006ce8:	1c43      	adds	r3, r0, #1
 8006cea:	d102      	bne.n	8006cf2 <_close_r+0x1a>
 8006cec:	682b      	ldr	r3, [r5, #0]
 8006cee:	b103      	cbz	r3, 8006cf2 <_close_r+0x1a>
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	bd38      	pop	{r3, r4, r5, pc}
 8006cf4:	200002bc 	.word	0x200002bc

08006cf8 <_fstat_r>:
 8006cf8:	b538      	push	{r3, r4, r5, lr}
 8006cfa:	4d07      	ldr	r5, [pc, #28]	; (8006d18 <_fstat_r+0x20>)
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	4604      	mov	r4, r0
 8006d00:	4608      	mov	r0, r1
 8006d02:	4611      	mov	r1, r2
 8006d04:	602b      	str	r3, [r5, #0]
 8006d06:	f7fa fe9c 	bl	8001a42 <_fstat>
 8006d0a:	1c43      	adds	r3, r0, #1
 8006d0c:	d102      	bne.n	8006d14 <_fstat_r+0x1c>
 8006d0e:	682b      	ldr	r3, [r5, #0]
 8006d10:	b103      	cbz	r3, 8006d14 <_fstat_r+0x1c>
 8006d12:	6023      	str	r3, [r4, #0]
 8006d14:	bd38      	pop	{r3, r4, r5, pc}
 8006d16:	bf00      	nop
 8006d18:	200002bc 	.word	0x200002bc

08006d1c <_isatty_r>:
 8006d1c:	b538      	push	{r3, r4, r5, lr}
 8006d1e:	4d06      	ldr	r5, [pc, #24]	; (8006d38 <_isatty_r+0x1c>)
 8006d20:	2300      	movs	r3, #0
 8006d22:	4604      	mov	r4, r0
 8006d24:	4608      	mov	r0, r1
 8006d26:	602b      	str	r3, [r5, #0]
 8006d28:	f7fa fe9b 	bl	8001a62 <_isatty>
 8006d2c:	1c43      	adds	r3, r0, #1
 8006d2e:	d102      	bne.n	8006d36 <_isatty_r+0x1a>
 8006d30:	682b      	ldr	r3, [r5, #0]
 8006d32:	b103      	cbz	r3, 8006d36 <_isatty_r+0x1a>
 8006d34:	6023      	str	r3, [r4, #0]
 8006d36:	bd38      	pop	{r3, r4, r5, pc}
 8006d38:	200002bc 	.word	0x200002bc

08006d3c <_lseek_r>:
 8006d3c:	b538      	push	{r3, r4, r5, lr}
 8006d3e:	4d07      	ldr	r5, [pc, #28]	; (8006d5c <_lseek_r+0x20>)
 8006d40:	4604      	mov	r4, r0
 8006d42:	4608      	mov	r0, r1
 8006d44:	4611      	mov	r1, r2
 8006d46:	2200      	movs	r2, #0
 8006d48:	602a      	str	r2, [r5, #0]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	f7fa fe94 	bl	8001a78 <_lseek>
 8006d50:	1c43      	adds	r3, r0, #1
 8006d52:	d102      	bne.n	8006d5a <_lseek_r+0x1e>
 8006d54:	682b      	ldr	r3, [r5, #0]
 8006d56:	b103      	cbz	r3, 8006d5a <_lseek_r+0x1e>
 8006d58:	6023      	str	r3, [r4, #0]
 8006d5a:	bd38      	pop	{r3, r4, r5, pc}
 8006d5c:	200002bc 	.word	0x200002bc

08006d60 <__malloc_lock>:
 8006d60:	4801      	ldr	r0, [pc, #4]	; (8006d68 <__malloc_lock+0x8>)
 8006d62:	f7ff bb1d 	b.w	80063a0 <__retarget_lock_acquire_recursive>
 8006d66:	bf00      	nop
 8006d68:	200002b0 	.word	0x200002b0

08006d6c <__malloc_unlock>:
 8006d6c:	4801      	ldr	r0, [pc, #4]	; (8006d74 <__malloc_unlock+0x8>)
 8006d6e:	f7ff bb18 	b.w	80063a2 <__retarget_lock_release_recursive>
 8006d72:	bf00      	nop
 8006d74:	200002b0 	.word	0x200002b0

08006d78 <_read_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4d07      	ldr	r5, [pc, #28]	; (8006d98 <_read_r+0x20>)
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	4608      	mov	r0, r1
 8006d80:	4611      	mov	r1, r2
 8006d82:	2200      	movs	r2, #0
 8006d84:	602a      	str	r2, [r5, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	f7fa fe16 	bl	80019b8 <_read>
 8006d8c:	1c43      	adds	r3, r0, #1
 8006d8e:	d102      	bne.n	8006d96 <_read_r+0x1e>
 8006d90:	682b      	ldr	r3, [r5, #0]
 8006d92:	b103      	cbz	r3, 8006d96 <_read_r+0x1e>
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	bd38      	pop	{r3, r4, r5, pc}
 8006d98:	200002bc 	.word	0x200002bc

08006d9c <_init>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	bf00      	nop
 8006da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006da2:	bc08      	pop	{r3}
 8006da4:	469e      	mov	lr, r3
 8006da6:	4770      	bx	lr

08006da8 <_fini>:
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	bf00      	nop
 8006dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dae:	bc08      	pop	{r3}
 8006db0:	469e      	mov	lr, r3
 8006db2:	4770      	bx	lr
